{"version":3,"file":"index.js","sources":["../../node_modules/base64-js/index.js","../../node_modules/ieee754/index.js","../../node_modules/buffer/index.js","../../node_modules/@solana/buffer-layout/lib/Layout.js","../../node_modules/@solana/spl-token/lib/esm/constants.js","../../node_modules/@solana/buffer-layout-utils/lib/esm/base.mjs","../../node_modules/bigint-buffer/dist/browser.js","../../node_modules/@solana/buffer-layout-utils/lib/esm/bigint.mjs","../../node_modules/@solana/buffer-layout-utils/lib/esm/native.mjs","../../node_modules/@solana/buffer-layout-utils/lib/esm/web3.mjs","../../node_modules/@solana/spl-token/lib/esm/errors.js","../../node_modules/@solana/spl-token/lib/esm/instructions/types.js","../../node_modules/@solana/spl-token/lib/esm/instructions/amountToUiAmount.js","../../node_modules/@solana/spl-token/lib/esm/instructions/approve.js","../../node_modules/@solana/spl-token/lib/esm/instructions/approveChecked.js","../../node_modules/@solana/spl-token/lib/esm/instructions/burn.js","../../node_modules/@solana/spl-token/lib/esm/instructions/burnChecked.js","../../node_modules/@solana/spl-token/lib/esm/instructions/closeAccount.js","../../node_modules/@solana/spl-token/lib/esm/extensions/accountType.js","../../node_modules/@solana/spl-token/lib/esm/state/account.js","../../node_modules/@solana/spl-token/lib/esm/state/multisig.js","../../node_modules/@solana/spl-token/lib/esm/extensions/cpiGuard/instructions.js","../../node_modules/@solana/spl-token/lib/esm/state/mint.js","../../node_modules/@solana/spl-token/lib/esm/extensions/defaultAccountState/instructions.js","../../node_modules/@solana/spl-token/lib/esm/extensions/cpiGuard/state.js","../../node_modules/@solana/spl-token/lib/esm/extensions/defaultAccountState/state.js","../../node_modules/@solana/spl-token/lib/esm/extensions/immutableOwner.js","../../node_modules/@solana/spl-token/lib/esm/extensions/memoTransfer/instructions.js","../../node_modules/@solana/spl-token/lib/esm/extensions/interestBearingMint/state.js","../../node_modules/@solana/spl-token/lib/esm/extensions/memoTransfer/state.js","../../node_modules/@solana/spl-token/lib/esm/extensions/metadataPointer/state.js","../../node_modules/@solana/spl-token/lib/esm/extensions/mintCloseAuthority.js","../../node_modules/@solana/spl-token/lib/esm/extensions/nonTransferable.js","../../node_modules/@solana/spl-token/lib/esm/extensions/transferFee/instructions.js","../../node_modules/@solana/spl-token/lib/esm/extensions/permanentDelegate.js","../../node_modules/@solana/spl-token/lib/esm/extensions/transferFee/state.js","../../node_modules/@solana/spl-token/lib/esm/instructions/transferChecked.js","../../node_modules/@solana/spl-token/lib/esm/extensions/transferHook/state.js","../../node_modules/@solana/spl-token/lib/esm/extensions/transferHook/instructions.js","../../node_modules/@solana/spl-token/lib/esm/extensions/extensionType.js","../../node_modules/@solana/spl-token/lib/esm/instructions/initializeAccount.js","../../node_modules/@solana/spl-token/lib/esm/instructions/initializeMint2.js","../../node_modules/@solana/spl-token/lib/esm/instructions/initializeMultisig.js","../../node_modules/@solana/spl-token/lib/esm/instructions/createNativeMint.js","../../node_modules/@solana/spl-token/lib/esm/instructions/syncNative.js","../../node_modules/@solana/spl-token/lib/esm/instructions/freezeAccount.js","../../node_modules/@solana/spl-token/lib/esm/instructions/mintTo.js","../../node_modules/@solana/spl-token/lib/esm/instructions/mintToChecked.js","../../node_modules/@solana/spl-token/lib/esm/instructions/revoke.js","../../node_modules/@solana/spl-token/lib/esm/instructions/setAuthority.js","../../node_modules/@solana/spl-token/lib/esm/instructions/thawAccount.js","../../node_modules/@solana/spl-token/lib/esm/instructions/transfer.js","../../node_modules/@solana/spl-token/lib/esm/instructions/uiAmountToAmount.js","../../node_modules/@solana/spl-token/lib/esm/instructions/initializeMint.js","../../node_modules/@solana/spl-token/lib/esm/extensions/interestBearingMint/instructions.js","../../node_modules/@solana/spl-token/lib/esm/extensions/metadataPointer/instructions.js","../../node_modules/@solana/errors/dist/index.browser.js","../../node_modules/@solana/codecs-core/dist/index.browser.js","../../node_modules/@solana/codecs-numbers/dist/index.browser.js","../../node_modules/@solana/codecs-data-structures/dist/index.browser.js","../../node_modules/@solana/codecs-strings/dist/index.browser.js","../../node_modules/@solana/options/dist/index.browser.js","../../node_modules/@solana/spl-token-metadata/lib/esm/field.js","../../node_modules/@solana/spl-type-length-value/lib/esm/splDiscriminate.js","../../node_modules/@solana/spl-token-metadata/lib/esm/state.js","../../node_modules/@solana/spl-token/lib/esm/instructions/initializeAccount2.js","../../node_modules/@solana/spl-token/lib/esm/instructions/initializeAccount3.js","../../node_modules/@solana/spl-token/lib/esm/instructions/initializeImmutableOwner.js","../../node_modules/@solana/spl-token/lib/esm/instructions/initializeMintCloseAuthority.js","../../node_modules/@solana/spl-token/lib/esm/instructions/initializeNonTransferableMint.js","../../node_modules/@solana/spl-token/lib/esm/instructions/initializePermanentDelegate.js","../../../src/helpers.ts","../../../src/programs/token-extensions/transfer-fee-extension.ts","../../../src/programs/token-extensions/token-metadata-extension.ts","../../../src/programs/token-extensions/get-account-data-size-eztension.ts","../../../src/parsers.ts"],"sourcesContent":["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * Support for translating between Uint8Array instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;\nexports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;\nconst buffer_1 = require(\"buffer\");\n/* Check if a value is a Uint8Array.\n *\n * @ignore */\nfunction checkUint8Array(b) {\n    if (!(b instanceof Uint8Array)) {\n        throw new TypeError('b must be a Uint8Array');\n    }\n}\nexports.checkUint8Array = checkUint8Array;\n/* Create a Buffer instance from a Uint8Array.\n *\n * @ignore */\nfunction uint8ArrayToBuffer(b) {\n    checkUint8Array(b);\n    return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);\n}\nexports.uint8ArrayToBuffer = uint8ArrayToBuffer;\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nclass Layout {\n    constructor(span, property) {\n        if (!Number.isInteger(span)) {\n            throw new TypeError('span must be an integer');\n        }\n        /** The span of the layout in bytes.\n         *\n         * Positive values are generally expected.\n         *\n         * Zero will only appear in {@link Constant}s and in {@link\n         * Sequence}s where the {@link Sequence#count|count} is zero.\n         *\n         * A negative value indicates that the span is value-specific, and\n         * must be obtained using {@link Layout#getSpan|getSpan}. */\n        this.span = span;\n        /** The property name used when this layout is represented in an\n         * Object.\n         *\n         * Used only for layouts that {@link Layout#decode|decode} to Object\n         * instances.  If left undefined the span of the unnamed layout will\n         * be treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Function to create an Object into which decoded properties will\n     * be written.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances, which means:\n     * * {@link Structure}\n     * * {@link Union}\n     * * {@link VariantLayout}\n     * * {@link BitStructure}\n     *\n     * If left undefined the JavaScript representation of these layouts\n     * will be Object instances.\n     *\n     * See {@link bindConstructorLayout}.\n     */\n    makeDestinationObject() {\n        return {};\n    }\n    /**\n     * Calculate the span of a specific instance of a layout.\n     *\n     * @param {Uint8Array} b - the buffer that contains an encoded instance.\n     *\n     * @param {Number} [offset] - the offset at which the encoded instance\n     * starts.  If absent a zero offset is inferred.\n     *\n     * @return {Number} - the number of bytes covered by the layout\n     * instance.  If this method is not overridden in a subclass the\n     * definition-time constant {@link Layout#span|span} will be\n     * returned.\n     *\n     * @throws {RangeError} - if the length of the value cannot be\n     * determined.\n     */\n    getSpan(b, offset) {\n        if (0 > this.span) {\n            throw new RangeError('indeterminate span');\n        }\n        return this.span;\n    }\n    /**\n     * Replicate the layout using a new property.\n     *\n     * This function must be used to get a structurally-equivalent layout\n     * with a different name since all {@link Layout} instances are\n     * immutable.\n     *\n     * **NOTE** This is a shallow copy.  All fields except {@link\n     * Layout#property|property} are strictly equal to the origin layout.\n     *\n     * @param {String} property - the value for {@link\n     * Layout#property|property} in the replica.\n     *\n     * @returns {Layout} - the copy with {@link Layout#property|property}\n     * set to `property`.\n     */\n    replicate(property) {\n        const rv = Object.create(this.constructor.prototype);\n        Object.assign(rv, this);\n        rv.property = property;\n        return rv;\n    }\n    /**\n     * Create an object from layout properties and an array of values.\n     *\n     * **NOTE** This function returns `undefined` if invoked on a layout\n     * that does not return its value as an Object.  Objects are\n     * returned for things that are a {@link Structure}, which includes\n     * {@link VariantLayout|variant layouts} if they are structures, and\n     * excludes {@link Union}s.  If you want this feature for a union\n     * you must use {@link Union.getVariant|getVariant} to select the\n     * desired layout.\n     *\n     * @param {Array} values - an array of values that correspond to the\n     * default order for properties.  As with {@link Layout#decode|decode}\n     * layout elements that have no property name are skipped when\n     * iterating over the array values.  Only the top-level properties are\n     * assigned; arguments are not assigned to properties of contained\n     * layouts.  Any unused values are ignored.\n     *\n     * @return {(Object|undefined)}\n     */\n    fromArray(values) {\n        return undefined;\n    }\n}\nexports.Layout = Layout;\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n    if (lo.property) {\n        return name + '[' + lo.property + ']';\n    }\n    return name;\n}\nexports.nameWithProperty = nameWithProperty;\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\n// `Class` must be a constructor Function, but the assignment of a `layout_` property to it makes it difficult to type\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction bindConstructorLayout(Class, layout) {\n    if ('function' !== typeof Class) {\n        throw new TypeError('Class must be constructor');\n    }\n    if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {\n        throw new Error('Class is already bound to a layout');\n    }\n    if (!(layout && (layout instanceof Layout))) {\n        throw new TypeError('layout must be a Layout');\n    }\n    if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {\n        throw new Error('layout is already bound to a constructor');\n    }\n    Class.layout_ = layout;\n    layout.boundConstructor_ = Class;\n    layout.makeDestinationObject = (() => new Class());\n    Object.defineProperty(Class.prototype, 'encode', {\n        value(b, offset) {\n            return layout.encode(this, b, offset);\n        },\n        writable: true,\n    });\n    Object.defineProperty(Class, 'decode', {\n        value(b, offset) {\n            return layout.decode(b, offset);\n        },\n        writable: true,\n    });\n}\nexports.bindConstructorLayout = bindConstructorLayout;\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nclass ExternalLayout extends Layout {\n    /**\n     * Return `true` iff the external layout decodes to an unsigned\n     * integer layout.\n     *\n     * In that case it can be used as the source of {@link\n     * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n     * or as {@link UnionLayoutDiscriminator#layout|external union\n     * discriminators}.\n     *\n     * @abstract\n     */\n    isCount() {\n        throw new Error('ExternalLayout is abstract');\n    }\n}\nexports.ExternalLayout = ExternalLayout;\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\nclass GreedyCount extends ExternalLayout {\n    constructor(elementSpan = 1, property) {\n        if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {\n            throw new TypeError('elementSpan must be a (positive) integer');\n        }\n        super(-1, property);\n        /** The layout for individual elements of the sequence.  The value\n         * must be a positive integer.  If not provided, the value will be\n         * 1. */\n        this.elementSpan = elementSpan;\n    }\n    /** @override */\n    isCount() {\n        return true;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const rem = b.length - offset;\n        return Math.floor(rem / this.elementSpan);\n    }\n    /** @override */\n    encode(src, b, offset) {\n        return 0;\n    }\n}\nexports.GreedyCount = GreedyCount;\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nclass OffsetLayout extends ExternalLayout {\n    constructor(layout, offset = 0, property) {\n        if (!(layout instanceof Layout)) {\n            throw new TypeError('layout must be a Layout');\n        }\n        if (!Number.isInteger(offset)) {\n            throw new TypeError('offset must be integer or undefined');\n        }\n        super(layout.span, property || layout.property);\n        /** The subordinated layout. */\n        this.layout = layout;\n        /** The location of {@link OffsetLayout#layout} relative to the\n         * start of another layout.\n         *\n         * The value may be positive or negative, but an error will thrown\n         * if at the point of use it goes outside the span of the Uint8Array\n         * being accessed.  */\n        this.offset = offset;\n    }\n    /** @override */\n    isCount() {\n        return ((this.layout instanceof UInt)\n            || (this.layout instanceof UIntBE));\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return this.layout.decode(b, offset + this.offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        return this.layout.encode(src, b, offset + this.offset);\n    }\n}\nexports.OffsetLayout = OffsetLayout;\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UInt extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UInt = UInt;\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UIntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UIntBE = UIntBE;\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Int extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.Int = Int;\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass IntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.IntBE = IntBE;\nconst V2E32 = Math.pow(2, 32);\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n    const hi32 = Math.floor(src / V2E32);\n    const lo32 = src - (hi32 * V2E32);\n    return { hi32, lo32 };\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n    return hi32 * V2E32 + lo32;\n}\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readUInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeUInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64 = NearUInt64;\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readUInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64BE = NearUInt64BE;\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64 = NearInt64;\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64BE = NearInt64BE;\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Float extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatLE(src, offset);\n        return 4;\n    }\n}\nexports.Float = Float;\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass FloatBE extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatBE(src, offset);\n        return 4;\n    }\n}\nexports.FloatBE = FloatBE;\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Double extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleLE(src, offset);\n        return 8;\n    }\n}\nexports.Double = Double;\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass DoubleBE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleBE(src, offset);\n        return 8;\n    }\n}\nexports.DoubleBE = DoubleBE;\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Sequence extends Layout {\n    constructor(elementLayout, count, property) {\n        if (!(elementLayout instanceof Layout)) {\n            throw new TypeError('elementLayout must be a Layout');\n        }\n        if (!(((count instanceof ExternalLayout) && count.isCount())\n            || (Number.isInteger(count) && (0 <= count)))) {\n            throw new TypeError('count must be non-negative integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if ((!(count instanceof ExternalLayout))\n            && (0 < elementLayout.span)) {\n            span = count * elementLayout.span;\n        }\n        super(span, property);\n        /** The layout for individual elements of the sequence. */\n        this.elementLayout = elementLayout;\n        /** The number of elements in the sequence.\n         *\n         * This will be either a non-negative integer or an instance of\n         * {@link ExternalLayout} for which {@link\n         * ExternalLayout#isCount|isCount()} is `true`. */\n        this.count = count;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        if (0 < this.elementLayout.span) {\n            span = count * this.elementLayout.span;\n        }\n        else {\n            let idx = 0;\n            while (idx < count) {\n                span += this.elementLayout.getSpan(b, offset + span);\n                ++idx;\n            }\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const rv = [];\n        let i = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        while (i < count) {\n            rv.push(this.elementLayout.decode(b, offset));\n            offset += this.elementLayout.getSpan(b, offset);\n            i += 1;\n        }\n        return rv;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n     *\n     * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n     * the unused space in the buffer is left unchanged.  If `src` is\n     * longer than {@link Sequence#count|count} the unneeded elements are\n     * ignored.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset = 0) {\n        const elo = this.elementLayout;\n        const span = src.reduce((span, v) => {\n            return span + elo.encode(v, b, offset + span);\n        }, 0);\n        if (this.count instanceof ExternalLayout) {\n            this.count.encode(src.length, b, offset);\n        }\n        return span;\n    }\n}\nexports.Sequence = Sequence;\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nclass Structure extends Layout {\n    constructor(fields, property, decodePrefixes) {\n        if (!(Array.isArray(fields)\n            && fields.reduce((acc, v) => acc && (v instanceof Layout), true))) {\n            throw new TypeError('fields must be array of Layout instances');\n        }\n        if (('boolean' === typeof property)\n            && (undefined === decodePrefixes)) {\n            decodePrefixes = property;\n            property = undefined;\n        }\n        /* Verify absence of unnamed variable-length fields. */\n        for (const fd of fields) {\n            if ((0 > fd.span)\n                && (undefined === fd.property)) {\n                throw new Error('fields cannot contain unnamed variable-length layout');\n            }\n        }\n        let span = -1;\n        try {\n            span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n        }\n        catch (e) {\n            // ignore error\n        }\n        super(span, property);\n        /** The sequence of {@link Layout} values that comprise the\n         * structure.\n         *\n         * The individual elements need not be the same type, and may be\n         * either scalar or aggregate layouts.  If a member layout leaves\n         * its {@link Layout#property|property} undefined the\n         * corresponding region of the buffer associated with the element\n         * will not be mutated.\n         *\n         * @type {Layout[]} */\n        this.fields = fields;\n        /** Control behavior of {@link Layout#decode|decode()} given short\n         * buffers.\n         *\n         * In some situations a structure many be extended with additional\n         * fields over time, with older installations providing only a\n         * prefix of the full structure.  If this property is `true`\n         * decoding will accept those buffers and leave subsequent fields\n         * undefined, as long as the buffer ends at a field boundary.\n         * Defaults to `false`. */\n        this.decodePrefixes = !!decodePrefixes;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        try {\n            span = this.fields.reduce((span, fd) => {\n                const fsp = fd.getSpan(b, offset);\n                offset += fsp;\n                return span + fsp;\n            }, 0);\n        }\n        catch (e) {\n            throw new RangeError('indeterminate span');\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b, offset);\n            }\n            offset += fd.getSpan(b, offset);\n            if (this.decodePrefixes\n                && (b.length === offset)) {\n                break;\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Structure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the buffer is\n     * left unmodified. */\n    encode(src, b, offset = 0) {\n        const firstOffset = offset;\n        let lastOffset = 0;\n        let lastWrote = 0;\n        for (const fd of this.fields) {\n            let span = fd.span;\n            lastWrote = (0 < span) ? span : 0;\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    lastWrote = fd.encode(fv, b, offset);\n                    if (0 > span) {\n                        /* Read the as-encoded span, which is not necessarily the\n                         * same as what we wrote. */\n                        span = fd.getSpan(b, offset);\n                    }\n                }\n            }\n            lastOffset = offset;\n            offset += span;\n        }\n        /* Use (lastOffset + lastWrote) instead of offset because the last\n         * item may have had a dynamic length and we don't want to include\n         * the padding between it and the end of the space reserved for\n         * it. */\n        return (lastOffset + lastWrote) - firstOffset;\n    }\n    /** @override */\n    fromArray(values) {\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if ((undefined !== fd.property)\n                && (0 < values.length)) {\n                dest[fd.property] = values.shift();\n            }\n        }\n        return dest;\n    }\n    /**\n     * Get access to the layout of a given property.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Layout} - the layout associated with `property`, or\n     * undefined if there is no such property.\n     */\n    layoutFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Get the offset of a structure member.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Number} - the offset in bytes to the start of `property`\n     * within the structure, or undefined if `property` is not a field\n     * within the structure.  If the property is a member but follows a\n     * variable-length structure member a negative number will be\n     * returned.\n     */\n    offsetOf(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        let offset = 0;\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return offset;\n            }\n            if (0 > fd.span) {\n                offset = -1;\n            }\n            else if (0 <= offset) {\n                offset += fd.span;\n            }\n        }\n        return undefined;\n    }\n}\nexports.Structure = Structure;\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nclass UnionDiscriminator {\n    constructor(property) {\n        /** The {@link Layout#property|property} to be used when the\n         * discriminator is referenced in isolation (generally when {@link\n         * Union#decode|Union decode} cannot delegate to a specific\n         * variant). */\n        this.property = property;\n    }\n    /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n     *\n     * The implementation of this method need not reference the buffer if\n     * variant information is available through other means. */\n    decode(b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n    /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n     *\n     * The implementation of this method need not store the value if\n     * variant information is maintained through other means. */\n    encode(src, b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n}\nexports.UnionDiscriminator = UnionDiscriminator;\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nclass UnionLayoutDiscriminator extends UnionDiscriminator {\n    constructor(layout, property) {\n        if (!((layout instanceof ExternalLayout)\n            && layout.isCount())) {\n            throw new TypeError('layout must be an unsigned integer ExternalLayout');\n        }\n        super(property || layout.property || 'variant');\n        /** The {@link ExternalLayout} used to access the discriminator\n         * value. */\n        this.layout = layout;\n    }\n    /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    decode(b, offset) {\n        return this.layout.decode(b, offset);\n    }\n    /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    encode(src, b, offset) {\n        return this.layout.encode(src, b, offset);\n    }\n}\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Union extends Layout {\n    constructor(discr, defaultLayout, property) {\n        let discriminator;\n        if ((discr instanceof UInt)\n            || (discr instanceof UIntBE)) {\n            discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n        }\n        else if ((discr instanceof ExternalLayout)\n            && discr.isCount()) {\n            discriminator = new UnionLayoutDiscriminator(discr);\n        }\n        else if (!(discr instanceof UnionDiscriminator)) {\n            throw new TypeError('discr must be a UnionDiscriminator '\n                + 'or an unsigned integer layout');\n        }\n        else {\n            discriminator = discr;\n        }\n        if (undefined === defaultLayout) {\n            defaultLayout = null;\n        }\n        if (!((null === defaultLayout)\n            || (defaultLayout instanceof Layout))) {\n            throw new TypeError('defaultLayout must be null or a Layout');\n        }\n        if (null !== defaultLayout) {\n            if (0 > defaultLayout.span) {\n                throw new Error('defaultLayout must have constant span');\n            }\n            if (undefined === defaultLayout.property) {\n                defaultLayout = defaultLayout.replicate('content');\n            }\n        }\n        /* The union span can be estimated only if there's a default\n         * layout.  The union spans its default layout, plus any prefix\n         * variant layout.  By construction both layouts, if present, have\n         * non-negative span. */\n        let span = -1;\n        if (defaultLayout) {\n            span = defaultLayout.span;\n            if ((0 <= span) && ((discr instanceof UInt)\n                || (discr instanceof UIntBE))) {\n                span += discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The interface for the discriminator value in isolation.\n         *\n         * This a {@link UnionDiscriminator} either passed to the\n         * constructor or synthesized from the `discr` constructor\n         * argument.  {@link\n         * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n         * `true` iff the `discr` parameter was a non-offset {@link\n         * Layout} instance. */\n        this.discriminator = discriminator;\n        /** `true` if the {@link Union#discriminator|discriminator} is the\n         * first field in the union.\n         *\n         * If `false` the discriminator is obtained from somewhere\n         * else. */\n        this.usesPrefixDiscriminator = (discr instanceof UInt)\n            || (discr instanceof UIntBE);\n        /** The layout for non-discriminator content when the value of the\n         * discriminator is not recognized.\n         *\n         * This is the value passed to the constructor.  It is\n         * structurally equivalent to the second component of {@link\n         * Union#layout|layout} but may have a different property\n         * name. */\n        this.defaultLayout = defaultLayout;\n        /** A registry of allowed variants.\n         *\n         * The keys are unsigned integers which should be compatible with\n         * {@link Union.discriminator|discriminator}.  The property value\n         * is the corresponding {@link VariantLayout} instances assigned\n         * to this union by {@link Union#addVariant|addVariant}.\n         *\n         * **NOTE** The registry remains mutable so that variants can be\n         * {@link Union#addVariant|added} at any time.  Users should not\n         * manipulate the content of this property. */\n        this.registry = {};\n        /* Private variable used when invoking getSourceVariant */\n        let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n        /** Function to infer the variant selected by a source object.\n         *\n         * Defaults to {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n         * be overridden using {@link\n         * Union#configGetSourceVariant|configGetSourceVariant}.\n         *\n         * @param {Object} src - as with {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * @returns {(undefined|VariantLayout)} The default variant\n         * (`undefined`) or first registered variant that uses a property\n         * available in `src`. */\n        this.getSourceVariant = function (src) {\n            return boundGetSourceVariant(src);\n        };\n        /** Function to override the implementation of {@link\n         * Union#getSourceVariant|getSourceVariant}.\n         *\n         * Use this if the desired variant cannot be identified using the\n         * algorithm of {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * **NOTE** The provided function will be invoked bound to this\n         * Union instance, providing local access to {@link\n         * Union#registry|registry}.\n         *\n         * @param {Function} gsv - a function that follows the API of\n         * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n        this.configGetSourceVariant = function (gsv) {\n            boundGetSourceVariant = gsv.bind(this);\n        };\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        /* Default layouts always have non-negative span, so we don't have\n         * one and we have to recognize the variant which will in turn\n         * determine the span. */\n        const vlo = this.getVariant(b, offset);\n        if (!vlo) {\n            throw new Error('unable to determine span for unrecognized variant');\n        }\n        return vlo.getSpan(b, offset);\n    }\n    /**\n     * Method to infer a registered Union variant compatible with `src`.\n     *\n     * The first satisfied rule in the following sequence defines the\n     * return value:\n     * * If `src` has properties matching the Union discriminator and\n     *   the default layout, `undefined` is returned regardless of the\n     *   value of the discriminator property (this ensures the default\n     *   layout will be used);\n     * * If `src` has a property matching the Union discriminator, the\n     *   value of the discriminator identifies a registered variant, and\n     *   either (a) the variant has no layout, or (b) `src` has the\n     *   variant's property, then the variant is returned (because the\n     *   source satisfies the constraints of the variant it identifies);\n     * * If `src` does not have a property matching the Union\n     *   discriminator, but does have a property matching a registered\n     *   variant, then the variant is returned (because the source\n     *   matches a variant without an explicit conflict);\n     * * An error is thrown (because we either can't identify a variant,\n     *   or we were explicitly told the variant but can't satisfy it).\n     *\n     * @param {Object} src - an object presumed to be compatible with\n     * the content of the Union.\n     *\n     * @return {(undefined|VariantLayout)} - as described above.\n     *\n     * @throws {Error} - if `src` cannot be associated with a default or\n     * registered variant.\n     */\n    defaultGetSourceVariant(src) {\n        if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {\n            if (this.defaultLayout && this.defaultLayout.property\n                && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {\n                return undefined;\n            }\n            const vlo = this.registry[src[this.discriminator.property]];\n            if (vlo\n                && ((!vlo.layout)\n                    || (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)))) {\n                return vlo;\n            }\n        }\n        else {\n            for (const tag in this.registry) {\n                const vlo = this.registry[tag];\n                if (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)) {\n                    return vlo;\n                }\n            }\n        }\n        throw new Error('unable to infer src variant');\n    }\n    /** Implement {@link Layout#decode|decode} for {@link Union}.\n     *\n     * If the variant is {@link Union#addVariant|registered} the return\n     * value is an instance of that variant, with no explicit\n     * discriminator.  Otherwise the {@link Union#defaultLayout|default\n     * layout} is used to decode the content. */\n    decode(b, offset = 0) {\n        let dest;\n        const dlo = this.discriminator;\n        const discr = dlo.decode(b, offset);\n        const clo = this.registry[discr];\n        if (undefined === clo) {\n            const defaultLayout = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dest = this.makeDestinationObject();\n            dest[dlo.property] = discr;\n            // defaultLayout.property can be undefined, but this is allowed by buffer-layout\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);\n        }\n        else {\n            dest = clo.decode(b, offset);\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Union}.\n     *\n     * This API assumes the `src` object is consistent with the union's\n     * {@link Union#defaultLayout|default layout}.  To encode variants\n     * use the appropriate variant-specific {@link VariantLayout#encode}\n     * method. */\n    encode(src, b, offset = 0) {\n        const vlo = this.getSourceVariant(src);\n        if (undefined === vlo) {\n            const dlo = this.discriminator;\n            // this.defaultLayout is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const clo = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dlo.encode(src[dlo.property], b, offset);\n            // clo.property is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n        }\n        return vlo.encode(src, b, offset);\n    }\n    /** Register a new variant structure within a union.  The newly\n     * created variant is returned.\n     *\n     * @param {Number} variant - initializer for {@link\n     * VariantLayout#variant|variant}.\n     *\n     * @param {Layout} layout - initializer for {@link\n     * VariantLayout#layout|layout}.\n     *\n     * @param {String} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {VariantLayout} */\n    addVariant(variant, layout, property) {\n        const rv = new VariantLayout(this, variant, layout, property);\n        this.registry[variant] = rv;\n        return rv;\n    }\n    /**\n     * Get the layout associated with a registered variant.\n     *\n     * If `vb` does not produce a registered variant the function returns\n     * `undefined`.\n     *\n     * @param {(Number|Uint8Array)} vb - either the variant number, or a\n     * buffer from which the discriminator is to be read.\n     *\n     * @param {Number} offset - offset into `vb` for the start of the\n     * union.  Used only when `vb` is an instance of {Uint8Array}.\n     *\n     * @return {({VariantLayout}|undefined)}\n     */\n    getVariant(vb, offset = 0) {\n        let variant;\n        if (vb instanceof Uint8Array) {\n            variant = this.discriminator.decode(vb, offset);\n        }\n        else {\n            variant = vb;\n        }\n        return this.registry[variant];\n    }\n}\nexports.Union = Union;\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nclass VariantLayout extends Layout {\n    constructor(union, variant, layout, property) {\n        if (!(union instanceof Union)) {\n            throw new TypeError('union must be a Union');\n        }\n        if ((!Number.isInteger(variant)) || (0 > variant)) {\n            throw new TypeError('variant must be a (non-negative) integer');\n        }\n        if (('string' === typeof layout)\n            && (undefined === property)) {\n            property = layout;\n            layout = null;\n        }\n        if (layout) {\n            if (!(layout instanceof Layout)) {\n                throw new TypeError('layout must be a Layout');\n            }\n            if ((null !== union.defaultLayout)\n                && (0 <= layout.span)\n                && (layout.span > union.defaultLayout.span)) {\n                throw new Error('variant span exceeds span of containing union');\n            }\n            if ('string' !== typeof property) {\n                throw new TypeError('variant must have a String property');\n            }\n        }\n        let span = union.span;\n        if (0 > union.span) {\n            span = layout ? layout.span : 0;\n            if ((0 <= span) && union.usesPrefixDiscriminator) {\n                span += union.discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The {@link Union} to which this variant belongs. */\n        this.union = union;\n        /** The unsigned integral value identifying this variant within\n         * the {@link Union#discriminator|discriminator} of the containing\n         * union. */\n        this.variant = variant;\n        /** The {@link Layout} to be used when reading/writing the\n         * non-discriminator part of the {@link\n         * VariantLayout#union|union}.  If `null` the variant carries no\n         * data. */\n        this.layout = layout || null;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            /* Will be equal to the containing union span if that is not\n             * variable. */\n            return this.span;\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        /* Span is defined solely by the variant (and prefix discriminator) */\n        let span = 0;\n        if (this.layout) {\n            span = this.layout.getSpan(b, offset + contentOffset);\n        }\n        return contentOffset + span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        if (this !== this.union.getVariant(b, offset)) {\n            throw new Error('variant mismatch');\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout) {\n            dest[this.property] = this.layout.decode(b, offset + contentOffset);\n        }\n        else if (this.property) {\n            dest[this.property] = true;\n        }\n        else if (this.union.usesPrefixDiscriminator) {\n            dest[this.union.discriminator.property] = this.variant;\n        }\n        return dest;\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout\n            && (!Object.prototype.hasOwnProperty.call(src, this.property))) {\n            throw new TypeError('variant lacks property ' + this.property);\n        }\n        this.union.discriminator.encode(this.variant, b, offset);\n        let span = contentOffset;\n        if (this.layout) {\n            this.layout.encode(src[this.property], b, offset + contentOffset);\n            span += this.layout.getSpan(b, offset + contentOffset);\n            if ((0 <= this.union.span)\n                && (span > this.union.span)) {\n                throw new Error('encoded variant overruns containing union');\n            }\n        }\n        return span;\n    }\n    /** Delegate {@link Layout#fromArray|fromArray} to {@link\n     * VariantLayout#layout|layout}. */\n    fromArray(values) {\n        if (this.layout) {\n            return this.layout.fromArray(values);\n        }\n        return undefined;\n    }\n}\nexports.VariantLayout = VariantLayout;\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\nfunction fixBitwiseResult(v) {\n    if (0 > v) {\n        v += 0x100000000;\n    }\n    return v;\n}\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass BitStructure extends Layout {\n    constructor(word, msb, property) {\n        if (!((word instanceof UInt)\n            || (word instanceof UIntBE))) {\n            throw new TypeError('word must be a UInt or UIntBE layout');\n        }\n        if (('string' === typeof msb)\n            && (undefined === property)) {\n            property = msb;\n            msb = false;\n        }\n        if (4 < word.span) {\n            throw new RangeError('word cannot exceed 32 bits');\n        }\n        super(word.span, property);\n        /** The layout used for the packed value.  {@link BitField}\n         * instances are packed sequentially depending on {@link\n         * BitStructure#msb|msb}. */\n        this.word = word;\n        /** Whether the bit sequences are packed starting at the most\n         * significant bit growing down (`true`), or the least significant\n         * bit growing up (`false`).\n         *\n         * **NOTE** Regardless of this value, the least significant bit of\n         * any {@link BitField} value is the least significant bit of the\n         * corresponding section of the packed value. */\n        this.msb = !!msb;\n        /** The sequence of {@link BitField} layouts that comprise the\n         * packed structure.\n         *\n         * **NOTE** The array remains mutable to allow fields to be {@link\n         * BitStructure#addField|added} after construction.  Users should\n         * not manipulate the content of this property.*/\n        this.fields = [];\n        /* Storage for the value.  Capture a variable instead of using an\n         * instance property because we don't want anything to change the\n         * value without going through the mutator. */\n        let value = 0;\n        this._packedSetValue = function (v) {\n            value = fixBitwiseResult(v);\n            return this;\n        };\n        this._packedGetValue = function () {\n            return value;\n        };\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b);\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the packed\n     * value is left unmodified.  Unused bits are also left unmodified. */\n    encode(src, b, offset = 0) {\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    fd.encode(fv);\n                }\n            }\n        }\n        return this.word.encode(this._packedGetValue(), b, offset);\n    }\n    /** Register a new bitfield with a containing bit structure.  The\n     * resulting bitfield is returned.\n     *\n     * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {BitField} */\n    addField(bits, property) {\n        const bf = new BitField(this, bits, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /** As with {@link BitStructure#addField|addField} for single-bit\n     * fields with `boolean` value representation.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {Boolean} */\n    // `Boolean` conflicts with the native primitive type\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    addBoolean(property) {\n        // This is my Boolean, not the Javascript one.\n        const bf = new Boolean(this, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /**\n     * Get access to the bit field for a given property.\n     *\n     * @param {String} property - the bit field of interest.\n     *\n     * @return {BitField} - the field associated with `property`, or\n     * undefined if there is no such property.\n     */\n    fieldFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n}\nexports.BitStructure = BitStructure;\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\nclass BitField {\n    constructor(container, bits, property) {\n        if (!(container instanceof BitStructure)) {\n            throw new TypeError('container must be a BitStructure');\n        }\n        if ((!Number.isInteger(bits)) || (0 >= bits)) {\n            throw new TypeError('bits must be positive integer');\n        }\n        const totalBits = 8 * container.span;\n        const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);\n        if ((bits + usedBits) > totalBits) {\n            throw new Error('bits too long for span remainder ('\n                + (totalBits - usedBits) + ' of '\n                + totalBits + ' remain)');\n        }\n        /** The {@link BitStructure} instance to which this bit field\n         * belongs. */\n        this.container = container;\n        /** The span of this value in bits. */\n        this.bits = bits;\n        /** A mask of {@link BitField#bits|bits} bits isolating value bits\n         * that fit within the field.\n         *\n         * That is, it masks a value that has not yet been shifted into\n         * position within its containing packed integer. */\n        this.valueMask = (1 << bits) - 1;\n        if (32 === bits) { // shifted value out of range\n            this.valueMask = 0xFFFFFFFF;\n        }\n        /** The offset of the value within the containing packed unsigned\n         * integer.  The least significant bit of the packed value is at\n         * offset zero, regardless of bit ordering used. */\n        this.start = usedBits;\n        if (this.container.msb) {\n            this.start = totalBits - usedBits - bits;\n        }\n        /** A mask of {@link BitField#bits|bits} isolating the field value\n         * within the containing packed unsigned integer. */\n        this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n        /** The property name used when this bitfield is represented in an\n         * Object.\n         *\n         * Intended to be functionally equivalent to {@link\n         * Layout#property}.\n         *\n         * If left undefined the corresponding span of bits will be\n         * treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field. */\n    decode(b, offset) {\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(word & this.wordMask);\n        const value = wordValue >>> this.start;\n        return value;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field.\n     *\n     * **NOTE** This is not a specialization of {@link\n     * Layout#encode|Layout.encode} and there is no return value. */\n    encode(value) {\n        if ('number' !== typeof value\n            || !Number.isInteger(value)\n            || (value !== fixBitwiseResult(value & this.valueMask))) {\n            throw new TypeError(nameWithProperty('BitField.encode', this)\n                + ' value must be integer not exceeding ' + this.valueMask);\n        }\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(value << this.start);\n        this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask)\n            | wordValue);\n    }\n}\nexports.BitField = BitField;\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n/* eslint-disable no-extend-native */\nclass Boolean extends BitField {\n    constructor(container, property) {\n        super(container, 1, property);\n    }\n    /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n     *\n     * @returns {boolean} */\n    decode(b, offset) {\n        return !!super.decode(b, offset);\n    }\n    /** @override */\n    encode(value) {\n        if ('boolean' === typeof value) {\n            // BitField requires integer values\n            value = +value;\n        }\n        super.encode(value);\n    }\n}\nexports.Boolean = Boolean;\n/* eslint-enable no-extend-native */\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Uint8Array.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Blob extends Layout {\n    constructor(length, property) {\n        if (!(((length instanceof ExternalLayout) && length.isCount())\n            || (Number.isInteger(length) && (0 <= length)))) {\n            throw new TypeError('length must be positive integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if (!(length instanceof ExternalLayout)) {\n            span = length;\n        }\n        super(span, property);\n        /** The number of bytes in the blob.\n         *\n         * This may be a non-negative integer, or an instance of {@link\n         * ExternalLayout} that satisfies {@link\n         * ExternalLayout#isCount|isCount()}. */\n        this.length = length;\n    }\n    /** @override */\n    getSpan(b, offset) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span);\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Blob}.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset) {\n        let span = this.length;\n        if (this.length instanceof ExternalLayout) {\n            span = src.length;\n        }\n        if (!(src instanceof Uint8Array && span === src.length)) {\n            throw new TypeError(nameWithProperty('Blob.encode', this)\n                + ' requires (length ' + span + ') Uint8Array as src');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Uint8Array');\n        }\n        const srcBuffer = uint8ArrayToBuffer(src);\n        uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');\n        if (this.length instanceof ExternalLayout) {\n            this.length.encode(span, b, offset);\n        }\n        return span;\n    }\n}\nexports.Blob = Blob;\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass CString extends Layout {\n    constructor(property) {\n        super(-1, property);\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        let idx = offset;\n        while ((idx < b.length) && (0 !== b[idx])) {\n            idx += 1;\n        }\n        return 1 + idx - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        const buffer = uint8ArrayToBuffer(b);\n        srcb.copy(buffer, offset);\n        buffer[offset + span] = 0;\n        return span + 1;\n    }\n}\nexports.CString = CString;\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UTF8 extends Layout {\n    constructor(maxSpan, property) {\n        if (('string' === typeof maxSpan) && (undefined === property)) {\n            property = maxSpan;\n            maxSpan = undefined;\n        }\n        if (undefined === maxSpan) {\n            maxSpan = -1;\n        }\n        else if (!Number.isInteger(maxSpan)) {\n            throw new TypeError('maxSpan must be an integer');\n        }\n        super(-1, property);\n        /** The maximum span of the layout in bytes.\n         *\n         * Positive values are generally expected.  Zero is abnormal.\n         * Attempts to encode or decode a value that exceeds this length\n         * will throw a `RangeError`.\n         *\n         * A negative value indicates that there is no bound on the length\n         * of the content. */\n        this.maxSpan = maxSpan;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        return b.length - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        srcb.copy(uint8ArrayToBuffer(b), offset);\n        return span;\n    }\n}\nexports.UTF8 = UTF8;\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Constant extends Layout {\n    constructor(value, property) {\n        super(0, property);\n        /** The value produced by this constant when the layout is {@link\n         * Constant#decode|decoded}.\n         *\n         * Any JavaScript value including `null` and `undefined` is\n         * permitted.\n         *\n         * **WARNING** If `value` passed in the constructor was not\n         * frozen, it is possible for users of decoded values to change\n         * the content of the value. */\n        this.value = value;\n    }\n    /** @override */\n    decode(b, offset) {\n        return this.value;\n    }\n    /** @override */\n    encode(src, b, offset) {\n        /* Constants take no space */\n        return 0;\n    }\n}\nexports.Constant = Constant;\n/** Factory for {@link GreedyCount}. */\nexports.greedy = ((elementSpan, property) => new GreedyCount(elementSpan, property));\n/** Factory for {@link OffsetLayout}. */\nexports.offset = ((layout, offset, property) => new OffsetLayout(layout, offset, property));\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nexports.u8 = ((property) => new UInt(1, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16 = ((property) => new UInt(2, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24 = ((property) => new UInt(3, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32 = ((property) => new UInt(4, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40 = ((property) => new UInt(5, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48 = ((property) => new UInt(6, property));\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64 = ((property) => new NearUInt64(property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16be = ((property) => new UIntBE(2, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24be = ((property) => new UIntBE(3, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32be = ((property) => new UIntBE(4, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40be = ((property) => new UIntBE(5, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48be = ((property) => new UIntBE(6, property));\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64be = ((property) => new NearUInt64BE(property));\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\nexports.s8 = ((property) => new Int(1, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\nexports.s16 = ((property) => new Int(2, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\nexports.s24 = ((property) => new Int(3, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\nexports.s32 = ((property) => new Int(4, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\nexports.s40 = ((property) => new Int(5, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\nexports.s48 = ((property) => new Int(6, property));\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64 = ((property) => new NearInt64(property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\nexports.s16be = ((property) => new IntBE(2, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\nexports.s24be = ((property) => new IntBE(3, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\nexports.s32be = ((property) => new IntBE(4, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\nexports.s40be = ((property) => new IntBE(5, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\nexports.s48be = ((property) => new IntBE(6, property));\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64be = ((property) => new NearInt64BE(property));\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\nexports.f32 = ((property) => new Float(property));\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\nexports.f32be = ((property) => new FloatBE(property));\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\nexports.f64 = ((property) => new Double(property));\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\nexports.f64be = ((property) => new DoubleBE(property));\n/** Factory for {@link Structure} values. */\nexports.struct = ((fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes));\n/** Factory for {@link BitStructure} values. */\nexports.bits = ((word, msb, property) => new BitStructure(word, msb, property));\n/** Factory for {@link Sequence} values. */\nexports.seq = ((elementLayout, count, property) => new Sequence(elementLayout, count, property));\n/** Factory for {@link Union} values. */\nexports.union = ((discr, defaultLayout, property) => new Union(discr, defaultLayout, property));\n/** Factory for {@link UnionLayoutDiscriminator} values. */\nexports.unionLayoutDiscriminator = ((layout, property) => new UnionLayoutDiscriminator(layout, property));\n/** Factory for {@link Blob} values. */\nexports.blob = ((length, property) => new Blob(length, property));\n/** Factory for {@link CString} values. */\nexports.cstr = ((property) => new CString(property));\n/** Factory for {@link UTF8} values. */\nexports.utf8 = ((maxSpan, property) => new UTF8(maxSpan, property));\n/** Factory for {@link Constant} values. */\nexports.constant = ((value, property) => new Constant(value, property));\n//# sourceMappingURL=Layout.js.map","import { PublicKey } from '@solana/web3.js';\n/** Address of the SPL Token program */\nexport const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n/** Address of the SPL Token 2022 program */\nexport const TOKEN_2022_PROGRAM_ID = new PublicKey('TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb');\n/** Address of the SPL Associated Token Account program */\nexport const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n/** Address of the special mint for wrapped native SOL in spl-token */\nexport const NATIVE_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n/** Address of the special mint for wrapped native SOL in spl-token-2022 */\nexport const NATIVE_MINT_2022 = new PublicKey('9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP');\n/** Check that the token program provided is not `Tokenkeg...`, useful when using extensions */\nexport function programSupportsExtensions(programId) {\n    if (programId === TOKEN_PROGRAM_ID) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n//# sourceMappingURL=constants.js.map","export const encodeDecode = (layout) => {\n    const decode = layout.decode.bind(layout);\n    const encode = layout.encode.bind(layout);\n    return { decode, encode };\n};\n//# sourceMappingURL=base.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","import { blob } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base.mjs';\nexport const bigInt = (length) => (property) => {\n    const layout = blob(length, property);\n    const { encode, decode } = encodeDecode(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return toBigIntLE(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = toBufferLE(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexport const bigIntBE = (length) => (property) => {\n    const layout = blob(length, property);\n    const { encode, decode } = encodeDecode(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return toBigIntBE(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = toBufferBE(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexport const u64 = bigInt(8);\nexport const u64be = bigIntBE(8);\nexport const u128 = bigInt(16);\nexport const u128be = bigIntBE(16);\nexport const u192 = bigInt(24);\nexport const u192be = bigIntBE(24);\nexport const u256 = bigInt(32);\nexport const u256be = bigIntBE(32);\n//# sourceMappingURL=bigint.js.map","import { u8 } from '@solana/buffer-layout';\nimport { encodeDecode } from './base.mjs';\nexport const bool = (property) => {\n    const layout = u8(property);\n    const { encode, decode } = encodeDecode(layout);\n    const boolLayout = layout;\n    boolLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return !!src;\n    };\n    boolLayout.encode = (bool, buffer, offset) => {\n        const src = Number(bool);\n        return encode(src, buffer, offset);\n    };\n    return boolLayout;\n};\n//# sourceMappingURL=native.js.map","import { blob } from '@solana/buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { encodeDecode } from './base.mjs';\nexport const publicKey = (property) => {\n    const layout = blob(32, property);\n    const { encode, decode } = encodeDecode(layout);\n    const publicKeyLayout = layout;\n    publicKeyLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return new PublicKey(src);\n    };\n    publicKeyLayout.encode = (publicKey, buffer, offset) => {\n        const src = publicKey.toBuffer();\n        return encode(src, buffer, offset);\n    };\n    return publicKeyLayout;\n};\n//# sourceMappingURL=web3.js.map","/** Base class for errors */\nexport class TokenError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\n/** Thrown if an account is not found at the expected address */\nexport class TokenAccountNotFoundError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenAccountNotFoundError';\n    }\n}\n/** Thrown if a program state account is not a valid Account */\nexport class TokenInvalidAccountError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountError';\n    }\n}\n/** Thrown if a program state account does not contain valid data */\nexport class TokenInvalidAccountDataError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountDataError';\n    }\n}\n/** Thrown if a program state account is not owned by the expected token program */\nexport class TokenInvalidAccountOwnerError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountOwnerError';\n    }\n}\n/** Thrown if the byte length of an program state account doesn't match the expected size */\nexport class TokenInvalidAccountSizeError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountSizeError';\n    }\n}\n/** Thrown if the mint of a token account doesn't match the expected mint */\nexport class TokenInvalidMintError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidMintError';\n    }\n}\n/** Thrown if the owner of a token account doesn't match the expected owner */\nexport class TokenInvalidOwnerError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidOwnerError';\n    }\n}\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\nexport class TokenOwnerOffCurveError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenOwnerOffCurveError';\n    }\n}\n/** Thrown if an instruction's program is invalid */\nexport class TokenInvalidInstructionProgramError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionProgramError';\n    }\n}\n/** Thrown if an instruction's keys are invalid */\nexport class TokenInvalidInstructionKeysError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionKeysError';\n    }\n}\n/** Thrown if an instruction's data is invalid */\nexport class TokenInvalidInstructionDataError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionDataError';\n    }\n}\n/** Thrown if an instruction's type is invalid */\nexport class TokenInvalidInstructionTypeError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionTypeError';\n    }\n}\n/** Thrown if the program does not support the desired instruction */\nexport class TokenUnsupportedInstructionError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenUnsupportedInstructionError';\n    }\n}\n/** Thrown if the transfer hook extra accounts contains an invalid account index */\nexport class TokenTransferHookAccountNotFound extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookAccountNotFound';\n    }\n}\n/** Thrown if the transfer hook extra accounts contains an invalid seed */\nexport class TokenTransferHookInvalidSeed extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookInvalidSeed';\n    }\n}\n/** Thrown if account data required by an extra account meta seed config could not be fetched */\nexport class TokenTransferHookAccountDataNotFound extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookAccountDataNotFound';\n    }\n}\n//# sourceMappingURL=errors.js.map","/** Instructions defined by the program */\nexport var TokenInstruction;\n(function (TokenInstruction) {\n    TokenInstruction[TokenInstruction[\"InitializeMint\"] = 0] = \"InitializeMint\";\n    TokenInstruction[TokenInstruction[\"InitializeAccount\"] = 1] = \"InitializeAccount\";\n    TokenInstruction[TokenInstruction[\"InitializeMultisig\"] = 2] = \"InitializeMultisig\";\n    TokenInstruction[TokenInstruction[\"Transfer\"] = 3] = \"Transfer\";\n    TokenInstruction[TokenInstruction[\"Approve\"] = 4] = \"Approve\";\n    TokenInstruction[TokenInstruction[\"Revoke\"] = 5] = \"Revoke\";\n    TokenInstruction[TokenInstruction[\"SetAuthority\"] = 6] = \"SetAuthority\";\n    TokenInstruction[TokenInstruction[\"MintTo\"] = 7] = \"MintTo\";\n    TokenInstruction[TokenInstruction[\"Burn\"] = 8] = \"Burn\";\n    TokenInstruction[TokenInstruction[\"CloseAccount\"] = 9] = \"CloseAccount\";\n    TokenInstruction[TokenInstruction[\"FreezeAccount\"] = 10] = \"FreezeAccount\";\n    TokenInstruction[TokenInstruction[\"ThawAccount\"] = 11] = \"ThawAccount\";\n    TokenInstruction[TokenInstruction[\"TransferChecked\"] = 12] = \"TransferChecked\";\n    TokenInstruction[TokenInstruction[\"ApproveChecked\"] = 13] = \"ApproveChecked\";\n    TokenInstruction[TokenInstruction[\"MintToChecked\"] = 14] = \"MintToChecked\";\n    TokenInstruction[TokenInstruction[\"BurnChecked\"] = 15] = \"BurnChecked\";\n    TokenInstruction[TokenInstruction[\"InitializeAccount2\"] = 16] = \"InitializeAccount2\";\n    TokenInstruction[TokenInstruction[\"SyncNative\"] = 17] = \"SyncNative\";\n    TokenInstruction[TokenInstruction[\"InitializeAccount3\"] = 18] = \"InitializeAccount3\";\n    TokenInstruction[TokenInstruction[\"InitializeMultisig2\"] = 19] = \"InitializeMultisig2\";\n    TokenInstruction[TokenInstruction[\"InitializeMint2\"] = 20] = \"InitializeMint2\";\n    TokenInstruction[TokenInstruction[\"GetAccountDataSize\"] = 21] = \"GetAccountDataSize\";\n    TokenInstruction[TokenInstruction[\"InitializeImmutableOwner\"] = 22] = \"InitializeImmutableOwner\";\n    TokenInstruction[TokenInstruction[\"AmountToUiAmount\"] = 23] = \"AmountToUiAmount\";\n    TokenInstruction[TokenInstruction[\"UiAmountToAmount\"] = 24] = \"UiAmountToAmount\";\n    TokenInstruction[TokenInstruction[\"InitializeMintCloseAuthority\"] = 25] = \"InitializeMintCloseAuthority\";\n    TokenInstruction[TokenInstruction[\"TransferFeeExtension\"] = 26] = \"TransferFeeExtension\";\n    TokenInstruction[TokenInstruction[\"ConfidentialTransferExtension\"] = 27] = \"ConfidentialTransferExtension\";\n    TokenInstruction[TokenInstruction[\"DefaultAccountStateExtension\"] = 28] = \"DefaultAccountStateExtension\";\n    TokenInstruction[TokenInstruction[\"Reallocate\"] = 29] = \"Reallocate\";\n    TokenInstruction[TokenInstruction[\"MemoTransferExtension\"] = 30] = \"MemoTransferExtension\";\n    TokenInstruction[TokenInstruction[\"CreateNativeMint\"] = 31] = \"CreateNativeMint\";\n    TokenInstruction[TokenInstruction[\"InitializeNonTransferableMint\"] = 32] = \"InitializeNonTransferableMint\";\n    TokenInstruction[TokenInstruction[\"InterestBearingMintExtension\"] = 33] = \"InterestBearingMintExtension\";\n    TokenInstruction[TokenInstruction[\"CpiGuardExtension\"] = 34] = \"CpiGuardExtension\";\n    TokenInstruction[TokenInstruction[\"InitializePermanentDelegate\"] = 35] = \"InitializePermanentDelegate\";\n    TokenInstruction[TokenInstruction[\"TransferHookExtension\"] = 36] = \"TransferHookExtension\";\n    // ConfidentialTransferFeeExtension = 37,\n    // WithdrawalExcessLamports = 38,\n    TokenInstruction[TokenInstruction[\"MetadataPointerExtension\"] = 39] = \"MetadataPointerExtension\";\n})(TokenInstruction || (TokenInstruction = {}));\n//# sourceMappingURL=types.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const amountToUiAmountInstructionData = struct([\n    u8('instruction'),\n    u64('amount'),\n]);\n/**\n * Construct a AmountToUiAmount instruction\n *\n * @param mint         Public key of the mint\n * @param amount       Amount of tokens to be converted to UiAmount\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAmountToUiAmountInstruction(mint, amount, programId = TOKEN_PROGRAM_ID) {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: false }];\n    const data = Buffer.alloc(amountToUiAmountInstructionData.span);\n    amountToUiAmountInstructionData.encode({\n        instruction: TokenInstruction.AmountToUiAmount,\n        amount: BigInt(amount),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a AmountToUiAmount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeAmountToUiAmountInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== amountToUiAmountInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint }, data, } = decodeAmountToUiAmountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.AmountToUiAmount)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n/**\n * Decode a AmountToUiAmount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeAmountToUiAmountInstructionUnchecked({ programId, keys: [mint], data, }) {\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: amountToUiAmountInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=amountToUiAmount.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const approveInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct an Approve instruction\n *\n * @param account      Account to set the delegate for\n * @param delegate     Account authorized to transfer tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createApproveInstruction(account, delegate, owner, amount, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: delegate, isSigner: false, isWritable: false },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(approveInstructionData.span);\n    approveInstructionData.encode({\n        instruction: TokenInstruction.Approve,\n        amount: BigInt(amount),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an Approve instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeApproveInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== approveInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, delegate, owner, multiSigners }, data, } = decodeApproveInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Approve)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !delegate || !owner)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode an Approve instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeApproveInstructionUnchecked({ programId, keys: [account, delegate, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data: approveInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=approve.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const approveCheckedInstructionData = struct([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n/**\n * Construct an ApproveChecked instruction\n *\n * @param account      Account to set the delegate for\n * @param mint         Mint account\n * @param delegate     Account authorized to transfer of tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param decimals     Number of decimals in approve amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createApproveCheckedInstruction(account, mint, delegate, owner, amount, decimals, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: delegate, isSigner: false, isWritable: false },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(approveCheckedInstructionData.span);\n    approveCheckedInstructionData.encode({\n        instruction: TokenInstruction.ApproveChecked,\n        amount: BigInt(amount),\n        decimals,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an ApproveChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeApproveCheckedInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== approveCheckedInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, mint, delegate, owner, multiSigners }, data, } = decodeApproveCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.ApproveChecked)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !delegate || !owner)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode an ApproveChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeApproveCheckedInstructionUnchecked({ programId, keys: [account, mint, delegate, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data: approveCheckedInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=approveChecked.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const burnInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct a Burn instruction\n *\n * @param account      Account to burn tokens from\n * @param mint         Mint for the account\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createBurnInstruction(account, mint, owner, amount, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: true },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(burnInstructionData.span);\n    burnInstructionData.encode({\n        instruction: TokenInstruction.Burn,\n        amount: BigInt(amount),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a Burn instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeBurnInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== burnInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, mint, owner, multiSigners }, data, } = decodeBurnInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Burn)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a Burn instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeBurnInstructionUnchecked({ programId, keys: [account, mint, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data: burnInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=burn.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const burnCheckedInstructionData = struct([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n/**\n * Construct a BurnChecked instruction\n *\n * @param mint         Mint for the account\n * @param account      Account to burn tokens from\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param decimals     Number of decimals in burn amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createBurnCheckedInstruction(account, mint, owner, amount, decimals, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: true },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(burnCheckedInstructionData.span);\n    burnCheckedInstructionData.encode({\n        instruction: TokenInstruction.BurnChecked,\n        amount: BigInt(amount),\n        decimals,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a BurnChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeBurnCheckedInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== burnCheckedInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, mint, owner, multiSigners }, data, } = decodeBurnCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.BurnChecked)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a BurnChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeBurnCheckedInstructionUnchecked({ programId, keys: [account, mint, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data: burnCheckedInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=burnChecked.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const closeAccountInstructionData = struct([u8('instruction')]);\n/**\n * Construct a CloseAccount instruction\n *\n * @param account      Account to close\n * @param destination  Account to receive the remaining balance of the closed account\n * @param authority    Account close authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createCloseAccountInstruction(account, destination, authority, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], authority, multiSigners);\n    const data = Buffer.alloc(closeAccountInstructionData.span);\n    closeAccountInstructionData.encode({ instruction: TokenInstruction.CloseAccount }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a CloseAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeCloseAccountInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== closeAccountInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, destination, authority, multiSigners }, data, } = decodeCloseAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.CloseAccount)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !destination || !authority)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a CloseAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeCloseAccountInstructionUnchecked({ programId, keys: [account, destination, authority, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: closeAccountInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=closeAccount.js.map","export var AccountType;\n(function (AccountType) {\n    AccountType[AccountType[\"Uninitialized\"] = 0] = \"Uninitialized\";\n    AccountType[AccountType[\"Mint\"] = 1] = \"Mint\";\n    AccountType[AccountType[\"Account\"] = 2] = \"Account\";\n})(AccountType || (AccountType = {}));\nexport const ACCOUNT_TYPE_SIZE = 1;\n//# sourceMappingURL=accountType.js.map","import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError, } from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport { getAccountLen } from '../extensions/extensionType.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n/** Token account state as stored by the program */\nexport var AccountState;\n(function (AccountState) {\n    AccountState[AccountState[\"Uninitialized\"] = 0] = \"Uninitialized\";\n    AccountState[AccountState[\"Initialized\"] = 1] = \"Initialized\";\n    AccountState[AccountState[\"Frozen\"] = 2] = \"Frozen\";\n})(AccountState || (AccountState = {}));\n/** Buffer layout for de/serializing a token account */\nexport const AccountLayout = struct([\n    publicKey('mint'),\n    publicKey('owner'),\n    u64('amount'),\n    u32('delegateOption'),\n    publicKey('delegate'),\n    u8('state'),\n    u32('isNativeOption'),\n    u64('isNative'),\n    u64('delegatedAmount'),\n    u32('closeAuthorityOption'),\n    publicKey('closeAuthority'),\n]);\n/** Byte length of a token account */\nexport const ACCOUNT_SIZE = AccountLayout.span;\n/**\n * Retrieve information about a token account\n *\n * @param connection Connection to use\n * @param address    Token account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getAccount(connection, address, commitment, programId = TOKEN_PROGRAM_ID) {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackAccount(address, info, programId);\n}\n/**\n * Retrieve information about multiple token accounts in a single RPC call\n *\n * @param connection Connection to use\n * @param addresses  Token accounts\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getMultipleAccounts(connection, addresses, commitment, programId = TOKEN_PROGRAM_ID) {\n    const infos = await connection.getMultipleAccountsInfo(addresses, commitment);\n    return addresses.map((address, i) => unpackAccount(address, infos[i], programId));\n}\n/** Get the minimum lamport balance for a base token account to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccount(connection, commitment) {\n    return await getMinimumBalanceForRentExemptAccountWithExtensions(connection, [], commitment);\n}\n/** Get the minimum lamport balance for a rent-exempt token account with extensions\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccountWithExtensions(connection, extensions, commitment) {\n    const accountLen = getAccountLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(accountLen, commitment);\n}\n/**\n * Unpack a token account\n *\n * @param address   Token account\n * @param info      Token account data\n * @param programId SPL Token program account\n *\n * @return Unpacked token account\n */\nexport function unpackAccount(address, info, programId = TOKEN_PROGRAM_ID) {\n    if (!info)\n        throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId))\n        throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < ACCOUNT_SIZE)\n        throw new TokenInvalidAccountSizeError();\n    const rawAccount = AccountLayout.decode(info.data.slice(0, ACCOUNT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > ACCOUNT_SIZE) {\n        if (info.data.length === MULTISIG_SIZE)\n            throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Account)\n            throw new TokenInvalidAccountError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n    return {\n        address,\n        mint: rawAccount.mint,\n        owner: rawAccount.owner,\n        amount: rawAccount.amount,\n        delegate: rawAccount.delegateOption ? rawAccount.delegate : null,\n        delegatedAmount: rawAccount.delegatedAmount,\n        isInitialized: rawAccount.state !== AccountState.Uninitialized,\n        isFrozen: rawAccount.state === AccountState.Frozen,\n        isNative: !!rawAccount.isNativeOption,\n        rentExemptReserve: rawAccount.isNativeOption ? rawAccount.isNative : null,\n        closeAuthority: rawAccount.closeAuthorityOption ? rawAccount.closeAuthority : null,\n        tlvData,\n    };\n}\n//# sourceMappingURL=account.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey } from '@solana/buffer-layout-utils';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError } from '../errors.js';\n/** Buffer layout for de/serializing a multisig */\nexport const MultisigLayout = struct([\n    u8('m'),\n    u8('n'),\n    bool('isInitialized'),\n    publicKey('signer1'),\n    publicKey('signer2'),\n    publicKey('signer3'),\n    publicKey('signer4'),\n    publicKey('signer5'),\n    publicKey('signer6'),\n    publicKey('signer7'),\n    publicKey('signer8'),\n    publicKey('signer9'),\n    publicKey('signer10'),\n    publicKey('signer11'),\n]);\n/** Byte length of a multisig */\nexport const MULTISIG_SIZE = MultisigLayout.span;\n/**\n * Retrieve information about a multisig\n *\n * @param connection Connection to use\n * @param address    Multisig account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Multisig information\n */\nexport async function getMultisig(connection, address, commitment, programId = TOKEN_PROGRAM_ID) {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMultisig(address, info, programId);\n}\n/**\n * Unpack a multisig\n *\n * @param address   Multisig account\n * @param info      Multisig account data\n * @param programId SPL Token program account\n *\n * @return Unpacked multisig\n */\nexport function unpackMultisig(address, info, programId = TOKEN_PROGRAM_ID) {\n    if (!info)\n        throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId))\n        throw new TokenInvalidAccountOwnerError();\n    if (info.data.length != MULTISIG_SIZE)\n        throw new TokenInvalidAccountSizeError();\n    const multisig = MultisigLayout.decode(info.data);\n    return { address, ...multisig };\n}\n/** Get the minimum lamport balance for a multisig to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMultisig(connection, commitment) {\n    return await connection.getMinimumBalanceForRentExemption(MULTISIG_SIZE, commitment);\n}\n//# sourceMappingURL=multisig.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var CpiGuardInstruction;\n(function (CpiGuardInstruction) {\n    CpiGuardInstruction[CpiGuardInstruction[\"Enable\"] = 0] = \"Enable\";\n    CpiGuardInstruction[CpiGuardInstruction[\"Disable\"] = 1] = \"Disable\";\n})(CpiGuardInstruction || (CpiGuardInstruction = {}));\n/** TODO: docs */\nexport const cpiGuardInstructionData = struct([u8('instruction'), u8('cpiGuardInstruction')]);\n/**\n * Construct an EnableCpiGuard instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createEnableCpiGuardInstruction(account, authority, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n    return createCpiGuardInstruction(CpiGuardInstruction.Enable, account, authority, multiSigners, programId);\n}\n/**\n * Construct a DisableCpiGuard instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createDisableCpiGuardInstruction(account, authority, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n    return createCpiGuardInstruction(CpiGuardInstruction.Disable, account, authority, multiSigners, programId);\n}\nfunction createCpiGuardInstruction(cpiGuardInstruction, account, authority, multiSigners, programId) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], authority, multiSigners);\n    const data = Buffer.alloc(cpiGuardInstructionData.span);\n    cpiGuardInstructionData.encode({\n        instruction: TokenInstruction.CpiGuardExtension,\n        cpiGuardInstruction,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n//# sourceMappingURL=instructions.js.map","import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError, TokenInvalidMintError, TokenOwnerOffCurveError, } from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport { getMintLen } from '../extensions/extensionType.js';\nimport { ACCOUNT_SIZE } from './account.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n/** Buffer layout for de/serializing a mint */\nexport const MintLayout = struct([\n    u32('mintAuthorityOption'),\n    publicKey('mintAuthority'),\n    u64('supply'),\n    u8('decimals'),\n    bool('isInitialized'),\n    u32('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n/** Byte length of a mint */\nexport const MINT_SIZE = MintLayout.span;\n/**\n * Retrieve information about a mint\n *\n * @param connection Connection to use\n * @param address    Mint account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Mint information\n */\nexport async function getMint(connection, address, commitment, programId = TOKEN_PROGRAM_ID) {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMint(address, info, programId);\n}\n/**\n * Unpack a mint\n *\n * @param address   Mint account\n * @param info      Mint account data\n * @param programId SPL Token program account\n *\n * @return Unpacked mint\n */\nexport function unpackMint(address, info, programId = TOKEN_PROGRAM_ID) {\n    if (!info)\n        throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId))\n        throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < MINT_SIZE)\n        throw new TokenInvalidAccountSizeError();\n    const rawMint = MintLayout.decode(info.data.slice(0, MINT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > MINT_SIZE) {\n        if (info.data.length <= ACCOUNT_SIZE)\n            throw new TokenInvalidAccountSizeError();\n        if (info.data.length === MULTISIG_SIZE)\n            throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Mint)\n            throw new TokenInvalidMintError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n    return {\n        address,\n        mintAuthority: rawMint.mintAuthorityOption ? rawMint.mintAuthority : null,\n        supply: rawMint.supply,\n        decimals: rawMint.decimals,\n        isInitialized: rawMint.isInitialized,\n        freezeAuthority: rawMint.freezeAuthorityOption ? rawMint.freezeAuthority : null,\n        tlvData,\n    };\n}\n/** Get the minimum lamport balance for a mint to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMint(connection, commitment) {\n    return await getMinimumBalanceForRentExemptMintWithExtensions(connection, [], commitment);\n}\n/** Get the minimum lamport balance for a rent-exempt mint with extensions\n *\n * @param connection Connection to use\n * @param extensions Extension types included in the mint\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMintWithExtensions(connection, extensions, commitment) {\n    const mintLen = getMintLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(mintLen, commitment);\n}\n/**\n * Async version of getAssociatedTokenAddressSync\n * For backwards compatibility\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Promise containing the address of the associated token account\n */\nexport async function getAssociatedTokenAddress(mint, owner, allowOwnerOffCurve = false, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))\n        throw new TokenOwnerOffCurveError();\n    const [address] = await PublicKey.findProgramAddress([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);\n    return address;\n}\n/**\n * Get the address of the associated token account for a given mint and owner\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the associated token account\n */\nexport function getAssociatedTokenAddressSync(mint, owner, allowOwnerOffCurve = false, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))\n        throw new TokenOwnerOffCurveError();\n    const [address] = PublicKey.findProgramAddressSync([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);\n    return address;\n}\n//# sourceMappingURL=mint.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var DefaultAccountStateInstruction;\n(function (DefaultAccountStateInstruction) {\n    DefaultAccountStateInstruction[DefaultAccountStateInstruction[\"Initialize\"] = 0] = \"Initialize\";\n    DefaultAccountStateInstruction[DefaultAccountStateInstruction[\"Update\"] = 1] = \"Update\";\n})(DefaultAccountStateInstruction || (DefaultAccountStateInstruction = {}));\n/** TODO: docs */\nexport const defaultAccountStateInstructionData = struct([\n    u8('instruction'),\n    u8('defaultAccountStateInstruction'),\n    u8('accountState'),\n]);\n/**\n * Construct an InitializeDefaultAccountState instruction\n *\n * @param mint         Mint to initialize\n * @param accountState Default account state to set on all new accounts\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeDefaultAccountStateInstruction(mint, accountState, programId = TOKEN_2022_PROGRAM_ID) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(defaultAccountStateInstructionData.span);\n    defaultAccountStateInstructionData.encode({\n        instruction: TokenInstruction.DefaultAccountStateExtension,\n        defaultAccountStateInstruction: DefaultAccountStateInstruction.Initialize,\n        accountState,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Construct an UpdateDefaultAccountState instruction\n *\n * @param mint         Mint to update\n * @param accountState    Default account state to set on all accounts\n * @param freezeAuthority       The mint's freeze authority\n * @param signers         The signer account(s) for a multisig\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUpdateDefaultAccountStateInstruction(mint, accountState, freezeAuthority, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = addSigners([{ pubkey: mint, isSigner: false, isWritable: true }], freezeAuthority, multiSigners);\n    const data = Buffer.alloc(defaultAccountStateInstructionData.span);\n    defaultAccountStateInstructionData.encode({\n        instruction: TokenInstruction.DefaultAccountStateExtension,\n        defaultAccountStateInstruction: DefaultAccountStateInstruction.Update,\n        accountState,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n//# sourceMappingURL=instructions.js.map","import { struct } from '@solana/buffer-layout';\nimport { bool } from '@solana/buffer-layout-utils';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n/** Buffer layout for de/serializing a CPI Guard extension */\nexport const CpiGuardLayout = struct([bool('lockCpi')]);\nexport const CPI_GUARD_SIZE = CpiGuardLayout.span;\nexport function getCpiGuard(account) {\n    const extensionData = getExtensionData(ExtensionType.CpiGuard, account.tlvData);\n    if (extensionData !== null) {\n        return CpiGuardLayout.decode(extensionData);\n    }\n    else {\n        return null;\n    }\n}\n//# sourceMappingURL=state.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n/** Buffer layout for de/serializing a transfer fee config extension */\nexport const DefaultAccountStateLayout = struct([u8('state')]);\nexport const DEFAULT_ACCOUNT_STATE_SIZE = DefaultAccountStateLayout.span;\nexport function getDefaultAccountState(mint) {\n    const extensionData = getExtensionData(ExtensionType.DefaultAccountState, mint.tlvData);\n    if (extensionData !== null) {\n        return DefaultAccountStateLayout.decode(extensionData);\n    }\n    else {\n        return null;\n    }\n}\n//# sourceMappingURL=state.js.map","import { struct } from '@solana/buffer-layout';\nimport { ExtensionType, getExtensionData } from './extensionType.js';\n/** Buffer layout for de/serializing an account */\nexport const ImmutableOwnerLayout = struct([]);\nexport const IMMUTABLE_OWNER_SIZE = ImmutableOwnerLayout.span;\nexport function getImmutableOwner(account) {\n    const extensionData = getExtensionData(ExtensionType.ImmutableOwner, account.tlvData);\n    if (extensionData !== null) {\n        return ImmutableOwnerLayout.decode(extensionData);\n    }\n    else {\n        return null;\n    }\n}\n//# sourceMappingURL=immutableOwner.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var MemoTransferInstruction;\n(function (MemoTransferInstruction) {\n    MemoTransferInstruction[MemoTransferInstruction[\"Enable\"] = 0] = \"Enable\";\n    MemoTransferInstruction[MemoTransferInstruction[\"Disable\"] = 1] = \"Disable\";\n})(MemoTransferInstruction || (MemoTransferInstruction = {}));\n/** TODO: docs */\nexport const memoTransferInstructionData = struct([\n    u8('instruction'),\n    u8('memoTransferInstruction'),\n]);\n/**\n * Construct an EnableRequiredMemoTransfers instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createEnableRequiredMemoTransfersInstruction(account, authority, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n    return createMemoTransferInstruction(MemoTransferInstruction.Enable, account, authority, multiSigners, programId);\n}\n/**\n * Construct a DisableMemoTransfer instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createDisableRequiredMemoTransfersInstruction(account, authority, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n    return createMemoTransferInstruction(MemoTransferInstruction.Disable, account, authority, multiSigners, programId);\n}\nfunction createMemoTransferInstruction(memoTransferInstruction, account, authority, multiSigners, programId) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], authority, multiSigners);\n    const data = Buffer.alloc(memoTransferInstructionData.span);\n    memoTransferInstructionData.encode({\n        instruction: TokenInstruction.MemoTransferExtension,\n        memoTransferInstruction,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n//# sourceMappingURL=instructions.js.map","import { ns64, s16, struct } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\nexport const InterestBearingMintConfigStateLayout = struct([\n    publicKey('rateAuthority'),\n    ns64('initializationTimestamp'),\n    s16('preUpdateAverageRate'),\n    ns64('lastUpdateTimestamp'),\n    s16('currentRate'),\n]);\nexport const INTEREST_BEARING_MINT_CONFIG_STATE_SIZE = InterestBearingMintConfigStateLayout.span;\nexport function getInterestBearingMintConfigState(mint) {\n    const extensionData = getExtensionData(ExtensionType.InterestBearingConfig, mint.tlvData);\n    if (extensionData !== null) {\n        return InterestBearingMintConfigStateLayout.decode(extensionData);\n    }\n    return null;\n}\n//# sourceMappingURL=state.js.map","import { struct } from '@solana/buffer-layout';\nimport { bool } from '@solana/buffer-layout-utils';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n/** Buffer layout for de/serializing a memo transfer extension */\nexport const MemoTransferLayout = struct([bool('requireIncomingTransferMemos')]);\nexport const MEMO_TRANSFER_SIZE = MemoTransferLayout.span;\nexport function getMemoTransfer(account) {\n    const extensionData = getExtensionData(ExtensionType.MemoTransfer, account.tlvData);\n    if (extensionData !== null) {\n        return MemoTransferLayout.decode(extensionData);\n    }\n    else {\n        return null;\n    }\n}\n//# sourceMappingURL=state.js.map","import { struct } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n/** Buffer layout for de/serializing a Metadata Pointer extension */\nexport const MetadataPointerLayout = struct([\n    publicKey('authority'),\n    publicKey('metadataAddress'),\n]);\nexport const METADATA_POINTER_SIZE = MetadataPointerLayout.span;\nexport function getMetadataPointerState(mint) {\n    const extensionData = getExtensionData(ExtensionType.MetadataPointer, mint.tlvData);\n    if (extensionData !== null) {\n        const { authority, metadataAddress } = MetadataPointerLayout.decode(extensionData);\n        // Explicity set None/Zero keys to null\n        return {\n            authority: authority.equals(PublicKey.default) ? null : authority,\n            metadataAddress: metadataAddress.equals(PublicKey.default) ? null : metadataAddress,\n        };\n    }\n    else {\n        return null;\n    }\n}\n//# sourceMappingURL=state.js.map","import { struct } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { ExtensionType, getExtensionData } from './extensionType.js';\n/** Buffer layout for de/serializing a mint */\nexport const MintCloseAuthorityLayout = struct([publicKey('closeAuthority')]);\nexport const MINT_CLOSE_AUTHORITY_SIZE = MintCloseAuthorityLayout.span;\nexport function getMintCloseAuthority(mint) {\n    const extensionData = getExtensionData(ExtensionType.MintCloseAuthority, mint.tlvData);\n    if (extensionData !== null) {\n        return MintCloseAuthorityLayout.decode(extensionData);\n    }\n    else {\n        return null;\n    }\n}\n//# sourceMappingURL=mintCloseAuthority.js.map","import { struct } from '@solana/buffer-layout';\nimport { ExtensionType, getExtensionData } from './extensionType.js';\n/** Buffer layout for de/serializing an account */\nexport const NonTransferableLayout = struct([]);\nexport const NON_TRANSFERABLE_SIZE = NonTransferableLayout.span;\nexport const NON_TRANSFERABLE_ACCOUNT_SIZE = NonTransferableLayout.span;\nexport function getNonTransferable(mint) {\n    const extensionData = getExtensionData(ExtensionType.NonTransferable, mint.tlvData);\n    if (extensionData !== null) {\n        return NonTransferableLayout.decode(extensionData);\n    }\n    else {\n        return null;\n    }\n}\nexport function getNonTransferableAccount(account) {\n    const extensionData = getExtensionData(ExtensionType.NonTransferableAccount, account.tlvData);\n    if (extensionData !== null) {\n        return NonTransferableLayout.decode(extensionData);\n    }\n    else {\n        return null;\n    }\n}\n//# sourceMappingURL=nonTransferable.js.map","import { struct, u16, u8 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, TokenUnsupportedInstructionError, } from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var TransferFeeInstruction;\n(function (TransferFeeInstruction) {\n    TransferFeeInstruction[TransferFeeInstruction[\"InitializeTransferFeeConfig\"] = 0] = \"InitializeTransferFeeConfig\";\n    TransferFeeInstruction[TransferFeeInstruction[\"TransferCheckedWithFee\"] = 1] = \"TransferCheckedWithFee\";\n    TransferFeeInstruction[TransferFeeInstruction[\"WithdrawWithheldTokensFromMint\"] = 2] = \"WithdrawWithheldTokensFromMint\";\n    TransferFeeInstruction[TransferFeeInstruction[\"WithdrawWithheldTokensFromAccounts\"] = 3] = \"WithdrawWithheldTokensFromAccounts\";\n    TransferFeeInstruction[TransferFeeInstruction[\"HarvestWithheldTokensToMint\"] = 4] = \"HarvestWithheldTokensToMint\";\n    TransferFeeInstruction[TransferFeeInstruction[\"SetTransferFee\"] = 5] = \"SetTransferFee\";\n})(TransferFeeInstruction || (TransferFeeInstruction = {}));\n/** TODO: docs */\nexport const initializeTransferFeeConfigInstructionData = struct([\n    u8('instruction'),\n    u8('transferFeeInstruction'),\n    u8('transferFeeConfigAuthorityOption'),\n    publicKey('transferFeeConfigAuthority'),\n    u8('withdrawWithheldAuthorityOption'),\n    publicKey('withdrawWithheldAuthority'),\n    u16('transferFeeBasisPoints'),\n    u64('maximumFee'),\n]);\n/**\n * Construct an InitializeTransferFeeConfig instruction\n *\n * @param mint            Token mint account\n * @param transferFeeConfigAuthority  Optional authority that can update the fees\n * @param withdrawWithheldAuthority Optional authority that can withdraw fees\n * @param transferFeeBasisPoints Amount of transfer collected as fees, expressed as basis points of the transfer amount\n * @param maximumFee        Maximum fee assessed on transfers\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeTransferFeeConfigInstruction(mint, transferFeeConfigAuthority, withdrawWithheldAuthority, transferFeeBasisPoints, maximumFee, programId = TOKEN_2022_PROGRAM_ID) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(initializeTransferFeeConfigInstructionData.span);\n    initializeTransferFeeConfigInstructionData.encode({\n        instruction: TokenInstruction.TransferFeeExtension,\n        transferFeeInstruction: TransferFeeInstruction.InitializeTransferFeeConfig,\n        transferFeeConfigAuthorityOption: transferFeeConfigAuthority ? 1 : 0,\n        transferFeeConfigAuthority: transferFeeConfigAuthority || new PublicKey(0),\n        withdrawWithheldAuthorityOption: withdrawWithheldAuthority ? 1 : 0,\n        withdrawWithheldAuthority: withdrawWithheldAuthority || new PublicKey(0),\n        transferFeeBasisPoints: transferFeeBasisPoints,\n        maximumFee: maximumFee,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeTransferFeeConfig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeTransferFeeConfigInstruction(instruction, programId) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeTransferFeeConfigInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint }, data, } = decodeInitializeTransferFeeConfigInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.InitializeTransferFeeConfig)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeTransferFeeConfig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeTransferFeeConfigInstructionUnchecked({ programId, keys: [mint], data, }) {\n    const { instruction, transferFeeInstruction, transferFeeConfigAuthorityOption, transferFeeConfigAuthority, withdrawWithheldAuthorityOption, withdrawWithheldAuthority, transferFeeBasisPoints, maximumFee, } = initializeTransferFeeConfigInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n            transferFeeConfigAuthority: transferFeeConfigAuthorityOption ? transferFeeConfigAuthority : null,\n            withdrawWithheldAuthority: withdrawWithheldAuthorityOption ? withdrawWithheldAuthority : null,\n            transferFeeBasisPoints,\n            maximumFee,\n        },\n    };\n}\nexport const transferCheckedWithFeeInstructionData = struct([\n    u8('instruction'),\n    u8('transferFeeInstruction'),\n    u64('amount'),\n    u8('decimals'),\n    u64('fee'),\n]);\n/**\n * Construct an TransferCheckedWithFee instruction\n *\n * @param source          The source account\n * @param mint            The token mint\n * @param destination     The destination account\n * @param authority       The source account's owner/delegate\n * @param signers         The signer account(s)\n * @param amount          The amount of tokens to transfer\n * @param decimals        The expected number of base 10 digits to the right of the decimal place\n * @param fee             The expected fee assesed on this transfer, calculated off-chain based on the transferFeeBasisPoints and maximumFee of the mint.\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferCheckedWithFeeInstruction(source, mint, destination, authority, amount, decimals, fee, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const data = Buffer.alloc(transferCheckedWithFeeInstructionData.span);\n    transferCheckedWithFeeInstructionData.encode({\n        instruction: TokenInstruction.TransferFeeExtension,\n        transferFeeInstruction: TransferFeeInstruction.TransferCheckedWithFee,\n        amount,\n        decimals,\n        fee,\n    }, data);\n    const keys = addSigners([\n        { pubkey: source, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], authority, multiSigners);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a TransferCheckedWithFee instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferCheckedWithFeeInstruction(instruction, programId) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== transferCheckedWithFeeInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { source, mint, destination, authority, signers }, data, } = decodeTransferCheckedWithFeeInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.TransferCheckedWithFee)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            authority,\n            signers: signers ? signers : null,\n        },\n        data,\n    };\n}\n/**\n * Decode a TransferCheckedWithFees instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferCheckedWithFeeInstructionUnchecked({ programId, keys: [source, mint, destination, authority, ...signers], data, }) {\n    const { instruction, transferFeeInstruction, amount, decimals, fee } = transferCheckedWithFeeInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            authority,\n            signers,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n            amount,\n            decimals,\n            fee,\n        },\n    };\n}\nexport const withdrawWithheldTokensFromMintInstructionData = struct([\n    u8('instruction'),\n    u8('transferFeeInstruction'),\n]);\n/**\n * Construct a WithdrawWithheldTokensFromMint instruction\n *\n * @param mint              The token mint\n * @param destination       The destination account\n * @param authority         The source account's owner/delegate\n * @param signers           The signer account(s)\n * @param programID         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createWithdrawWithheldTokensFromMintInstruction(mint, destination, authority, signers = [], programId = TOKEN_2022_PROGRAM_ID) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const data = Buffer.alloc(withdrawWithheldTokensFromMintInstructionData.span);\n    withdrawWithheldTokensFromMintInstructionData.encode({\n        instruction: TokenInstruction.TransferFeeExtension,\n        transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromMint,\n    }, data);\n    const keys = addSigners([\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], authority, signers);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a WithdrawWithheldTokensFromMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeWithdrawWithheldTokensFromMintInstruction(instruction, programId) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== withdrawWithheldTokensFromMintInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint, destination, authority, signers }, data, } = decodeWithdrawWithheldTokensFromMintInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.WithdrawWithheldTokensFromMint)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            signers: signers ? signers : null,\n        },\n        data,\n    };\n}\n/**\n * Decode a WithdrawWithheldTokensFromMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeWithdrawWithheldTokensFromMintInstructionUnchecked({ programId, keys: [mint, destination, authority, ...signers], data, }) {\n    const { instruction, transferFeeInstruction } = withdrawWithheldTokensFromMintInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            signers,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n        },\n    };\n}\nexport const withdrawWithheldTokensFromAccountsInstructionData = struct([\n    u8('instruction'),\n    u8('transferFeeInstruction'),\n    u8('numTokenAccounts'),\n]);\n/**\n * Construct a WithdrawWithheldTokensFromAccounts instruction\n *\n * @param mint              The token mint\n * @param destination       The destination account\n * @param authority         The source account's owner/delegate\n * @param signers           The signer account(s)\n * @param sources           The source accounts to withdraw from\n * @param programID         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createWithdrawWithheldTokensFromAccountsInstruction(mint, destination, authority, signers, sources, programId = TOKEN_2022_PROGRAM_ID) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const data = Buffer.alloc(withdrawWithheldTokensFromAccountsInstructionData.span);\n    withdrawWithheldTokensFromAccountsInstructionData.encode({\n        instruction: TokenInstruction.TransferFeeExtension,\n        transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromAccounts,\n        numTokenAccounts: sources.length,\n    }, data);\n    const keys = addSigners([\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], authority, signers);\n    for (const source of sources) {\n        keys.push({ pubkey: source, isSigner: false, isWritable: true });\n    }\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a WithdrawWithheldTokensFromAccounts instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeWithdrawWithheldTokensFromAccountsInstruction(instruction, programId) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== withdrawWithheldTokensFromAccountsInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint, destination, authority, signers, sources }, data, } = decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.WithdrawWithheldTokensFromAccounts)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            signers: signers ? signers : null,\n            sources: sources ? sources : null,\n        },\n        data,\n    };\n}\n/**\n * Decode a WithdrawWithheldTokensFromAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked({ programId, keys, data, }) {\n    const { instruction, transferFeeInstruction, numTokenAccounts } = withdrawWithheldTokensFromAccountsInstructionData.decode(data);\n    const [mint, destination, authority, signers, sources] = [\n        keys[0],\n        keys[1],\n        keys[2],\n        keys.slice(3, 3 + numTokenAccounts),\n        keys.slice(-1 * numTokenAccounts),\n    ];\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            signers,\n            sources,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n            numTokenAccounts,\n        },\n    };\n}\nexport const harvestWithheldTokensToMintInstructionData = struct([\n    u8('instruction'),\n    u8('transferFeeInstruction'),\n]);\n/**\n * Construct a HarvestWithheldTokensToMint instruction\n *\n * @param mint              The token mint\n * @param sources           The source accounts to withdraw from\n * @param programID         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createHarvestWithheldTokensToMintInstruction(mint, sources, programId = TOKEN_2022_PROGRAM_ID) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const data = Buffer.alloc(harvestWithheldTokensToMintInstructionData.span);\n    harvestWithheldTokensToMintInstructionData.encode({\n        instruction: TokenInstruction.TransferFeeExtension,\n        transferFeeInstruction: TransferFeeInstruction.HarvestWithheldTokensToMint,\n    }, data);\n    const keys = [];\n    keys.push({ pubkey: mint, isSigner: false, isWritable: true });\n    for (const source of sources) {\n        keys.push({ pubkey: source, isSigner: false, isWritable: true });\n    }\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a HarvestWithheldTokensToMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeHarvestWithheldTokensToMintInstruction(instruction, programId) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== harvestWithheldTokensToMintInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint, sources }, data, } = decodeHarvestWithheldTokensToMintInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.HarvestWithheldTokensToMint)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n            sources,\n        },\n        data,\n    };\n}\n/**\n * Decode a HarvestWithheldTokensToMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeHarvestWithheldTokensToMintInstructionUnchecked({ programId, keys: [mint, ...sources], data, }) {\n    const { instruction, transferFeeInstruction } = harvestWithheldTokensToMintInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n            sources,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n        },\n    };\n}\n//# sourceMappingURL=instructions.js.map","import { struct } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { ExtensionType, getExtensionData } from './extensionType.js';\n/** Buffer layout for de/serializing a mint */\nexport const PermanentDelegateLayout = struct([publicKey('delegate')]);\nexport const PERMANENT_DELEGATE_SIZE = PermanentDelegateLayout.span;\nexport function getPermanentDelegate(mint) {\n    const extensionData = getExtensionData(ExtensionType.PermanentDelegate, mint.tlvData);\n    if (extensionData !== null) {\n        return PermanentDelegateLayout.decode(extensionData);\n    }\n    else {\n        return null;\n    }\n}\n//# sourceMappingURL=permanentDelegate.js.map","import { struct, u16 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\nexport const MAX_FEE_BASIS_POINTS = 10000;\nexport const ONE_IN_BASIS_POINTS = BigInt(MAX_FEE_BASIS_POINTS);\n/** Buffer layout for de/serializing a transfer fee */\nexport function transferFeeLayout(property) {\n    return struct([u64('epoch'), u64('maximumFee'), u16('transferFeeBasisPoints')], property);\n}\n/** Calculate the transfer fee */\nexport function calculateFee(transferFee, preFeeAmount) {\n    const transferFeeBasisPoints = transferFee.transferFeeBasisPoints;\n    if (transferFeeBasisPoints === 0 || preFeeAmount === BigInt(0)) {\n        return BigInt(0);\n    }\n    else {\n        const numerator = preFeeAmount * BigInt(transferFeeBasisPoints);\n        const rawFee = (numerator + ONE_IN_BASIS_POINTS - BigInt(1)) / ONE_IN_BASIS_POINTS;\n        const fee = rawFee > transferFee.maximumFee ? transferFee.maximumFee : rawFee;\n        return BigInt(fee);\n    }\n}\n/** Buffer layout for de/serializing a transfer fee config extension */\nexport const TransferFeeConfigLayout = struct([\n    publicKey('transferFeeConfigAuthority'),\n    publicKey('withdrawWithheldAuthority'),\n    u64('withheldAmount'),\n    transferFeeLayout('olderTransferFee'),\n    transferFeeLayout('newerTransferFee'),\n]);\nexport const TRANSFER_FEE_CONFIG_SIZE = TransferFeeConfigLayout.span;\n/** Get the fee for given epoch */\nexport function getEpochFee(transferFeeConfig, epoch) {\n    if (epoch >= transferFeeConfig.newerTransferFee.epoch) {\n        return transferFeeConfig.newerTransferFee;\n    }\n    else {\n        return transferFeeConfig.olderTransferFee;\n    }\n}\n/** Calculate the fee for the given epoch and input amount */\nexport function calculateEpochFee(transferFeeConfig, epoch, preFeeAmount) {\n    const transferFee = getEpochFee(transferFeeConfig, epoch);\n    return calculateFee(transferFee, preFeeAmount);\n}\n/** Buffer layout for de/serializing */\nexport const TransferFeeAmountLayout = struct([u64('withheldAmount')]);\nexport const TRANSFER_FEE_AMOUNT_SIZE = TransferFeeAmountLayout.span;\nexport function getTransferFeeConfig(mint) {\n    const extensionData = getExtensionData(ExtensionType.TransferFeeConfig, mint.tlvData);\n    if (extensionData !== null) {\n        return TransferFeeConfigLayout.decode(extensionData);\n    }\n    else {\n        return null;\n    }\n}\nexport function getTransferFeeAmount(account) {\n    const extensionData = getExtensionData(ExtensionType.TransferFeeAmount, account.tlvData);\n    if (extensionData !== null) {\n        return TransferFeeAmountLayout.decode(extensionData);\n    }\n    else {\n        return null;\n    }\n}\n//# sourceMappingURL=state.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const transferCheckedInstructionData = struct([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n/**\n * Construct a TransferChecked instruction\n *\n * @param source       Source account\n * @param mint         Mint account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param decimals     Number of decimals in transfer amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferCheckedInstruction(source, mint, destination, owner, amount, decimals, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: source, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(transferCheckedInstructionData.span);\n    transferCheckedInstructionData.encode({\n        instruction: TokenInstruction.TransferChecked,\n        amount: BigInt(amount),\n        decimals,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a TransferChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferCheckedInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== transferCheckedInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { source, mint, destination, owner, multiSigners }, data, } = decodeTransferCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.TransferChecked)\n        throw new TokenInvalidInstructionTypeError();\n    if (!source || !mint || !destination || !owner)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a TransferChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferCheckedInstructionUnchecked({ programId, keys: [source, mint, destination, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data: transferCheckedInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=transferChecked.js.map","import { blob, greedy, seq, struct, u32, u8 } from '@solana/buffer-layout';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\nimport { PublicKey } from '@solana/web3.js';\nimport { bool, publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { TokenTransferHookAccountNotFound } from '../../errors.js';\nimport { unpackSeeds } from './seeds.js';\n/** Buffer layout for de/serializing a transfer hook extension */\nexport const TransferHookLayout = struct([publicKey('authority'), publicKey('programId')]);\nexport const TRANSFER_HOOK_SIZE = TransferHookLayout.span;\nexport function getTransferHook(mint) {\n    const extensionData = getExtensionData(ExtensionType.TransferHook, mint.tlvData);\n    if (extensionData !== null) {\n        return TransferHookLayout.decode(extensionData);\n    }\n    else {\n        return null;\n    }\n}\n/** Buffer layout for de/serializing a transfer hook account extension */\nexport const TransferHookAccountLayout = struct([bool('transferring')]);\nexport const TRANSFER_HOOK_ACCOUNT_SIZE = TransferHookAccountLayout.span;\nexport function getTransferHookAccount(account) {\n    const extensionData = getExtensionData(ExtensionType.TransferHookAccount, account.tlvData);\n    if (extensionData !== null) {\n        return TransferHookAccountLayout.decode(extensionData);\n    }\n    else {\n        return null;\n    }\n}\nexport function getExtraAccountMetaAddress(mint, programId) {\n    const seeds = [Buffer.from('extra-account-metas'), mint.toBuffer()];\n    return PublicKey.findProgramAddressSync(seeds, programId)[0];\n}\n/** Buffer layout for de/serializing an ExtraAccountMeta */\nexport const ExtraAccountMetaLayout = struct([\n    u8('discriminator'),\n    blob(32, 'addressConfig'),\n    bool('isSigner'),\n    bool('isWritable'),\n]);\n/** Buffer layout for de/serializing a list of ExtraAccountMeta prefixed by a u32 length */\nexport const ExtraAccountMetaListLayout = struct([\n    u32('count'),\n    seq(ExtraAccountMetaLayout, greedy(ExtraAccountMetaLayout.span), 'extraAccounts'),\n]);\n/** Buffer layout for de/serializing an ExtraAccountMetaAccountData */\nexport const ExtraAccountMetaAccountDataLayout = struct([\n    u64('instructionDiscriminator'),\n    u32('length'),\n    ExtraAccountMetaListLayout.replicate('extraAccountsList'),\n]);\n/** Unpack an extra account metas account and parse the data into a list of ExtraAccountMetas */\nexport function getExtraAccountMetas(account) {\n    const extraAccountsList = ExtraAccountMetaAccountDataLayout.decode(account.data).extraAccountsList;\n    return extraAccountsList.extraAccounts.slice(0, extraAccountsList.count);\n}\n/** Take an ExtraAccountMeta and construct that into an acutal AccountMeta */\nexport async function resolveExtraAccountMeta(connection, extraMeta, previousMetas, instructionData, transferHookProgramId) {\n    if (extraMeta.discriminator === 0) {\n        return {\n            pubkey: new PublicKey(extraMeta.addressConfig),\n            isSigner: extraMeta.isSigner,\n            isWritable: extraMeta.isWritable,\n        };\n    }\n    let programId = PublicKey.default;\n    if (extraMeta.discriminator === 1) {\n        programId = transferHookProgramId;\n    }\n    else {\n        const accountIndex = extraMeta.discriminator - (1 << 7);\n        if (previousMetas.length <= accountIndex) {\n            throw new TokenTransferHookAccountNotFound();\n        }\n        programId = previousMetas[accountIndex].pubkey;\n    }\n    const seeds = await unpackSeeds(extraMeta.addressConfig, previousMetas, instructionData, connection);\n    const pubkey = PublicKey.findProgramAddressSync(seeds, programId)[0];\n    return { pubkey, isSigner: extraMeta.isSigner, isWritable: extraMeta.isWritable };\n}\n//# sourceMappingURL=state.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { createTransferCheckedInstruction } from '../../instructions/transferChecked.js';\nimport { createTransferCheckedWithFeeInstruction } from '../transferFee/instructions.js';\nimport { getMint } from '../../state/mint.js';\nimport { getExtraAccountMetaAddress, getExtraAccountMetas, getTransferHook, resolveExtraAccountMeta } from './state.js';\nexport var TransferHookInstruction;\n(function (TransferHookInstruction) {\n    TransferHookInstruction[TransferHookInstruction[\"Initialize\"] = 0] = \"Initialize\";\n    TransferHookInstruction[TransferHookInstruction[\"Update\"] = 1] = \"Update\";\n})(TransferHookInstruction || (TransferHookInstruction = {}));\n/** The struct that represents the instruction data as it is read by the program */\nexport const initializeTransferHookInstructionData = struct([\n    u8('instruction'),\n    u8('transferHookInstruction'),\n    publicKey('authority'),\n    publicKey('transferHookProgramId'),\n]);\n/**\n * Construct an InitializeTransferHook instruction\n *\n * @param mint                  Token mint account\n * @param authority             Transfer hook authority account\n * @param transferHookProgramId Transfer hook program account\n * @param programId             SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeTransferHookInstruction(mint, authority, transferHookProgramId, programId) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(initializeTransferHookInstructionData.span);\n    initializeTransferHookInstructionData.encode({\n        instruction: TokenInstruction.TransferHookExtension,\n        transferHookInstruction: TransferHookInstruction.Initialize,\n        authority,\n        transferHookProgramId,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/** The struct that represents the instruction data as it is read by the program */\nexport const updateTransferHookInstructionData = struct([\n    u8('instruction'),\n    u8('transferHookInstruction'),\n    publicKey('transferHookProgramId'),\n]);\n/**\n * Construct an UpdateTransferHook instruction\n *\n * @param mint                  Mint to update\n * @param authority             The mint's transfer hook authority\n * @param transferHookProgramId The new transfer hook program account\n * @param signers               The signer account(s) for a multisig\n * @param tokenProgramId        SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUpdateTransferHookInstruction(mint, authority, transferHookProgramId, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = addSigners([{ pubkey: mint, isSigner: false, isWritable: true }], authority, multiSigners);\n    const data = Buffer.alloc(updateTransferHookInstructionData.span);\n    updateTransferHookInstructionData.encode({\n        instruction: TokenInstruction.TransferHookExtension,\n        transferHookInstruction: TransferHookInstruction.Update,\n        transferHookProgramId,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\nfunction deEscalateAccountMeta(accountMeta, accountMetas) {\n    const maybeHighestPrivileges = accountMetas\n        .filter((x) => x.pubkey === accountMeta.pubkey)\n        .reduce((acc, x) => {\n        if (!acc)\n            return { isSigner: x.isSigner, isWritable: x.isWritable };\n        return { isSigner: acc.isSigner || x.isSigner, isWritable: acc.isWritable || x.isWritable };\n    }, undefined);\n    if (maybeHighestPrivileges) {\n        const { isSigner, isWritable } = maybeHighestPrivileges;\n        if (!isSigner && isSigner !== accountMeta.isSigner) {\n            accountMeta.isSigner = false;\n        }\n        if (!isWritable && isWritable !== accountMeta.isWritable) {\n            accountMeta.isWritable = false;\n        }\n    }\n    return accountMeta;\n}\n/**\n * Add extra accounts needed for transfer hook to an instruction\n *\n * @param connection      Connection to use\n * @param instruction     The transferChecked instruction to add accounts to\n * @param commitment      Commitment to use\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport async function addExtraAccountsToInstruction(connection, instruction, mint, commitment, programId = TOKEN_PROGRAM_ID) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const mintInfo = await getMint(connection, mint, commitment, programId);\n    const transferHook = getTransferHook(mintInfo);\n    if (transferHook == null) {\n        return instruction;\n    }\n    const extraAccountsAccount = getExtraAccountMetaAddress(mint, transferHook.programId);\n    const extraAccountsInfo = await connection.getAccountInfo(extraAccountsAccount, commitment);\n    if (extraAccountsInfo == null) {\n        return instruction;\n    }\n    const extraAccountMetas = getExtraAccountMetas(extraAccountsInfo);\n    const accountMetas = instruction.keys;\n    for (const extraAccountMeta of extraAccountMetas) {\n        const accountMetaUnchecked = await resolveExtraAccountMeta(connection, extraAccountMeta, accountMetas, instruction.data, transferHook.programId);\n        const accountMeta = deEscalateAccountMeta(accountMetaUnchecked, accountMetas);\n        accountMetas.push(accountMeta);\n    }\n    accountMetas.push({ pubkey: transferHook.programId, isSigner: false, isWritable: false });\n    accountMetas.push({ pubkey: extraAccountsAccount, isSigner: false, isWritable: false });\n    return new TransactionInstruction({ keys: accountMetas, programId, data: instruction.data });\n}\n/**\n * Construct an transferChecked instruction with extra accounts for transfer hook\n *\n * @param connection            Connection to use\n * @param source                Source account\n * @param mint                  Mint to update\n * @param destination           Destination account\n * @param authority             The mint's transfer hook authority\n * @param amount                The amount of tokens to transfer\n * @param decimals              Number of decimals in transfer amount\n * @param multiSigners          The signer account(s) for a multisig\n * @param commitment            Commitment to use\n * @param programId             SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport async function createTransferCheckedWithTransferHookInstruction(connection, source, mint, destination, authority, amount, decimals, multiSigners = [], commitment, programId = TOKEN_PROGRAM_ID) {\n    const rawInstruction = createTransferCheckedInstruction(source, mint, destination, authority, amount, decimals, multiSigners, programId);\n    const hydratedInstruction = await addExtraAccountsToInstruction(connection, rawInstruction, mint, commitment, programId);\n    return hydratedInstruction;\n}\n/**\n * Construct an transferChecked instruction with extra accounts for transfer hook\n *\n * @param connection            Connection to use\n * @param source                Source account\n * @param mint                  Mint to update\n * @param destination           Destination account\n * @param authority             The mint's transfer hook authority\n * @param amount                The amount of tokens to transfer\n * @param decimals              Number of decimals in transfer amount\n * @param fee                   The calculated fee for the transfer fee extension\n * @param multiSigners          The signer account(s) for a multisig\n * @param commitment            Commitment to use\n * @param programId             SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport async function createTransferCheckedWithFeeAndTransferHookInstruction(connection, source, mint, destination, authority, amount, decimals, fee, multiSigners = [], commitment, programId = TOKEN_PROGRAM_ID) {\n    const rawInstruction = createTransferCheckedWithFeeInstruction(source, mint, destination, authority, amount, decimals, fee, multiSigners, programId);\n    const hydratedInstruction = await addExtraAccountsToInstruction(connection, rawInstruction, mint, commitment, programId);\n    return hydratedInstruction;\n}\n//# sourceMappingURL=instructions.js.map","import { ACCOUNT_SIZE } from '../state/account.js';\nimport { MINT_SIZE, unpackMint } from '../state/mint.js';\nimport { MULTISIG_SIZE } from '../state/multisig.js';\nimport { ACCOUNT_TYPE_SIZE } from './accountType.js';\nimport { CPI_GUARD_SIZE } from './cpiGuard/index.js';\nimport { DEFAULT_ACCOUNT_STATE_SIZE } from './defaultAccountState/index.js';\nimport { IMMUTABLE_OWNER_SIZE } from './immutableOwner.js';\nimport { INTEREST_BEARING_MINT_CONFIG_STATE_SIZE } from './interestBearingMint/state.js';\nimport { MEMO_TRANSFER_SIZE } from './memoTransfer/index.js';\nimport { METADATA_POINTER_SIZE } from './metadataPointer/state.js';\nimport { MINT_CLOSE_AUTHORITY_SIZE } from './mintCloseAuthority.js';\nimport { NON_TRANSFERABLE_SIZE, NON_TRANSFERABLE_ACCOUNT_SIZE } from './nonTransferable.js';\nimport { PERMANENT_DELEGATE_SIZE } from './permanentDelegate.js';\nimport { TRANSFER_FEE_AMOUNT_SIZE, TRANSFER_FEE_CONFIG_SIZE } from './transferFee/index.js';\nimport { TRANSFER_HOOK_ACCOUNT_SIZE, TRANSFER_HOOK_SIZE } from './transferHook/index.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../constants.js';\n// Sequence from https://github.com/solana-labs/solana-program-library/blob/master/token/program-2022/src/extension/mod.rs#L903\nexport var ExtensionType;\n(function (ExtensionType) {\n    ExtensionType[ExtensionType[\"Uninitialized\"] = 0] = \"Uninitialized\";\n    ExtensionType[ExtensionType[\"TransferFeeConfig\"] = 1] = \"TransferFeeConfig\";\n    ExtensionType[ExtensionType[\"TransferFeeAmount\"] = 2] = \"TransferFeeAmount\";\n    ExtensionType[ExtensionType[\"MintCloseAuthority\"] = 3] = \"MintCloseAuthority\";\n    ExtensionType[ExtensionType[\"ConfidentialTransferMint\"] = 4] = \"ConfidentialTransferMint\";\n    ExtensionType[ExtensionType[\"ConfidentialTransferAccount\"] = 5] = \"ConfidentialTransferAccount\";\n    ExtensionType[ExtensionType[\"DefaultAccountState\"] = 6] = \"DefaultAccountState\";\n    ExtensionType[ExtensionType[\"ImmutableOwner\"] = 7] = \"ImmutableOwner\";\n    ExtensionType[ExtensionType[\"MemoTransfer\"] = 8] = \"MemoTransfer\";\n    ExtensionType[ExtensionType[\"NonTransferable\"] = 9] = \"NonTransferable\";\n    ExtensionType[ExtensionType[\"InterestBearingConfig\"] = 10] = \"InterestBearingConfig\";\n    ExtensionType[ExtensionType[\"CpiGuard\"] = 11] = \"CpiGuard\";\n    ExtensionType[ExtensionType[\"PermanentDelegate\"] = 12] = \"PermanentDelegate\";\n    ExtensionType[ExtensionType[\"NonTransferableAccount\"] = 13] = \"NonTransferableAccount\";\n    ExtensionType[ExtensionType[\"TransferHook\"] = 14] = \"TransferHook\";\n    ExtensionType[ExtensionType[\"TransferHookAccount\"] = 15] = \"TransferHookAccount\";\n    // ConfidentialTransferFee, // Not implemented yet\n    // ConfidentialTransferFeeAmount, // Not implemented yet\n    ExtensionType[ExtensionType[\"MetadataPointer\"] = 18] = \"MetadataPointer\";\n    ExtensionType[ExtensionType[\"TokenMetadata\"] = 19] = \"TokenMetadata\";\n})(ExtensionType || (ExtensionType = {}));\nexport const TYPE_SIZE = 2;\nexport const LENGTH_SIZE = 2;\nfunction addTypeAndLengthToLen(len) {\n    return len + TYPE_SIZE + LENGTH_SIZE;\n}\nfunction isVariableLengthExtension(e) {\n    switch (e) {\n        case ExtensionType.TokenMetadata:\n            return true;\n        default:\n            return false;\n    }\n}\n// NOTE: All of these should eventually use their type's Span instead of these\n// constants.  This is provided for at least creation to work.\nexport function getTypeLen(e) {\n    switch (e) {\n        case ExtensionType.Uninitialized:\n            return 0;\n        case ExtensionType.TransferFeeConfig:\n            return TRANSFER_FEE_CONFIG_SIZE;\n        case ExtensionType.TransferFeeAmount:\n            return TRANSFER_FEE_AMOUNT_SIZE;\n        case ExtensionType.MintCloseAuthority:\n            return MINT_CLOSE_AUTHORITY_SIZE;\n        case ExtensionType.ConfidentialTransferMint:\n            return 97;\n        case ExtensionType.ConfidentialTransferAccount:\n            return 286;\n        case ExtensionType.CpiGuard:\n            return CPI_GUARD_SIZE;\n        case ExtensionType.DefaultAccountState:\n            return DEFAULT_ACCOUNT_STATE_SIZE;\n        case ExtensionType.ImmutableOwner:\n            return IMMUTABLE_OWNER_SIZE;\n        case ExtensionType.MemoTransfer:\n            return MEMO_TRANSFER_SIZE;\n        case ExtensionType.MetadataPointer:\n            return METADATA_POINTER_SIZE;\n        case ExtensionType.NonTransferable:\n            return NON_TRANSFERABLE_SIZE;\n        case ExtensionType.InterestBearingConfig:\n            return INTEREST_BEARING_MINT_CONFIG_STATE_SIZE;\n        case ExtensionType.PermanentDelegate:\n            return PERMANENT_DELEGATE_SIZE;\n        case ExtensionType.NonTransferableAccount:\n            return NON_TRANSFERABLE_ACCOUNT_SIZE;\n        case ExtensionType.TransferHook:\n            return TRANSFER_HOOK_SIZE;\n        case ExtensionType.TransferHookAccount:\n            return TRANSFER_HOOK_ACCOUNT_SIZE;\n        case ExtensionType.TokenMetadata:\n            throw Error(`Cannot get type length for variable extension type: ${e}`);\n        default:\n            throw Error(`Unknown extension type: ${e}`);\n    }\n}\nexport function isMintExtension(e) {\n    switch (e) {\n        case ExtensionType.TransferFeeConfig:\n        case ExtensionType.MintCloseAuthority:\n        case ExtensionType.ConfidentialTransferMint:\n        case ExtensionType.DefaultAccountState:\n        case ExtensionType.NonTransferable:\n        case ExtensionType.InterestBearingConfig:\n        case ExtensionType.PermanentDelegate:\n        case ExtensionType.TransferHook:\n        case ExtensionType.MetadataPointer:\n        case ExtensionType.TokenMetadata:\n            return true;\n        case ExtensionType.Uninitialized:\n        case ExtensionType.TransferFeeAmount:\n        case ExtensionType.ConfidentialTransferAccount:\n        case ExtensionType.ImmutableOwner:\n        case ExtensionType.MemoTransfer:\n        case ExtensionType.CpiGuard:\n        case ExtensionType.NonTransferableAccount:\n        case ExtensionType.TransferHookAccount:\n            return false;\n        default:\n            throw Error(`Unknown extension type: ${e}`);\n    }\n}\nexport function isAccountExtension(e) {\n    switch (e) {\n        case ExtensionType.TransferFeeAmount:\n        case ExtensionType.ConfidentialTransferAccount:\n        case ExtensionType.ImmutableOwner:\n        case ExtensionType.MemoTransfer:\n        case ExtensionType.CpiGuard:\n        case ExtensionType.NonTransferableAccount:\n        case ExtensionType.TransferHookAccount:\n            return true;\n        case ExtensionType.Uninitialized:\n        case ExtensionType.TransferFeeConfig:\n        case ExtensionType.MintCloseAuthority:\n        case ExtensionType.ConfidentialTransferMint:\n        case ExtensionType.DefaultAccountState:\n        case ExtensionType.NonTransferable:\n        case ExtensionType.InterestBearingConfig:\n        case ExtensionType.PermanentDelegate:\n        case ExtensionType.TransferHook:\n        case ExtensionType.MetadataPointer:\n        case ExtensionType.TokenMetadata:\n            return false;\n        default:\n            throw Error(`Unknown extension type: ${e}`);\n    }\n}\nexport function getAccountTypeOfMintType(e) {\n    switch (e) {\n        case ExtensionType.TransferFeeConfig:\n            return ExtensionType.TransferFeeAmount;\n        case ExtensionType.ConfidentialTransferMint:\n            return ExtensionType.ConfidentialTransferAccount;\n        case ExtensionType.NonTransferable:\n            return ExtensionType.NonTransferableAccount;\n        case ExtensionType.TransferHook:\n            return ExtensionType.TransferHookAccount;\n        case ExtensionType.TransferFeeAmount:\n        case ExtensionType.ConfidentialTransferAccount:\n        case ExtensionType.CpiGuard:\n        case ExtensionType.DefaultAccountState:\n        case ExtensionType.ImmutableOwner:\n        case ExtensionType.MemoTransfer:\n        case ExtensionType.MintCloseAuthority:\n        case ExtensionType.MetadataPointer:\n        case ExtensionType.TokenMetadata:\n        case ExtensionType.Uninitialized:\n        case ExtensionType.InterestBearingConfig:\n        case ExtensionType.PermanentDelegate:\n        case ExtensionType.NonTransferableAccount:\n        case ExtensionType.TransferHookAccount:\n            return ExtensionType.Uninitialized;\n    }\n}\nfunction getLen(extensionTypes, baseSize, variableLengthExtensions = {}) {\n    if (extensionTypes.length === 0 && Object.keys(variableLengthExtensions).length === 0) {\n        return baseSize;\n    }\n    else {\n        const accountLength = ACCOUNT_SIZE +\n            ACCOUNT_TYPE_SIZE +\n            extensionTypes\n                .filter((element, i) => i === extensionTypes.indexOf(element))\n                .map((element) => addTypeAndLengthToLen(getTypeLen(element)))\n                .reduce((a, b) => a + b, 0) +\n            Object.entries(variableLengthExtensions)\n                .map(([extension, len]) => {\n                if (!isVariableLengthExtension(Number(extension))) {\n                    throw Error(`Extension ${extension} is not variable length`);\n                }\n                return addTypeAndLengthToLen(len);\n            })\n                .reduce((a, b) => a + b, 0);\n        if (accountLength === MULTISIG_SIZE) {\n            return accountLength + TYPE_SIZE;\n        }\n        else {\n            return accountLength;\n        }\n    }\n}\nexport function getMintLen(extensionTypes, variableLengthExtensions = {}) {\n    return getLen(extensionTypes, MINT_SIZE, variableLengthExtensions);\n}\nexport function getAccountLen(extensionTypes) {\n    // There are currently no variable length extensions for accounts\n    return getLen(extensionTypes, ACCOUNT_SIZE);\n}\nexport function getExtensionData(extension, tlvData) {\n    let extensionTypeIndex = 0;\n    while (addTypeAndLengthToLen(extensionTypeIndex) <= tlvData.length) {\n        const entryType = tlvData.readUInt16LE(extensionTypeIndex);\n        const entryLength = tlvData.readUInt16LE(extensionTypeIndex + TYPE_SIZE);\n        const typeIndex = addTypeAndLengthToLen(extensionTypeIndex);\n        if (entryType == extension) {\n            return tlvData.slice(typeIndex, typeIndex + entryLength);\n        }\n        extensionTypeIndex = typeIndex + entryLength;\n    }\n    return null;\n}\nexport function getExtensionTypes(tlvData) {\n    const extensionTypes = [];\n    let extensionTypeIndex = 0;\n    while (extensionTypeIndex < tlvData.length) {\n        const entryType = tlvData.readUInt16LE(extensionTypeIndex);\n        extensionTypes.push(entryType);\n        const entryLength = tlvData.readUInt16LE(extensionTypeIndex + TYPE_SIZE);\n        extensionTypeIndex += addTypeAndLengthToLen(entryLength);\n    }\n    return extensionTypes;\n}\nexport function getAccountLenForMint(mint) {\n    const extensionTypes = getExtensionTypes(mint.tlvData);\n    const accountExtensions = extensionTypes.map(getAccountTypeOfMintType);\n    return getAccountLen(accountExtensions);\n}\nexport function getNewAccountLenForExtensionLen(info, address, extensionType, extensionLen, programId = TOKEN_2022_PROGRAM_ID) {\n    const mint = unpackMint(address, info, programId);\n    const extensionData = getExtensionData(extensionType, mint.tlvData);\n    const currentExtensionLen = extensionData ? addTypeAndLengthToLen(extensionData.length) : 0;\n    const newExtensionLen = addTypeAndLengthToLen(extensionLen);\n    return info.data.length + newExtensionLen - currentExtensionLen;\n}\n//# sourceMappingURL=extensionType.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const initializeAccountInstructionData = struct([u8('instruction')]);\n/**\n * Construct an InitializeAccount instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeAccountInstruction(account, mint, owner, programId = TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.alloc(initializeAccountInstructionData.span);\n    initializeAccountInstructionData.encode({ instruction: TokenInstruction.InitializeAccount }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeAccountInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeAccountInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, mint, owner, rent }, data, } = decodeInitializeAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeAccount)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner || !rent)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            rent,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeAccountInstructionUnchecked({ programId, keys: [account, mint, owner, rent], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            rent,\n        },\n        data: initializeAccountInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=initializeAccount.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const initializeMint2InstructionData = struct([\n    u8('instruction'),\n    u8('decimals'),\n    publicKey('mintAuthority'),\n    u8('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n/**\n * Construct an InitializeMint2 instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMint2Instruction(mint, decimals, mintAuthority, freezeAuthority, programId = TOKEN_PROGRAM_ID) {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(initializeMint2InstructionData.span);\n    initializeMint2InstructionData.encode({\n        instruction: TokenInstruction.InitializeMint2,\n        decimals,\n        mintAuthority,\n        freezeAuthorityOption: freezeAuthority ? 1 : 0,\n        freezeAuthority: freezeAuthority || new PublicKey(0),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeMint2 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMint2Instruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMint2InstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint }, data, } = decodeInitializeMint2InstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMint2)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeMint2 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMint2InstructionUnchecked({ programId, keys: [mint], data, }) {\n    const { instruction, decimals, mintAuthority, freezeAuthorityOption, freezeAuthority } = initializeMint2InstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: {\n            instruction,\n            decimals,\n            mintAuthority,\n            freezeAuthority: freezeAuthorityOption ? freezeAuthority : null,\n        },\n    };\n}\n//# sourceMappingURL=initializeMint2.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const initializeMultisigInstructionData = struct([\n    u8('instruction'),\n    u8('m'),\n]);\n/**\n * Construct an InitializeMultisig instruction\n *\n * @param account   Multisig account\n * @param signers   Full set of signers\n * @param m         Number of required signatures\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMultisigInstruction(account, signers, m, programId = TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    for (const signer of signers) {\n        keys.push({\n            pubkey: signer instanceof PublicKey ? signer : signer.publicKey,\n            isSigner: false,\n            isWritable: false,\n        });\n    }\n    const data = Buffer.alloc(initializeMultisigInstructionData.span);\n    initializeMultisigInstructionData.encode({\n        instruction: TokenInstruction.InitializeMultisig,\n        m,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeMultisig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMultisigInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMultisigInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, rent, signers }, data, } = decodeInitializeMultisigInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMultisig)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !rent || !signers.length)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeMultisig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMultisigInstructionUnchecked({ programId, keys: [account, rent, ...signers], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data: initializeMultisigInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=initializeMultisig.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { NATIVE_MINT_2022, programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { TokenUnsupportedInstructionError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const createNativeMintInstructionData = struct([u8('instruction')]);\n/**\n * Construct a CreateNativeMint instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createCreateNativeMintInstruction(payer, nativeMintId = NATIVE_MINT_2022, programId = TOKEN_2022_PROGRAM_ID) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: nativeMintId, isSigner: false, isWritable: true },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.alloc(createNativeMintInstructionData.span);\n    createNativeMintInstructionData.encode({ instruction: TokenInstruction.CreateNativeMint }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n//# sourceMappingURL=createNativeMint.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const syncNativeInstructionData = struct([u8('instruction')]);\n/**\n * Construct a SyncNative instruction\n *\n * @param account   Native account to sync lamports from\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createSyncNativeInstruction(account, programId = TOKEN_PROGRAM_ID) {\n    const keys = [{ pubkey: account, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(syncNativeInstructionData.span);\n    syncNativeInstructionData.encode({ instruction: TokenInstruction.SyncNative }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a SyncNative instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeSyncNativeInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== syncNativeInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account }, data, } = decodeSyncNativeInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.SyncNative)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data,\n    };\n}\n/**\n * Decode a SyncNative instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeSyncNativeInstructionUnchecked({ programId, keys: [account], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data: syncNativeInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=syncNative.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const freezeAccountInstructionData = struct([u8('instruction')]);\n/**\n * Construct a FreezeAccount instruction\n *\n * @param account      Account to freeze\n * @param mint         Mint account\n * @param authority    Mint freeze authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createFreezeAccountInstruction(account, mint, authority, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n    ], authority, multiSigners);\n    const data = Buffer.alloc(freezeAccountInstructionData.span);\n    freezeAccountInstructionData.encode({ instruction: TokenInstruction.FreezeAccount }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a FreezeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeFreezeAccountInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== freezeAccountInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, mint, authority, multiSigners }, data, } = decodeFreezeAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.FreezeAccount)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !authority)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a FreezeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeFreezeAccountInstructionUnchecked({ programId, keys: [account, mint, authority, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data: freezeAccountInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=freezeAccount.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const mintToInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct a MintTo instruction\n *\n * @param mint         Public key of the mint\n * @param destination  Address of the token account to mint to\n * @param authority    The mint authority\n * @param amount       Amount to mint\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createMintToInstruction(mint, destination, authority, amount, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], authority, multiSigners);\n    const data = Buffer.alloc(mintToInstructionData.span);\n    mintToInstructionData.encode({\n        instruction: TokenInstruction.MintTo,\n        amount: BigInt(amount),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a MintTo instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeMintToInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== mintToInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint, destination, authority, multiSigners }, data, } = decodeMintToInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.MintTo)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint || !destination || !authority)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a MintTo instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeMintToInstructionUnchecked({ programId, keys: [mint, destination, authority, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: mintToInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=mintTo.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const mintToCheckedInstructionData = struct([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n/**\n * Construct a MintToChecked instruction\n *\n * @param mint         Public key of the mint\n * @param destination  Address of the token account to mint to\n * @param authority    The mint authority\n * @param amount       Amount to mint\n * @param decimals     Number of decimals in amount to mint\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createMintToCheckedInstruction(mint, destination, authority, amount, decimals, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], authority, multiSigners);\n    const data = Buffer.alloc(mintToCheckedInstructionData.span);\n    mintToCheckedInstructionData.encode({\n        instruction: TokenInstruction.MintToChecked,\n        amount: BigInt(amount),\n        decimals,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a MintToChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeMintToCheckedInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== mintToCheckedInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint, destination, authority, multiSigners }, data, } = decodeMintToCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.MintToChecked)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint || !destination || !authority)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a MintToChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeMintToCheckedInstructionUnchecked({ programId, keys: [mint, destination, authority, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: mintToCheckedInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=mintToChecked.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const revokeInstructionData = struct([u8('instruction')]);\n/**\n * Construct a Revoke instruction\n *\n * @param account      Address of the token account\n * @param owner        Owner of the account\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createRevokeInstruction(account, owner, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], owner, multiSigners);\n    const data = Buffer.alloc(revokeInstructionData.span);\n    revokeInstructionData.encode({ instruction: TokenInstruction.Revoke }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a Revoke instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeRevokeInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== revokeInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, owner, multiSigners }, data, } = decodeRevokeInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Revoke)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !owner)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a Revoke instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeRevokeInstructionUnchecked({ programId, keys: [account, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            owner,\n            multiSigners,\n        },\n        data: revokeInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=revoke.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** Authority types defined by the program */\nexport var AuthorityType;\n(function (AuthorityType) {\n    AuthorityType[AuthorityType[\"MintTokens\"] = 0] = \"MintTokens\";\n    AuthorityType[AuthorityType[\"FreezeAccount\"] = 1] = \"FreezeAccount\";\n    AuthorityType[AuthorityType[\"AccountOwner\"] = 2] = \"AccountOwner\";\n    AuthorityType[AuthorityType[\"CloseAccount\"] = 3] = \"CloseAccount\";\n    AuthorityType[AuthorityType[\"TransferFeeConfig\"] = 4] = \"TransferFeeConfig\";\n    AuthorityType[AuthorityType[\"WithheldWithdraw\"] = 5] = \"WithheldWithdraw\";\n    AuthorityType[AuthorityType[\"CloseMint\"] = 6] = \"CloseMint\";\n    AuthorityType[AuthorityType[\"InterestRate\"] = 7] = \"InterestRate\";\n    AuthorityType[AuthorityType[\"PermanentDelegate\"] = 8] = \"PermanentDelegate\";\n    AuthorityType[AuthorityType[\"ConfidentialTransferMint\"] = 9] = \"ConfidentialTransferMint\";\n    AuthorityType[AuthorityType[\"TransferHookProgramId\"] = 10] = \"TransferHookProgramId\";\n    AuthorityType[AuthorityType[\"ConfidentialTransferFeeConfig\"] = 11] = \"ConfidentialTransferFeeConfig\";\n    AuthorityType[AuthorityType[\"MetadataPointer\"] = 12] = \"MetadataPointer\";\n})(AuthorityType || (AuthorityType = {}));\n/** TODO: docs */\nexport const setAuthorityInstructionData = struct([\n    u8('instruction'),\n    u8('authorityType'),\n    u8('newAuthorityOption'),\n    publicKey('newAuthority'),\n]);\n/**\n * Construct a SetAuthority instruction\n *\n * @param account          Address of the token account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param programId        SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createSetAuthorityInstruction(account, currentAuthority, authorityType, newAuthority, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], currentAuthority, multiSigners);\n    const data = Buffer.alloc(setAuthorityInstructionData.span);\n    setAuthorityInstructionData.encode({\n        instruction: TokenInstruction.SetAuthority,\n        authorityType,\n        newAuthorityOption: newAuthority ? 1 : 0,\n        newAuthority: newAuthority || new PublicKey(0),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a SetAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeSetAuthorityInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== setAuthorityInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, currentAuthority, multiSigners }, data, } = decodeSetAuthorityInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.SetAuthority)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !currentAuthority)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            currentAuthority,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a SetAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeSetAuthorityInstructionUnchecked({ programId, keys: [account, currentAuthority, ...multiSigners], data, }) {\n    const { instruction, authorityType, newAuthorityOption, newAuthority } = setAuthorityInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            account,\n            currentAuthority,\n            multiSigners,\n        },\n        data: {\n            instruction,\n            authorityType,\n            newAuthority: newAuthorityOption ? newAuthority : null,\n        },\n    };\n}\n//# sourceMappingURL=setAuthority.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const thawAccountInstructionData = struct([u8('instruction')]);\n/**\n * Construct a ThawAccount instruction\n *\n * @param account      Account to thaw\n * @param mint         Mint account\n * @param authority    Mint freeze authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createThawAccountInstruction(account, mint, authority, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n    ], authority, multiSigners);\n    const data = Buffer.alloc(thawAccountInstructionData.span);\n    thawAccountInstructionData.encode({ instruction: TokenInstruction.ThawAccount }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a ThawAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeThawAccountInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== thawAccountInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, mint, authority, multiSigners }, data, } = decodeThawAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.ThawAccount)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !authority)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a ThawAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeThawAccountInstructionUnchecked({ programId, keys: [account, mint, authority, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data: thawAccountInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=thawAccount.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const transferInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct a Transfer instruction\n *\n * @param source       Source account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferInstruction(source, destination, owner, amount, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: source, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(transferInstructionData.span);\n    transferInstructionData.encode({\n        instruction: TokenInstruction.Transfer,\n        amount: BigInt(amount),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a Transfer instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== transferInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { source, destination, owner, multiSigners }, data, } = decodeTransferInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Transfer)\n        throw new TokenInvalidInstructionTypeError();\n    if (!source || !destination || !owner)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            source,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a Transfer instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferInstructionUnchecked({ programId, keys: [source, destination, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            source,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data: transferInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=transfer.js.map","import { blob, struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\n/**\n * Construct a UiAmountToAmount instruction\n *\n * @param mint         Public key of the mint\n * @param amount       UiAmount of tokens to be converted to Amount\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUiAmountToAmountInstruction(mint, amount, programId = TOKEN_PROGRAM_ID) {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: false }];\n    const buf = Buffer.from(amount, 'utf8');\n    const uiAmountToAmountInstructionData = struct([\n        u8('instruction'),\n        blob(buf.length, 'amount'),\n    ]);\n    const data = Buffer.alloc(uiAmountToAmountInstructionData.span);\n    uiAmountToAmountInstructionData.encode({\n        instruction: TokenInstruction.UiAmountToAmount,\n        amount: buf,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a UiAmountToAmount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeUiAmountToAmountInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    const uiAmountToAmountInstructionData = struct([\n        u8('instruction'),\n        blob(instruction.data.length - 1, 'amount'),\n    ]);\n    if (instruction.data.length !== uiAmountToAmountInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint }, data, } = decodeUiAmountToAmountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.UiAmountToAmount)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n/**\n * Decode a UiAmountToAmount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeUiAmountToAmountInstructionUnchecked({ programId, keys: [mint], data, }) {\n    const uiAmountToAmountInstructionData = struct([\n        u8('instruction'),\n        blob(data.length - 1, 'amount'),\n    ]);\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: uiAmountToAmountInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=uiAmountToAmount.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const initializeMintInstructionData = struct([\n    u8('instruction'),\n    u8('decimals'),\n    publicKey('mintAuthority'),\n    u8('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n/**\n * Construct an InitializeMint instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMintInstruction(mint, decimals, mintAuthority, freezeAuthority, programId = TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.alloc(initializeMintInstructionData.span);\n    initializeMintInstructionData.encode({\n        instruction: TokenInstruction.InitializeMint,\n        decimals,\n        mintAuthority,\n        freezeAuthorityOption: freezeAuthority ? 1 : 0,\n        freezeAuthority: freezeAuthority || new PublicKey(0),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMintInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMintInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint, rent }, data, } = decodeInitializeMintInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMint)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint || !rent)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMintInstructionUnchecked({ programId, keys: [mint, rent], data, }) {\n    const { instruction, decimals, mintAuthority, freezeAuthorityOption, freezeAuthority } = initializeMintInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data: {\n            instruction,\n            decimals,\n            mintAuthority,\n            freezeAuthority: freezeAuthorityOption ? freezeAuthority : null,\n        },\n    };\n}\n//# sourceMappingURL=initializeMint.js.map","import { s16, struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var InterestBearingMintInstruction;\n(function (InterestBearingMintInstruction) {\n    InterestBearingMintInstruction[InterestBearingMintInstruction[\"Initialize\"] = 0] = \"Initialize\";\n    InterestBearingMintInstruction[InterestBearingMintInstruction[\"UpdateRate\"] = 1] = \"UpdateRate\";\n})(InterestBearingMintInstruction || (InterestBearingMintInstruction = {}));\nexport const interestBearingMintInitializeInstructionData = struct([\n    u8('instruction'),\n    u8('interestBearingMintInstruction'),\n    // TODO: Make this an optional public key\n    publicKey('rateAuthority'),\n    s16('rate'),\n]);\nexport const interestBearingMintUpdateRateInstructionData = struct([\n    u8('instruction'),\n    u8('interestBearingMintInstruction'),\n    s16('rate'),\n]);\n/**\n * Construct an InitializeInterestBearingMint instruction\n *\n * @param mint           Mint to initialize\n * @param rateAuthority  The public key for the account that can update the rate\n * @param rate           The initial interest rate\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeInterestBearingMintInstruction(mint, rateAuthority, rate, programId = TOKEN_2022_PROGRAM_ID) {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(interestBearingMintInitializeInstructionData.span);\n    interestBearingMintInitializeInstructionData.encode({\n        instruction: TokenInstruction.InterestBearingMintExtension,\n        interestBearingMintInstruction: InterestBearingMintInstruction.Initialize,\n        rateAuthority,\n        rate,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Construct an UpdateRateInterestBearingMint instruction\n *\n * @param mint           Mint to initialize\n * @param rateAuthority  The public key for the account that can update the rate\n * @param rate           The updated interest rate\n * @param multiSigners   Signing accounts if `rateAuthority` is a multisig\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUpdateRateInterestBearingMintInstruction(mint, rateAuthority, rate, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: rateAuthority, isSigner: !multiSigners.length, isWritable: false },\n    ], rateAuthority, multiSigners);\n    const data = Buffer.alloc(interestBearingMintUpdateRateInstructionData.span);\n    interestBearingMintUpdateRateInstructionData.encode({\n        instruction: TokenInstruction.InterestBearingMintExtension,\n        interestBearingMintInstruction: InterestBearingMintInstruction.UpdateRate,\n        rate,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n//# sourceMappingURL=instructions.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID, programSupportsExtensions } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nimport { addSigners } from '../../instructions/internal.js';\nexport var MetadataPointerInstruction;\n(function (MetadataPointerInstruction) {\n    MetadataPointerInstruction[MetadataPointerInstruction[\"Initialize\"] = 0] = \"Initialize\";\n    MetadataPointerInstruction[MetadataPointerInstruction[\"Update\"] = 1] = \"Update\";\n})(MetadataPointerInstruction || (MetadataPointerInstruction = {}));\nexport const initializeMetadataPointerData = struct([\n    // prettier-ignore\n    u8('instruction'),\n    u8('metadataPointerInstruction'),\n    publicKey('authority'),\n    publicKey('metadataAddress'),\n]);\n/**\n * Construct an Initialize MetadataPointer instruction\n *\n * @param mint            Token mint account\n * @param authority       Optional Authority that can set the metadata address\n * @param metadataAddress Optional Account address that holds the metadata\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMetadataPointerInstruction(mint, authority, metadataAddress, programId) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(initializeMetadataPointerData.span);\n    initializeMetadataPointerData.encode({\n        instruction: TokenInstruction.MetadataPointerExtension,\n        metadataPointerInstruction: MetadataPointerInstruction.Initialize,\n        authority: authority ?? PublicKey.default,\n        metadataAddress: metadataAddress ?? PublicKey.default,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data: data });\n}\nexport const updateMetadataPointerData = struct([\n    // prettier-ignore\n    u8('instruction'),\n    u8('metadataPointerInstruction'),\n    publicKey('metadataAddress'),\n]);\nexport function createUpdateMetadataPointerInstruction(mint, authority, metadataAddress, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = addSigners([{ pubkey: mint, isSigner: false, isWritable: true }], authority, multiSigners);\n    const data = Buffer.alloc(updateMetadataPointerData.span);\n    updateMetadataPointerData.encode({\n        instruction: TokenInstruction.MetadataPointerExtension,\n        metadataPointerInstruction: MetadataPointerInstruction.Update,\n        metadataAddress: metadataAddress ?? PublicKey.default,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data: data });\n}\n//# sourceMappingURL=instructions.js.map","// ../build-scripts/env-shim.ts\nvar __DEV__ = /* @__PURE__ */ (() => process[\"env\"].NODE_ENV === \"development\")();\n\n// src/codes.ts\nvar SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED = 1;\nvar SOLANA_ERROR__INVALID_NONCE = 2;\nvar SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND = 3;\nvar SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE = 4;\nvar SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH = 5;\nvar SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE = 6;\nvar SOLANA_ERROR__MALFORMED_BIGINT_STRING = 7;\nvar SOLANA_ERROR__MALFORMED_NUMBER_STRING = 8;\nvar SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE = 9;\nvar SOLANA_ERROR__JSON_RPC__PARSE_ERROR = -32700;\nvar SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR = -32603;\nvar SOLANA_ERROR__JSON_RPC__INVALID_PARAMS = -32602;\nvar SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND = -32601;\nvar SOLANA_ERROR__JSON_RPC__INVALID_REQUEST = -32600;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED = -32016;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION = -32015;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET = -32014;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH = -32013;\nvar SOLANA_ERROR__JSON_RPC__SCAN_ERROR = -32012;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE = -32011;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX = -32010;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED = -32009;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT = -32008;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED = -32007;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE = -32006;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY = -32005;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE = -32004;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE = -32003;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE = -32002;\nvar SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP = -32001;\nvar SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH = 28e5;\nvar SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE = 2800001;\nvar SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS = 2800002;\nvar SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY = 2800003;\nvar SOLANA_ERROR__ADDRESSES__MALFORMED_PDA = 2800004;\nvar SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE = 2800005;\nvar SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED = 2800006;\nvar SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED = 2800007;\nvar SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE = 2800008;\nvar SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED = 2800009;\nvar SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER = 2800010;\nvar SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND = 323e4;\nvar SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND = 32300001;\nvar SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT = 3230002;\nvar SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT = 3230003;\nvar SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED = 3230004;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT = 361e4;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED = 3610001;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED = 3610002;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED = 3610003;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED = 3610004;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED = 3610005;\nvar SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED = 3610006;\nvar SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH = 3704e3;\nvar SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH = 3704001;\nvar SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH = 3704002;\nvar SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE = 3704003;\nvar SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS = 4128e3;\nvar SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA = 4128001;\nvar SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH = 4128002;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN = 4615e3;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR = 4615001;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT = 4615002;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA = 4615003;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA = 4615004;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL = 4615005;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS = 4615006;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID = 4615007;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE = 4615008;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED = 4615009;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT = 4615010;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION = 4615011;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID = 4615012;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND = 4615013;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED = 4615014;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE = 4615015;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED = 4615016;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX = 4615017;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED = 4615018;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED = 4615019;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS = 4615020;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED = 4615021;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE = 4615022;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED = 4615023;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = 4615024;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC = 4615025;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM = 4615026;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR = 4615027;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED = 4615028;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE = 4615029;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT = 4615030;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID = 4615031;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH = 4615032;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT = 4615033;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED = 4615034;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED = 4615035;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS = 4615036;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC = 4615037;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED = 4615038;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION = 4615039;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE = 4615040;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE = 4615041;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE = 4615042;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE = 4615043;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY = 4615044;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR = 4615045;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT = 4615046;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER = 4615047;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW = 4615048;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR = 4615049;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER = 4615050;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED = 4615051;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED = 4615052;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED = 4615053;\nvar SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS = 4615054;\nvar SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS = 5508e3;\nvar SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER = 5508001;\nvar SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER = 5508002;\nvar SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER = 5508003;\nvar SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER = 5508004;\nvar SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER = 5508005;\nvar SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER = 5508006;\nvar SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER = 5508007;\nvar SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER = 5508008;\nvar SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS = 5508009;\nvar SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING = 5508010;\nvar SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES = 5663e3;\nvar SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE = 5663001;\nvar SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME = 5663002;\nvar SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME = 5663003;\nvar SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE = 5663004;\nvar SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING = 5663005;\nvar SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE = 5663006;\nvar SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND = 5663007;\nvar SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING = 5663008;\nvar SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING = 5663009;\nvar SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING = 5663010;\nvar SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING = 5663011;\nvar SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING = 5663012;\nvar SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING = 5663013;\nvar SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE = 5663014;\nvar SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN = 705e4;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE = 7050001;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE = 7050002;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND = 7050003;\nvar SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND = 7050004;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE = 7050005;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE = 7050006;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED = 7050007;\nvar SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND = 7050008;\nvar SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP = 7050009;\nvar SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE = 7050010;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX = 7050011;\nvar SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE = 7050012;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION = 7050013;\nvar SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE = 7050014;\nvar SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE = 7050015;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = 7050016;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT = 7050017;\nvar SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION = 7050018;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT = 7050019;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT = 7050020;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT = 7050021;\nvar SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS = 7050022;\nvar SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND = 7050023;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER = 7050024;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA = 7050025;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX = 7050026;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT = 7050027;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT = 7050028;\nvar SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT = 7050029;\nvar SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION = 7050030;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT = 7050031;\nvar SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED = 7050032;\nvar SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT = 7050033;\nvar SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED = 7050034;\nvar SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED = 7050035;\nvar SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION = 7050036;\nvar SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY = 8078e3;\nvar SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH = 8078001;\nvar SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH = 8078002;\nvar SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH = 8078003;\nvar SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH = 8078004;\nvar SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH = 8078005;\nvar SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH = 8078006;\nvar SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS = 8078007;\nvar SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE = 8078008;\nvar SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT = 8078009;\nvar SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT = 8078010;\nvar SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE = 8078011;\nvar SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE = 8078012;\nvar SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH = 8078013;\nvar SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE = 8078014;\nvar SOLANA_ERROR__RPC__INTEGER_OVERFLOW = 81e5;\nvar SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN = 8100001;\nvar SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR = 8100002;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST = 819e4;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID = 8190001;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED = 8190002;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED = 8190003;\nvar SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT = 8190004;\nvar SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING = 99e5;\nvar SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE = 9900001;\nvar SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING = 9900002;\nvar SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE = 9900003;\n\n// src/messages.ts\nvar SolanaErrorMessages = {\n  [SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND]: \"Account not found at address: $address\",\n  [SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED]: \"Not all accounts were decoded. Encoded accounts found at addresses: $addresses.\",\n  [SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT]: \"Expected decoded account at address: $address\",\n  [SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT]: \"Failed to decode account data at address: $address\",\n  [SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND]: \"Accounts not found at addresses: $addresses\",\n  [SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED]: \"Unable to find a viable program address bump seed.\",\n  [SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS]: \"$putativeAddress is not a base58-encoded address.\",\n  [SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH]: \"Expected base58 encoded address to decode to a byte array of length 32. Actual length: $actualLength.\",\n  [SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY]: \"The `CryptoKey` must be an `Ed25519` public key.\",\n  [SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE]: \"Invalid seeds; point must fall off the Ed25519 curve.\",\n  [SOLANA_ERROR__ADDRESSES__MALFORMED_PDA]: \"Expected given program derived address to have the following format: [Address, ProgramDerivedAddressBump].\",\n  [SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED]: \"A maximum of $maxSeeds seeds, including the bump seed, may be supplied when creating an address. Received: $actual.\",\n  [SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED]: \"The seed at index $index with length $actual exceeds the maximum length of $maxSeedLength bytes.\",\n  [SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE]: \"Expected program derived address bump to be in the range [0, 255], got: $bump.\",\n  [SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER]: \"Program address cannot end with PDA marker.\",\n  [SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE]: \"Expected base58-encoded address string of length in the range [32, 44]. Actual length: $actualLength.\",\n  [SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE]: \"Expected base58-encoded blockash string of length in the range [32, 44]. Actual length: $actualLength.\",\n  [SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED]: \"The network has progressed past the last block for which this transaction could have been committed.\",\n  [SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY]: \"Codec [$codecDescription] cannot decode empty byte arrays.\",\n  [SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH]: \"Encoder and decoder must have the same fixed size, got [$encoderFixedSize] and [$decoderFixedSize].\",\n  [SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH]: \"Encoder and decoder must have the same max size, got [$encoderMaxSize] and [$decoderMaxSize].\",\n  [SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH]: \"Encoder and decoder must either both be fixed-size or variable-size.\",\n  [SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE]: \"Enum discriminator out of range. Expected a number between $minRange and $maxRange, got $discriminator.\",\n  [SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH]: \"Expected a fixed-size codec, got a variable-size one.\",\n  [SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH]: \"Codec [$codecDescription] expected a positive byte length, got $bytesLength.\",\n  [SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH]: \"Expected a variable-size codec, got a fixed-size one.\",\n  [SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH]: \"Codec [$codecDescription] expected $expected bytes, got $bytesLength.\",\n  [SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT]: \"Invalid data enum variant. Expected one of [$variants], got $value.\",\n  [SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS]: \"Expected [$codecDescription] to have $expected items, got $actual.\",\n  [SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT]: \"Invalid scalar enum variant. Expected one of [$variants] or a number between $minRange and $maxRange, got $value.\",\n  [SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE]: \"Invalid value $value for base $base with alphabet $alphabet.\",\n  [SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE]: \"Codec [$codecDescription] expected number to be in the range [$min, $max], got $value.\",\n  [SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE]: \"Codec [$codecDescription] expected offset to be in the range [0, $bytesLength], got $offset.\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED]: \"instruction requires an uninitialized account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED]: \"instruction tries to borrow reference for an account which is already borrowed\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING]: \"instruction left account with an outstanding borrowed reference\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED]: \"program other than the account's owner changed the size of the account data\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL]: \"account data too small for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE]: \"instruction expected an executable account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT]: \"An account does not have enough lamports to be rent-exempt\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW]: \"Program arithmetic overflowed\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR]: \"Failed to serialize or deserialize account data: $encodedData\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS]: \"Builtin programs must consume compute units\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH]: \"Cross-program invocation call depth too deep\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED]: \"Computational budget exceeded\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM]: \"custom program error: #$code\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX]: \"instruction contains duplicate accounts\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC]: \"instruction modifications of multiply-passed account differ\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT]: \"executable accounts must be rent exempt\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED]: \"instruction changed executable accounts data\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE]: \"instruction changed the balance of an executable account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED]: \"instruction changed executable bit of an account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED]: \"instruction modified data of an account it does not own\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND]: \"instruction spent from the balance of an account it does not own\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR]: \"generic instruction error\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER]: \"Provided owner is not allowed\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE]: \"Account is immutable\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY]: \"Incorrect authority provided\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID]: \"incorrect program id for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS]: \"insufficient funds for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA]: \"invalid account data for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER]: \"Invalid account owner\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT]: \"invalid program argument\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR]: \"program returned invalid error code\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA]: \"invalid instruction data\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC]: \"Failed to reallocate account data\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS]: \"Provided seeds do not result in a valid address\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED]: \"Accounts data allocations exceeded the maximum allowed per transaction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED]: \"Max accounts exceeded\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED]: \"Max instruction trace length exceeded\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED]: \"Length of the seed is too long for address generation\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT]: \"An account required by the instruction is missing\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE]: \"missing required signature for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID]: \"instruction illegally modified the program id of an account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS]: \"insufficient account keys for instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION]: \"Cross-program invocation with unauthorized signer or writable account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE]: \"Failed to create program execution environment\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE]: \"Program failed to compile\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE]: \"Program failed to complete\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED]: \"instruction modified data of a read-only account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE]: \"instruction changed the balance of a read-only account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED]: \"Cross-program invocation reentrancy not allowed for this instruction\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED]: \"instruction modified rent epoch of an account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION]: \"sum of account balances before and after instruction do not match\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT]: \"instruction requires an initialized account\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN]: \"\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID]: \"Unsupported program id\",\n  [SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR]: \"Unsupported sysvar\",\n  [SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS]: \"The instruction does not have any accounts.\",\n  [SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA]: \"The instruction does not have any data.\",\n  [SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH]: \"Expected instruction to have progress address $expectedProgramAddress, got $actualProgramAddress.\",\n  [SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH]: \"Expected base58 encoded blockhash to decode to a byte array of length 32. Actual length: $actualLength.\",\n  [SOLANA_ERROR__INVALID_NONCE]: \"The nonce `$expectedNonceValue` is no longer valid. It has advanced to `$actualNonceValue`\",\n  [SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING]: \"Invariant violation: Found no abortable iterable cache entry for key `$cacheKey`. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant\",\n  [SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE]: \"Invariant violation: Switch statement non-exhaustive. Received unexpected value `$unexpectedValue`. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant\",\n  [SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE]: \"Invariant violation: WebSocket message iterator state is corrupt; iterated without first resolving existing message promise. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant\",\n  [SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING]: \"Invariant violation: WebSocket message iterator is missing state storage. It should be impossible to hit this error; please file an issue at https://sola.na/web3invariant\",\n  [SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR]: \"JSON-RPC error: Internal JSON-RPC error ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__INVALID_PARAMS]: \"JSON-RPC error: Invalid method parameter(s) ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__INVALID_REQUEST]: \"JSON-RPC error: The JSON sent is not a valid `Request` object ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND]: \"JSON-RPC error: The method does not exist / is not available ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__PARSE_ERROR]: \"JSON-RPC error: An error occurred on the server while parsing the JSON text ($__serverMessage)\",\n  [SOLANA_ERROR__JSON_RPC__SCAN_ERROR]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED]: \"Minimum context slot has not been reached\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY]: \"Node is unhealthy; behind by $numSlotsBehind slots\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT]: \"No snapshot\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE]: \"Transaction simulation failed\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE]: \"Transaction history is not available from this node\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE]: \"$__serverMessage\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH]: \"Transaction signature length mismatch\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE]: \"Transaction signature verification failure\",\n  [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION]: \"$__serverMessage\",\n  [SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH]: \"Key pair bytes must be of length 64, got $byteLength.\",\n  [SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH]: \"Expected private key bytes with length 32. Actual length: $actualLength.\",\n  [SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH]: \"Expected base58-encoded signature to decode to a byte array of length 64. Actual length: $actualLength.\",\n  [SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE]: \"Expected base58-encoded signature string of length in the range [64, 88]. Actual length: $actualLength.\",\n  [SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE]: \"Lamports value must be in the range [0, 2e64-1]\",\n  [SOLANA_ERROR__MALFORMED_BIGINT_STRING]: \"`$value` cannot be parsed as a `BigInt`\",\n  [SOLANA_ERROR__MALFORMED_NUMBER_STRING]: \"`$value` cannot be parsed as a `Number`\",\n  [SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND]: \"No nonce account could be found at address `$nonceAccountAddress`\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST]: \"Either the notification name must end in 'Notifications' or the API must supply a subscription creator function for the notification '$notificationName' to map between the notification name and the subscribe/unsubscribe method names.\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID]: \"Failed to obtain a subscription id from the server\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED]: \"WebSocket was closed before payload could be added to the send buffer\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED]: \"WebSocket connection closed\",\n  [SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT]: \"WebSocket failed to connect\",\n  [SOLANA_ERROR__RPC__INTEGER_OVERFLOW]: \"The $argumentLabel argument to the `$methodName` RPC method$optionalPathLabel was `$value`. This number is unsafe for use with the Solana JSON-RPC because it exceeds `Number.MAX_SAFE_INTEGER`.\",\n  [SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR]: \"HTTP error ($statusCode): $message\",\n  [SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN]: \"HTTP header(s) forbidden: $headers. Learn more at https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name.\",\n  [SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS]: \"Multiple distinct signers were identified for address `$address`. Please ensure that you are using the same signer instance for each address.\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER]: \"The provided value does not implement the `KeyPairSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER]: \"The provided value does not implement the `MessageModifyingSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER]: \"The provided value does not implement the `MessagePartialSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER]: \"The provided value does not implement any of the `MessageSigner` interfaces\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER]: \"The provided value does not implement the `TransactionModifyingSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER]: \"The provided value does not implement the `TransactionPartialSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER]: \"The provided value does not implement the `TransactionSendingSigner` interface\",\n  [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER]: \"The provided value does not implement any of the `TransactionSigner` interfaces\",\n  [SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS]: \"More than one `TransactionSendingSigner` was identified.\",\n  [SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING]: \"No `TransactionSendingSigner` was identified. Please provide a valid `ITransactionWithSingleSendingSigner` transaction.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED]: \"No digest implementation could be found.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT]: \"Cryptographic operations are only allowed in secure browser contexts. Read more here: https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED]: \"This runtime does not support the generation of Ed25519 key pairs.\\n\\nInstall and import `@solana/webcrypto-ed25519-polyfill` before generating keys in environments that do not support Ed25519.\\n\\nFor a list of runtimes that currently support Ed25519 operations, visit https://github.com/WICG/webcrypto-secure-curves/issues/20.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED]: \"No signature verification implementation could be found.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED]: \"No key generation implementation could be found.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED]: \"No signing implementation could be found.\",\n  [SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED]: \"No key export implementation could be found.\",\n  [SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE]: \"Timestamp value must be in the range [-8.64e15, 8.64e15]. `$value` given\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING]: \"Transaction processing left an account with an outstanding borrowed reference\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE]: \"Account in use\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE]: \"Account loaded twice\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND]: \"Attempt to debit an account but found no record of a prior credit.\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND]: \"Transaction loads an address table account that doesn't exist\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED]: \"This transaction has already been processed\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND]: \"Blockhash not found\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP]: \"Loader call chain is too deep\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE]: \"Transactions are currently disabled due to cluster maintenance\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION]: \"Transaction contains a duplicate instruction ($index) that is not allowed\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE]: \"Insufficient funds for fee\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT]: \"Transaction results in an account ($accountIndex) with insufficient funds for rent\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE]: \"This account may not be used to pay transaction fees\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX]: \"Transaction contains an invalid account reference\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA]: \"Transaction loads an address table account with invalid data\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX]: \"Transaction address table lookup uses an invalid index\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER]: \"Transaction loads an address table account with an invalid owner\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT]: \"LoadedAccountsDataSizeLimit set for transaction must be greater than 0.\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION]: \"This program may not be used for executing instructions\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT]: \"Transaction leaves an account with a lower balance than rent-exempt minimum\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT]: \"Transaction loads a writable account that cannot be written\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED]: \"Transaction exceeded max loaded accounts data size cap\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE]: \"Transaction requires a fee but has no signature present\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND]: \"Attempt to load a program that does not exist\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED]: \"Execution of the program referenced by account at index $accountIndex is temporarily restricted.\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED]: \"ResanitizationNeeded\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE]: \"Transaction failed to sanitize accounts offsets correctly\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE]: \"Transaction did not pass signature verification\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS]: \"Transaction locked too many accounts\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION]: \"Sum of account balances before and after transaction do not match\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN]: \"The transaction failed with the error `$errorName`\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION]: \"Transaction version is unsupported\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT]: \"Transaction would exceed account data limit within the block\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT]: \"Transaction would exceed total account data limit\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT]: \"Transaction would exceed max account limit within the block\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT]: \"Transaction would exceed max Block Cost Limit\",\n  [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT]: \"Transaction would exceed max Vote Cost Limit\",\n  [SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING]: \"Transaction is missing an address at index: $index.\",\n  [SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME]: \"Transaction does not have a blockhash lifetime\",\n  [SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME]: \"Transaction is not a durable nonce transaction\",\n  [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING]: \"Contents of these address lookup tables unknown: $lookupTableAddresses\",\n  [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE]: \"Lookup of address at index $highestRequestedIndex failed for lookup table `$lookupTableAddress`. Highest known index is $highestKnownIndex. The lookup table may have been extended since its contents were retrieved\",\n  [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING]: \"No fee payer set in CompiledTransaction\",\n  [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND]: \"Could not find program address at index $index\",\n  [SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING]: \"Transaction is missing a fee payer.\",\n  [SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING]: \"Could not determine this transaction's signature. Make sure that the transaction has been signed by its fee payer.\",\n  [SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE]: \"Transaction first instruction is not advance nonce account instruction.\",\n  [SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING]: \"Transaction with no instructions cannot be durable nonce transaction.\",\n  [SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES]: \"This transaction includes an address (`$programAddress`) which is both invoked and set as the fee payer. Program addresses may not pay fees\",\n  [SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE]: \"This transaction includes an address (`$programAddress`) which is both invoked and marked writable. Program addresses may not be writable\",\n  [SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING]: \"Transaction is missing signatures for addresses: $addresses.\",\n  [SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE]: \"Transaction version must be in the range [0, 127]. `$actualVersion` given\"\n};\n\n// src/message-formatter.ts\nfunction encodeValue(value) {\n  if (Array.isArray(value)) {\n    return (\n      /* \"[\" */\n      \"%5B\" + value.map(\n        (element) => typeof element === \"string\" ? encodeURIComponent(`\"${element.replace(/\"/g, '\\\\\"')}\"`) : encodeValue(element)\n      ).join(\n        /* \", \" */\n        \"%2C%20\"\n      ) + /* \"]\" */\n      \"%5D\"\n    );\n  } else if (typeof value === \"bigint\") {\n    return `${value}n`;\n  } else {\n    return encodeURIComponent(\n      String(\n        value != null && Object.getPrototypeOf(value) === null ? (\n          // Plain objects with no protoype don't have a `toString` method.\n          // Convert them before stringifying them.\n          { ...value }\n        ) : value\n      )\n    );\n  }\n}\nfunction encodeObjectContextEntry([key, value]) {\n  return `${key}=${encodeValue(value)}`;\n}\nfunction encodeContextObject(context) {\n  return Object.entries(context).map(encodeObjectContextEntry).join(\"&\");\n}\nfunction getHumanReadableErrorMessage(code, context = {}) {\n  const messageFormatString = SolanaErrorMessages[code];\n  const message = messageFormatString.replace(\n    /(?<!\\\\)\\$(\\w+)/g,\n    (substring, variableName) => variableName in context ? `${context[variableName]}` : substring\n  );\n  return message;\n}\nfunction getErrorMessage(code, context = {}) {\n  if (__DEV__) {\n    return getHumanReadableErrorMessage(code, context);\n  } else {\n    let decodingAdviceMessage = `Solana error #${code}; Decode this error by running \\`npx @solana/errors decode ${code}`;\n    if (Object.keys(context).length) {\n      decodingAdviceMessage += ` $\"${encodeContextObject(context)}\"`;\n    }\n    return `${decodingAdviceMessage}\\``;\n  }\n}\n\n// src/error.ts\nfunction isSolanaError(e, code) {\n  const isSolanaError2 = e instanceof Error && e.name === \"SolanaError\";\n  if (isSolanaError2) {\n    if (code !== void 0) {\n      return e.context.__code === code;\n    }\n    return true;\n  }\n  return false;\n}\nvar SolanaError = class extends Error {\n  context;\n  constructor(...[code, contextAndErrorOptions]) {\n    let context;\n    let errorOptions;\n    if (contextAndErrorOptions) {\n      const { cause, ...contextRest } = contextAndErrorOptions;\n      if (cause) {\n        errorOptions = { cause };\n      }\n      if (Object.keys(contextRest).length > 0) {\n        context = contextRest;\n      }\n    }\n    const message = getErrorMessage(code, context);\n    super(message, errorOptions);\n    this.context = {\n      __code: code,\n      ...context\n    };\n    this.name = \"SolanaError\";\n  }\n};\n\n// src/stack-trace.ts\nfunction safeCaptureStackTrace(...args) {\n  if (\"captureStackTrace\" in Error && typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(...args);\n  }\n}\n\n// src/rpc-enum-errors.ts\nfunction getSolanaErrorFromRpcError({ errorCodeBaseOffset, getErrorContext, orderedErrorNames, rpcEnumError }, constructorOpt) {\n  let rpcErrorName;\n  let rpcErrorContext;\n  if (typeof rpcEnumError === \"string\") {\n    rpcErrorName = rpcEnumError;\n  } else {\n    rpcErrorName = Object.keys(rpcEnumError)[0];\n    rpcErrorContext = rpcEnumError[rpcErrorName];\n  }\n  const codeOffset = orderedErrorNames.indexOf(rpcErrorName);\n  const errorCode = errorCodeBaseOffset + codeOffset;\n  const errorContext = getErrorContext(errorCode, rpcErrorName, rpcErrorContext);\n  const err = new SolanaError(errorCode, errorContext);\n  safeCaptureStackTrace(err, constructorOpt);\n  return err;\n}\n\n// src/instruction-error.ts\nvar ORDERED_ERROR_NAMES = [\n  // Keep synced with RPC source: https://github.com/anza-xyz/agave/blob/master/sdk/program/src/instruction.rs\n  // If this list ever gets too large, consider implementing a compression strategy like this:\n  // https://gist.github.com/steveluscher/aaa7cbbb5433b1197983908a40860c47\n  \"GenericError\",\n  \"InvalidArgument\",\n  \"InvalidInstructionData\",\n  \"InvalidAccountData\",\n  \"AccountDataTooSmall\",\n  \"InsufficientFunds\",\n  \"IncorrectProgramId\",\n  \"MissingRequiredSignature\",\n  \"AccountAlreadyInitialized\",\n  \"UninitializedAccount\",\n  \"UnbalancedInstruction\",\n  \"ModifiedProgramId\",\n  \"ExternalAccountLamportSpend\",\n  \"ExternalAccountDataModified\",\n  \"ReadonlyLamportChange\",\n  \"ReadonlyDataModified\",\n  \"DuplicateAccountIndex\",\n  \"ExecutableModified\",\n  \"RentEpochModified\",\n  \"NotEnoughAccountKeys\",\n  \"AccountDataSizeChanged\",\n  \"AccountNotExecutable\",\n  \"AccountBorrowFailed\",\n  \"AccountBorrowOutstanding\",\n  \"DuplicateAccountOutOfSync\",\n  \"Custom\",\n  \"InvalidError\",\n  \"ExecutableDataModified\",\n  \"ExecutableLamportChange\",\n  \"ExecutableAccountNotRentExempt\",\n  \"UnsupportedProgramId\",\n  \"CallDepth\",\n  \"MissingAccount\",\n  \"ReentrancyNotAllowed\",\n  \"MaxSeedLengthExceeded\",\n  \"InvalidSeeds\",\n  \"InvalidRealloc\",\n  \"ComputationalBudgetExceeded\",\n  \"PrivilegeEscalation\",\n  \"ProgramEnvironmentSetupFailure\",\n  \"ProgramFailedToComplete\",\n  \"ProgramFailedToCompile\",\n  \"Immutable\",\n  \"IncorrectAuthority\",\n  \"BorshIoError\",\n  \"AccountNotRentExempt\",\n  \"InvalidAccountOwner\",\n  \"ArithmeticOverflow\",\n  \"UnsupportedSysvar\",\n  \"IllegalOwner\",\n  \"MaxAccountsDataAllocationsExceeded\",\n  \"MaxAccountsExceeded\",\n  \"MaxInstructionTraceLengthExceeded\",\n  \"BuiltinProgramsMustConsumeComputeUnits\"\n];\nfunction getSolanaErrorFromInstructionError(index, instructionError) {\n  return getSolanaErrorFromRpcError(\n    {\n      errorCodeBaseOffset: 4615001,\n      getErrorContext(errorCode, rpcErrorName, rpcErrorContext) {\n        if (errorCode === SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN) {\n          return {\n            errorName: rpcErrorName,\n            index,\n            ...rpcErrorContext !== void 0 ? { instructionErrorContext: rpcErrorContext } : null\n          };\n        } else if (errorCode === SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM) {\n          return {\n            code: rpcErrorContext,\n            index\n          };\n        } else if (errorCode === SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR) {\n          return {\n            encodedData: rpcErrorContext,\n            index\n          };\n        }\n        return { index };\n      },\n      orderedErrorNames: ORDERED_ERROR_NAMES,\n      rpcEnumError: instructionError\n    },\n    getSolanaErrorFromInstructionError\n  );\n}\n\n// src/transaction-error.ts\nvar ORDERED_ERROR_NAMES2 = [\n  // Keep synced with RPC source: https://github.com/anza-xyz/agave/blob/master/sdk/src/transaction/error.rs\n  // If this list ever gets too large, consider implementing a compression strategy like this:\n  // https://gist.github.com/steveluscher/aaa7cbbb5433b1197983908a40860c47\n  \"AccountInUse\",\n  \"AccountLoadedTwice\",\n  \"AccountNotFound\",\n  \"ProgramAccountNotFound\",\n  \"InsufficientFundsForFee\",\n  \"InvalidAccountForFee\",\n  \"AlreadyProcessed\",\n  \"BlockhashNotFound\",\n  // `InstructionError` intentionally omitted; delegated to `getSolanaErrorFromInstructionError`\n  \"CallChainTooDeep\",\n  \"MissingSignatureForFee\",\n  \"InvalidAccountIndex\",\n  \"SignatureFailure\",\n  \"InvalidProgramForExecution\",\n  \"SanitizeFailure\",\n  \"ClusterMaintenance\",\n  \"AccountBorrowOutstanding\",\n  \"WouldExceedMaxBlockCostLimit\",\n  \"UnsupportedVersion\",\n  \"InvalidWritableAccount\",\n  \"WouldExceedMaxAccountCostLimit\",\n  \"WouldExceedAccountDataBlockLimit\",\n  \"TooManyAccountLocks\",\n  \"AddressLookupTableNotFound\",\n  \"InvalidAddressLookupTableOwner\",\n  \"InvalidAddressLookupTableData\",\n  \"InvalidAddressLookupTableIndex\",\n  \"InvalidRentPayingAccount\",\n  \"WouldExceedMaxVoteCostLimit\",\n  \"WouldExceedAccountDataTotalLimit\",\n  \"DuplicateInstruction\",\n  \"InsufficientFundsForRent\",\n  \"MaxLoadedAccountsDataSizeExceeded\",\n  \"InvalidLoadedAccountsDataSizeLimit\",\n  \"ResanitizationNeeded\",\n  \"ProgramExecutionTemporarilyRestricted\",\n  \"UnbalancedTransaction\"\n];\nfunction getSolanaErrorFromTransactionError(transactionError) {\n  if (typeof transactionError === \"object\" && \"InstructionError\" in transactionError) {\n    return getSolanaErrorFromInstructionError(\n      ...transactionError.InstructionError\n    );\n  }\n  return getSolanaErrorFromRpcError(\n    {\n      errorCodeBaseOffset: 7050001,\n      getErrorContext(errorCode, rpcErrorName, rpcErrorContext) {\n        if (errorCode === SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN) {\n          return {\n            errorName: rpcErrorName,\n            ...rpcErrorContext !== void 0 ? { transactionErrorContext: rpcErrorContext } : null\n          };\n        } else if (errorCode === SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION) {\n          return {\n            index: rpcErrorContext\n          };\n        } else if (errorCode === SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT || errorCode === SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED) {\n          return {\n            accountIndex: rpcErrorContext.account_index\n          };\n        }\n      },\n      orderedErrorNames: ORDERED_ERROR_NAMES2,\n      rpcEnumError: transactionError\n    },\n    getSolanaErrorFromTransactionError\n  );\n}\n\n// src/json-rpc-error.ts\nfunction getSolanaErrorFromJsonRpcError({ code, data, message }) {\n  let out;\n  if (code === SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE) {\n    const { err, ...preflightErrorContext } = data;\n    const causeObject = err ? { cause: getSolanaErrorFromTransactionError(err) } : null;\n    out = new SolanaError(SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE, {\n      ...preflightErrorContext,\n      ...causeObject\n    });\n  } else {\n    let errorContext;\n    switch (code) {\n      case SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR:\n      case SOLANA_ERROR__JSON_RPC__INVALID_PARAMS:\n      case SOLANA_ERROR__JSON_RPC__INVALID_REQUEST:\n      case SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND:\n      case SOLANA_ERROR__JSON_RPC__PARSE_ERROR:\n      case SOLANA_ERROR__JSON_RPC__SCAN_ERROR:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE:\n      case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION:\n        errorContext = { __serverMessage: message };\n        break;\n      default:\n        if (typeof data === \"object\" && !Array.isArray(data)) {\n          errorContext = data;\n        }\n    }\n    out = new SolanaError(code, errorContext);\n  }\n  safeCaptureStackTrace(out, getSolanaErrorFromJsonRpcError);\n  return out;\n}\n\nexport { SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND, SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED, SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT, SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT, SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND, SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED, SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS, SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH, SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY, SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE, SOLANA_ERROR__ADDRESSES__MALFORMED_PDA, SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED, SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED, SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE, SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER, SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE, SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE, SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED, SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY, SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH, SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH, SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH, SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE, SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH, SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH, SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH, SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH, SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT, SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS, SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT, SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE, SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE, SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED, SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED, SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING, SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED, SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL, SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE, SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT, SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW, SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR, SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS, SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH, SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED, SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM, SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX, SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC, SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT, SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED, SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE, SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED, SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED, SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND, SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR, SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER, SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE, SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY, SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID, SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS, SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA, SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER, SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT, SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR, SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA, SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC, SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS, SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED, SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED, SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED, SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED, SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT, SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE, SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID, SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS, SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION, SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE, SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE, SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE, SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED, SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE, SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED, SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED, SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION, SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT, SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN, SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID, SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR, SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS, SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA, SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH, SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH, SOLANA_ERROR__INVALID_NONCE, SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING, SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE, SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE, SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING, SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR, SOLANA_ERROR__JSON_RPC__INVALID_PARAMS, SOLANA_ERROR__JSON_RPC__INVALID_REQUEST, SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND, SOLANA_ERROR__JSON_RPC__PARSE_ERROR, SOLANA_ERROR__JSON_RPC__SCAN_ERROR, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE, SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION, SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH, SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH, SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH, SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE, SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE, SOLANA_ERROR__MALFORMED_BIGINT_STRING, SOLANA_ERROR__MALFORMED_NUMBER_STRING, SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND, SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST, SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID, SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED, SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED, SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT, SOLANA_ERROR__RPC__INTEGER_OVERFLOW, SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR, SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN, SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS, SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER, SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER, SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER, SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER, SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER, SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER, SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER, SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER, SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS, SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING, SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED, SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT, SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED, SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED, SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED, SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED, SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED, SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE, SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING, SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE, SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE, SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND, SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND, SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED, SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND, SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP, SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE, SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION, SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE, SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT, SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE, SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX, SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA, SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX, SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER, SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT, SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION, SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT, SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT, SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED, SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE, SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND, SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED, SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED, SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE, SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE, SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS, SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION, SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN, SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION, SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT, SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT, SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT, SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT, SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT, SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING, SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME, SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME, SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING, SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE, SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING, SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND, SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING, SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING, SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE, SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING, SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES, SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE, SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING, SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE, SolanaError, getSolanaErrorFromInstructionError, getSolanaErrorFromJsonRpcError, getSolanaErrorFromTransactionError, isSolanaError, safeCaptureStackTrace };\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.browser.js.map","import { SolanaError, SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY, SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH, SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE, SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH, SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH, SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH, SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH, SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH, SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH } from '@solana/errors';\n\n// src/assertions.ts\nfunction assertByteArrayIsNotEmptyForCodec(codecDescription, bytes, offset = 0) {\n  if (bytes.length - offset <= 0) {\n    throw new SolanaError(SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY, {\n      codecDescription\n    });\n  }\n}\nfunction assertByteArrayHasEnoughBytesForCodec(codecDescription, expected, bytes, offset = 0) {\n  const bytesLength = bytes.length - offset;\n  if (bytesLength < expected) {\n    throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH, {\n      bytesLength,\n      codecDescription,\n      expected\n    });\n  }\n}\nfunction assertByteArrayOffsetIsNotOutOfRange(codecDescription, offset, bytesLength) {\n  if (offset < 0 || offset > bytesLength) {\n    throw new SolanaError(SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE, {\n      bytesLength,\n      codecDescription,\n      offset\n    });\n  }\n}\n\n// src/bytes.ts\nvar mergeBytes = (byteArrays) => {\n  const nonEmptyByteArrays = byteArrays.filter((arr) => arr.length);\n  if (nonEmptyByteArrays.length === 0) {\n    return byteArrays.length ? byteArrays[0] : new Uint8Array();\n  }\n  if (nonEmptyByteArrays.length === 1) {\n    return nonEmptyByteArrays[0];\n  }\n  const totalLength = nonEmptyByteArrays.reduce((total, arr) => total + arr.length, 0);\n  const result = new Uint8Array(totalLength);\n  let offset = 0;\n  nonEmptyByteArrays.forEach((arr) => {\n    result.set(arr, offset);\n    offset += arr.length;\n  });\n  return result;\n};\nvar padBytes = (bytes, length) => {\n  if (bytes.length >= length)\n    return bytes;\n  const paddedBytes = new Uint8Array(length).fill(0);\n  paddedBytes.set(bytes);\n  return paddedBytes;\n};\nvar fixBytes = (bytes, length) => padBytes(bytes.length <= length ? bytes : bytes.slice(0, length), length);\nfunction getEncodedSize(value, encoder) {\n  return \"fixedSize\" in encoder ? encoder.fixedSize : encoder.getSizeFromValue(value);\n}\nfunction createEncoder(encoder) {\n  return Object.freeze({\n    ...encoder,\n    encode: (value) => {\n      const bytes = new Uint8Array(getEncodedSize(value, encoder));\n      encoder.write(value, bytes, 0);\n      return bytes;\n    }\n  });\n}\nfunction createDecoder(decoder) {\n  return Object.freeze({\n    ...decoder,\n    decode: (bytes, offset = 0) => decoder.read(bytes, offset)[0]\n  });\n}\nfunction createCodec(codec) {\n  return Object.freeze({\n    ...codec,\n    decode: (bytes, offset = 0) => codec.read(bytes, offset)[0],\n    encode: (value) => {\n      const bytes = new Uint8Array(getEncodedSize(value, codec));\n      codec.write(value, bytes, 0);\n      return bytes;\n    }\n  });\n}\nfunction isFixedSize(codec) {\n  return \"fixedSize\" in codec && typeof codec.fixedSize === \"number\";\n}\nfunction assertIsFixedSize(codec) {\n  if (!isFixedSize(codec)) {\n    throw new SolanaError(SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH);\n  }\n}\nfunction isVariableSize(codec) {\n  return !isFixedSize(codec);\n}\nfunction assertIsVariableSize(codec) {\n  if (!isVariableSize(codec)) {\n    throw new SolanaError(SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH);\n  }\n}\nfunction combineCodec(encoder, decoder) {\n  if (isFixedSize(encoder) !== isFixedSize(decoder)) {\n    throw new SolanaError(SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH);\n  }\n  if (isFixedSize(encoder) && isFixedSize(decoder) && encoder.fixedSize !== decoder.fixedSize) {\n    throw new SolanaError(SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH, {\n      decoderFixedSize: decoder.fixedSize,\n      encoderFixedSize: encoder.fixedSize\n    });\n  }\n  if (!isFixedSize(encoder) && !isFixedSize(decoder) && encoder.maxSize !== decoder.maxSize) {\n    throw new SolanaError(SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH, {\n      decoderMaxSize: decoder.maxSize,\n      encoderMaxSize: encoder.maxSize\n    });\n  }\n  return {\n    ...decoder,\n    ...encoder,\n    decode: decoder.decode,\n    encode: encoder.encode,\n    read: decoder.read,\n    write: encoder.write\n  };\n}\n\n// src/fix-codec.ts\nfunction fixEncoder(encoder, fixedBytes) {\n  return createEncoder({\n    fixedSize: fixedBytes,\n    write: (value, bytes, offset) => {\n      const variableByteArray = encoder.encode(value);\n      const fixedByteArray = variableByteArray.length > fixedBytes ? variableByteArray.slice(0, fixedBytes) : variableByteArray;\n      bytes.set(fixedByteArray, offset);\n      return offset + fixedBytes;\n    }\n  });\n}\nfunction fixDecoder(decoder, fixedBytes) {\n  return createDecoder({\n    fixedSize: fixedBytes,\n    read: (bytes, offset) => {\n      assertByteArrayHasEnoughBytesForCodec(\"fixCodec\", fixedBytes, bytes, offset);\n      if (offset > 0 || bytes.length > fixedBytes) {\n        bytes = bytes.slice(offset, offset + fixedBytes);\n      }\n      if (isFixedSize(decoder)) {\n        bytes = fixBytes(bytes, decoder.fixedSize);\n      }\n      const [value] = decoder.read(bytes, 0);\n      return [value, offset + fixedBytes];\n    }\n  });\n}\nfunction fixCodec(codec, fixedBytes) {\n  return combineCodec(fixEncoder(codec, fixedBytes), fixDecoder(codec, fixedBytes));\n}\n\n// src/map-codec.ts\nfunction mapEncoder(encoder, unmap) {\n  return createEncoder({\n    ...isVariableSize(encoder) ? { ...encoder, getSizeFromValue: (value) => encoder.getSizeFromValue(unmap(value)) } : encoder,\n    write: (value, bytes, offset) => encoder.write(unmap(value), bytes, offset)\n  });\n}\nfunction mapDecoder(decoder, map) {\n  return createDecoder({\n    ...decoder,\n    read: (bytes, offset) => {\n      const [value, newOffset] = decoder.read(bytes, offset);\n      return [map(value, bytes, offset), newOffset];\n    }\n  });\n}\nfunction mapCodec(codec, unmap, map) {\n  return createCodec({\n    ...mapEncoder(codec, unmap),\n    read: map ? mapDecoder(codec, map).read : codec.read\n  });\n}\n\n// src/offset-codec.ts\nfunction offsetEncoder(encoder, config) {\n  return createEncoder({\n    ...encoder,\n    write: (value, bytes, preOffset) => {\n      const wrapBytes = (offset) => modulo(offset, bytes.length);\n      const newPreOffset = config.preOffset ? config.preOffset({ bytes, preOffset, wrapBytes }) : preOffset;\n      assertByteArrayOffsetIsNotOutOfRange(\"offsetEncoder\", newPreOffset, bytes.length);\n      const postOffset = encoder.write(value, bytes, newPreOffset);\n      const newPostOffset = config.postOffset ? config.postOffset({ bytes, newPreOffset, postOffset, preOffset, wrapBytes }) : postOffset;\n      assertByteArrayOffsetIsNotOutOfRange(\"offsetEncoder\", newPostOffset, bytes.length);\n      return newPostOffset;\n    }\n  });\n}\nfunction offsetDecoder(decoder, config) {\n  return createDecoder({\n    ...decoder,\n    read: (bytes, preOffset) => {\n      const wrapBytes = (offset) => modulo(offset, bytes.length);\n      const newPreOffset = config.preOffset ? config.preOffset({ bytes, preOffset, wrapBytes }) : preOffset;\n      assertByteArrayOffsetIsNotOutOfRange(\"offsetDecoder\", newPreOffset, bytes.length);\n      const [value, postOffset] = decoder.read(bytes, newPreOffset);\n      const newPostOffset = config.postOffset ? config.postOffset({ bytes, newPreOffset, postOffset, preOffset, wrapBytes }) : postOffset;\n      assertByteArrayOffsetIsNotOutOfRange(\"offsetDecoder\", newPostOffset, bytes.length);\n      return [value, newPostOffset];\n    }\n  });\n}\nfunction offsetCodec(codec, config) {\n  return combineCodec(offsetEncoder(codec, config), offsetDecoder(codec, config));\n}\nfunction modulo(dividend, divisor) {\n  if (divisor === 0)\n    return 0;\n  return (dividend % divisor + divisor) % divisor;\n}\nfunction resizeEncoder(encoder, resize) {\n  if (isFixedSize(encoder)) {\n    const fixedSize = resize(encoder.fixedSize);\n    if (fixedSize < 0) {\n      throw new SolanaError(SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH, {\n        bytesLength: fixedSize,\n        codecDescription: \"resizeEncoder\"\n      });\n    }\n    return createEncoder({ ...encoder, fixedSize });\n  }\n  return createEncoder({\n    ...encoder,\n    getSizeFromValue: (value) => {\n      const newSize = resize(encoder.getSizeFromValue(value));\n      if (newSize < 0) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH, {\n          bytesLength: newSize,\n          codecDescription: \"resizeEncoder\"\n        });\n      }\n      return newSize;\n    }\n  });\n}\nfunction resizeDecoder(decoder, resize) {\n  if (isFixedSize(decoder)) {\n    const fixedSize = resize(decoder.fixedSize);\n    if (fixedSize < 0) {\n      throw new SolanaError(SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH, {\n        bytesLength: fixedSize,\n        codecDescription: \"resizeDecoder\"\n      });\n    }\n    return createDecoder({ ...decoder, fixedSize });\n  }\n  return decoder;\n}\nfunction resizeCodec(codec, resize) {\n  return combineCodec(resizeEncoder(codec, resize), resizeDecoder(codec, resize));\n}\n\n// src/pad-codec.ts\nfunction padLeftEncoder(encoder, offset) {\n  return offsetEncoder(\n    resizeEncoder(encoder, (size) => size + offset),\n    { preOffset: ({ preOffset }) => preOffset + offset }\n  );\n}\nfunction padRightEncoder(encoder, offset) {\n  return offsetEncoder(\n    resizeEncoder(encoder, (size) => size + offset),\n    { postOffset: ({ postOffset }) => postOffset + offset }\n  );\n}\nfunction padLeftDecoder(decoder, offset) {\n  return offsetDecoder(\n    resizeDecoder(decoder, (size) => size + offset),\n    { preOffset: ({ preOffset }) => preOffset + offset }\n  );\n}\nfunction padRightDecoder(decoder, offset) {\n  return offsetDecoder(\n    resizeDecoder(decoder, (size) => size + offset),\n    { postOffset: ({ postOffset }) => postOffset + offset }\n  );\n}\nfunction padLeftCodec(codec, offset) {\n  return combineCodec(padLeftEncoder(codec, offset), padLeftDecoder(codec, offset));\n}\nfunction padRightCodec(codec, offset) {\n  return combineCodec(padRightEncoder(codec, offset), padRightDecoder(codec, offset));\n}\n\n// src/reverse-codec.ts\nfunction reverseEncoder(encoder) {\n  assertIsFixedSize(encoder);\n  return createEncoder({\n    ...encoder,\n    write: (value, bytes, offset) => {\n      const newOffset = encoder.write(value, bytes, offset);\n      const slice = bytes.slice(offset, offset + encoder.fixedSize).reverse();\n      bytes.set(slice, offset);\n      return newOffset;\n    }\n  });\n}\nfunction reverseDecoder(decoder) {\n  assertIsFixedSize(decoder);\n  return createDecoder({\n    ...decoder,\n    read: (bytes, offset) => {\n      const reverseEnd = offset + decoder.fixedSize;\n      if (offset === 0 && bytes.length === reverseEnd) {\n        return decoder.read(bytes.reverse(), offset);\n      }\n      const reversedBytes = bytes.slice();\n      reversedBytes.set(bytes.slice(offset, reverseEnd).reverse(), offset);\n      return decoder.read(reversedBytes, offset);\n    }\n  });\n}\nfunction reverseCodec(codec) {\n  return combineCodec(reverseEncoder(codec), reverseDecoder(codec));\n}\n\nexport { assertByteArrayHasEnoughBytesForCodec, assertByteArrayIsNotEmptyForCodec, assertByteArrayOffsetIsNotOutOfRange, assertIsFixedSize, assertIsVariableSize, combineCodec, createCodec, createDecoder, createEncoder, fixBytes, fixCodec, fixDecoder, fixEncoder, getEncodedSize, isFixedSize, isVariableSize, mapCodec, mapDecoder, mapEncoder, mergeBytes, offsetCodec, offsetDecoder, offsetEncoder, padBytes, padLeftCodec, padLeftDecoder, padLeftEncoder, padRightCodec, padRightDecoder, padRightEncoder, resizeCodec, resizeDecoder, resizeEncoder, reverseCodec, reverseDecoder, reverseEncoder };\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.browser.js.map","import { SolanaError, SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE } from '@solana/errors';\nimport { combineCodec, createEncoder, createDecoder, assertByteArrayIsNotEmptyForCodec, assertByteArrayHasEnoughBytesForCodec } from '@solana/codecs-core';\n\n// src/assertions.ts\nfunction assertNumberIsBetweenForCodec(codecDescription, min, max, value) {\n  if (value < min || value > max) {\n    throw new SolanaError(SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE, {\n      codecDescription,\n      max,\n      min,\n      value\n    });\n  }\n}\n\n// src/common.ts\nvar Endian = /* @__PURE__ */ ((Endian2) => {\n  Endian2[Endian2[\"LITTLE\"] = 0] = \"LITTLE\";\n  Endian2[Endian2[\"BIG\"] = 1] = \"BIG\";\n  return Endian2;\n})(Endian || {});\nfunction isLittleEndian(config) {\n  return config?.endian === 1 /* BIG */ ? false : true;\n}\nfunction numberEncoderFactory(input) {\n  return createEncoder({\n    fixedSize: input.size,\n    write(value, bytes, offset) {\n      if (input.range) {\n        assertNumberIsBetweenForCodec(input.name, input.range[0], input.range[1], value);\n      }\n      const arrayBuffer = new ArrayBuffer(input.size);\n      input.set(new DataView(arrayBuffer), value, isLittleEndian(input.config));\n      bytes.set(new Uint8Array(arrayBuffer), offset);\n      return offset + input.size;\n    }\n  });\n}\nfunction numberDecoderFactory(input) {\n  return createDecoder({\n    fixedSize: input.size,\n    read(bytes, offset = 0) {\n      assertByteArrayIsNotEmptyForCodec(input.name, bytes, offset);\n      assertByteArrayHasEnoughBytesForCodec(input.name, input.size, bytes, offset);\n      const view = new DataView(toArrayBuffer(bytes, offset, input.size));\n      return [input.get(view, isLittleEndian(input.config)), offset + input.size];\n    }\n  });\n}\nfunction toArrayBuffer(bytes, offset, length) {\n  const bytesOffset = bytes.byteOffset + (offset ?? 0);\n  const bytesLength = length ?? bytes.byteLength;\n  return bytes.buffer.slice(bytesOffset, bytesOffset + bytesLength);\n}\n\n// src/f32.ts\nvar getF32Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"f32\",\n  set: (view, value, le) => view.setFloat32(0, value, le),\n  size: 4\n});\nvar getF32Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getFloat32(0, le),\n  name: \"f32\",\n  size: 4\n});\nvar getF32Codec = (config = {}) => combineCodec(getF32Encoder(config), getF32Decoder(config));\nvar getF64Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"f64\",\n  set: (view, value, le) => view.setFloat64(0, value, le),\n  size: 8\n});\nvar getF64Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getFloat64(0, le),\n  name: \"f64\",\n  size: 8\n});\nvar getF64Codec = (config = {}) => combineCodec(getF64Encoder(config), getF64Decoder(config));\nvar getI128Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"i128\",\n  range: [-BigInt(\"0x7fffffffffffffffffffffffffffffff\") - 1n, BigInt(\"0x7fffffffffffffffffffffffffffffff\")],\n  set: (view, value, le) => {\n    const leftOffset = le ? 8 : 0;\n    const rightOffset = le ? 0 : 8;\n    const rightMask = 0xffffffffffffffffn;\n    view.setBigInt64(leftOffset, BigInt(value) >> 64n, le);\n    view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);\n  },\n  size: 16\n});\nvar getI128Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => {\n    const leftOffset = le ? 8 : 0;\n    const rightOffset = le ? 0 : 8;\n    const left = view.getBigInt64(leftOffset, le);\n    const right = view.getBigUint64(rightOffset, le);\n    return (left << 64n) + right;\n  },\n  name: \"i128\",\n  size: 16\n});\nvar getI128Codec = (config = {}) => combineCodec(getI128Encoder(config), getI128Decoder(config));\nvar getI16Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"i16\",\n  range: [-Number(\"0x7fff\") - 1, Number(\"0x7fff\")],\n  set: (view, value, le) => view.setInt16(0, value, le),\n  size: 2\n});\nvar getI16Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getInt16(0, le),\n  name: \"i16\",\n  size: 2\n});\nvar getI16Codec = (config = {}) => combineCodec(getI16Encoder(config), getI16Decoder(config));\nvar getI32Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"i32\",\n  range: [-Number(\"0x7fffffff\") - 1, Number(\"0x7fffffff\")],\n  set: (view, value, le) => view.setInt32(0, value, le),\n  size: 4\n});\nvar getI32Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getInt32(0, le),\n  name: \"i32\",\n  size: 4\n});\nvar getI32Codec = (config = {}) => combineCodec(getI32Encoder(config), getI32Decoder(config));\nvar getI64Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"i64\",\n  range: [-BigInt(\"0x7fffffffffffffff\") - 1n, BigInt(\"0x7fffffffffffffff\")],\n  set: (view, value, le) => view.setBigInt64(0, BigInt(value), le),\n  size: 8\n});\nvar getI64Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getBigInt64(0, le),\n  name: \"i64\",\n  size: 8\n});\nvar getI64Codec = (config = {}) => combineCodec(getI64Encoder(config), getI64Decoder(config));\nvar getI8Encoder = () => numberEncoderFactory({\n  name: \"i8\",\n  range: [-Number(\"0x7f\") - 1, Number(\"0x7f\")],\n  set: (view, value) => view.setInt8(0, value),\n  size: 1\n});\nvar getI8Decoder = () => numberDecoderFactory({\n  get: (view) => view.getInt8(0),\n  name: \"i8\",\n  size: 1\n});\nvar getI8Codec = () => combineCodec(getI8Encoder(), getI8Decoder());\nvar getShortU16Encoder = () => createEncoder({\n  getSizeFromValue: (value) => {\n    if (value <= 127)\n      return 1;\n    if (value <= 16383)\n      return 2;\n    return 3;\n  },\n  maxSize: 3,\n  write: (value, bytes, offset) => {\n    assertNumberIsBetweenForCodec(\"shortU16\", 0, 65535, value);\n    const shortU16Bytes = [0];\n    for (let ii = 0; ; ii += 1) {\n      const alignedValue = value >> ii * 7;\n      if (alignedValue === 0) {\n        break;\n      }\n      const nextSevenBits = 127 & alignedValue;\n      shortU16Bytes[ii] = nextSevenBits;\n      if (ii > 0) {\n        shortU16Bytes[ii - 1] |= 128;\n      }\n    }\n    bytes.set(shortU16Bytes, offset);\n    return offset + shortU16Bytes.length;\n  }\n});\nvar getShortU16Decoder = () => createDecoder({\n  maxSize: 3,\n  read: (bytes, offset) => {\n    let value = 0;\n    let byteCount = 0;\n    while (++byteCount) {\n      const byteIndex = byteCount - 1;\n      const currentByte = bytes[offset + byteIndex];\n      const nextSevenBits = 127 & currentByte;\n      value |= nextSevenBits << byteIndex * 7;\n      if ((currentByte & 128) === 0) {\n        break;\n      }\n    }\n    return [value, offset + byteCount];\n  }\n});\nvar getShortU16Codec = () => combineCodec(getShortU16Encoder(), getShortU16Decoder());\nvar getU128Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"u128\",\n  range: [0n, BigInt(\"0xffffffffffffffffffffffffffffffff\")],\n  set: (view, value, le) => {\n    const leftOffset = le ? 8 : 0;\n    const rightOffset = le ? 0 : 8;\n    const rightMask = 0xffffffffffffffffn;\n    view.setBigUint64(leftOffset, BigInt(value) >> 64n, le);\n    view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);\n  },\n  size: 16\n});\nvar getU128Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => {\n    const leftOffset = le ? 8 : 0;\n    const rightOffset = le ? 0 : 8;\n    const left = view.getBigUint64(leftOffset, le);\n    const right = view.getBigUint64(rightOffset, le);\n    return (left << 64n) + right;\n  },\n  name: \"u128\",\n  size: 16\n});\nvar getU128Codec = (config = {}) => combineCodec(getU128Encoder(config), getU128Decoder(config));\nvar getU16Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"u16\",\n  range: [0, Number(\"0xffff\")],\n  set: (view, value, le) => view.setUint16(0, value, le),\n  size: 2\n});\nvar getU16Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getUint16(0, le),\n  name: \"u16\",\n  size: 2\n});\nvar getU16Codec = (config = {}) => combineCodec(getU16Encoder(config), getU16Decoder(config));\nvar getU32Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"u32\",\n  range: [0, Number(\"0xffffffff\")],\n  set: (view, value, le) => view.setUint32(0, value, le),\n  size: 4\n});\nvar getU32Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getUint32(0, le),\n  name: \"u32\",\n  size: 4\n});\nvar getU32Codec = (config = {}) => combineCodec(getU32Encoder(config), getU32Decoder(config));\nvar getU64Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"u64\",\n  range: [0n, BigInt(\"0xffffffffffffffff\")],\n  set: (view, value, le) => view.setBigUint64(0, BigInt(value), le),\n  size: 8\n});\nvar getU64Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getBigUint64(0, le),\n  name: \"u64\",\n  size: 8\n});\nvar getU64Codec = (config = {}) => combineCodec(getU64Encoder(config), getU64Decoder(config));\nvar getU8Encoder = () => numberEncoderFactory({\n  name: \"u8\",\n  range: [0, Number(\"0xff\")],\n  set: (view, value) => view.setUint8(0, value),\n  size: 1\n});\nvar getU8Decoder = () => numberDecoderFactory({\n  get: (view) => view.getUint8(0),\n  name: \"u8\",\n  size: 1\n});\nvar getU8Codec = () => combineCodec(getU8Encoder(), getU8Decoder());\n\nexport { Endian, assertNumberIsBetweenForCodec, getF32Codec, getF32Decoder, getF32Encoder, getF64Codec, getF64Decoder, getF64Encoder, getI128Codec, getI128Decoder, getI128Encoder, getI16Codec, getI16Decoder, getI16Encoder, getI32Codec, getI32Decoder, getI32Encoder, getI64Codec, getI64Decoder, getI64Encoder, getI8Codec, getI8Decoder, getI8Encoder, getShortU16Codec, getShortU16Decoder, getShortU16Encoder, getU128Codec, getU128Decoder, getU128Encoder, getU16Codec, getU16Decoder, getU16Encoder, getU32Codec, getU32Decoder, getU32Encoder, getU64Codec, getU64Decoder, getU64Encoder, getU8Codec, getU8Decoder, getU8Encoder };\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.browser.js.map","import { createEncoder, getEncodedSize, createDecoder, combineCodec, assertByteArrayHasEnoughBytesForCodec, assertIsFixedSize, mapEncoder, mapDecoder, fixEncoder, fixDecoder, assertByteArrayIsNotEmptyForCodec, isFixedSize } from '@solana/codecs-core';\nimport { getU32Encoder, getU32Decoder, getU8Encoder, getU8Decoder } from '@solana/codecs-numbers';\nimport { SolanaError, SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS, SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE, SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT, SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT } from '@solana/errors';\n\n// src/array.ts\nfunction assertValidNumberOfItemsForCodec(codecDescription, expected, actual) {\n  if (expected !== actual) {\n    throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS, {\n      actual,\n      codecDescription,\n      expected\n    });\n  }\n}\nfunction maxCodecSizes(sizes) {\n  return sizes.reduce(\n    (all, size) => all === null || size === null ? null : Math.max(all, size),\n    0\n  );\n}\nfunction sumCodecSizes(sizes) {\n  return sizes.reduce((all, size) => all === null || size === null ? null : all + size, 0);\n}\nfunction getFixedSize(codec) {\n  return isFixedSize(codec) ? codec.fixedSize : null;\n}\nfunction getMaxSize(codec) {\n  return isFixedSize(codec) ? codec.fixedSize : codec.maxSize ?? null;\n}\n\n// src/array.ts\nfunction getArrayEncoder(item, config = {}) {\n  const size = config.size ?? getU32Encoder();\n  const fixedSize = computeArrayLikeCodecSize(size, getFixedSize(item));\n  const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? void 0;\n  return createEncoder({\n    ...fixedSize !== null ? { fixedSize } : {\n      getSizeFromValue: (array) => {\n        const prefixSize = typeof size === \"object\" ? getEncodedSize(array.length, size) : 0;\n        return prefixSize + [...array].reduce((all, value) => all + getEncodedSize(value, item), 0);\n      },\n      maxSize\n    },\n    write: (array, bytes, offset) => {\n      if (typeof size === \"number\") {\n        assertValidNumberOfItemsForCodec(\"array\", size, array.length);\n      }\n      if (typeof size === \"object\") {\n        offset = size.write(array.length, bytes, offset);\n      }\n      array.forEach((value) => {\n        offset = item.write(value, bytes, offset);\n      });\n      return offset;\n    }\n  });\n}\nfunction getArrayDecoder(item, config = {}) {\n  const size = config.size ?? getU32Decoder();\n  const itemSize = getFixedSize(item);\n  const fixedSize = computeArrayLikeCodecSize(size, itemSize);\n  const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? void 0;\n  return createDecoder({\n    ...fixedSize !== null ? { fixedSize } : { maxSize },\n    read: (bytes, offset) => {\n      const array = [];\n      if (typeof size === \"object\" && bytes.slice(offset).length === 0) {\n        return [array, offset];\n      }\n      if (size === \"remainder\") {\n        while (offset < bytes.length) {\n          const [value, newOffset2] = item.read(bytes, offset);\n          offset = newOffset2;\n          array.push(value);\n        }\n        return [array, offset];\n      }\n      const [resolvedSize, newOffset] = typeof size === \"number\" ? [size, offset] : size.read(bytes, offset);\n      offset = newOffset;\n      for (let i = 0; i < resolvedSize; i += 1) {\n        const [value, newOffset2] = item.read(bytes, offset);\n        offset = newOffset2;\n        array.push(value);\n      }\n      return [array, offset];\n    }\n  });\n}\nfunction getArrayCodec(item, config = {}) {\n  return combineCodec(getArrayEncoder(item, config), getArrayDecoder(item, config));\n}\nfunction computeArrayLikeCodecSize(size, itemSize) {\n  if (typeof size !== \"number\")\n    return null;\n  if (size === 0)\n    return 0;\n  return itemSize === null ? null : itemSize * size;\n}\nfunction getBitArrayEncoder(size, config = {}) {\n  const parsedConfig = typeof config === \"boolean\" ? { backward: config } : config;\n  const backward = parsedConfig.backward ?? false;\n  return createEncoder({\n    fixedSize: size,\n    write(value, bytes, offset) {\n      const bytesToAdd = [];\n      for (let i = 0; i < size; i += 1) {\n        let byte = 0;\n        for (let j = 0; j < 8; j += 1) {\n          const feature = Number(value[i * 8 + j] ?? 0);\n          byte |= feature << (backward ? j : 7 - j);\n        }\n        if (backward) {\n          bytesToAdd.unshift(byte);\n        } else {\n          bytesToAdd.push(byte);\n        }\n      }\n      bytes.set(bytesToAdd, offset);\n      return size;\n    }\n  });\n}\nfunction getBitArrayDecoder(size, config = {}) {\n  const parsedConfig = typeof config === \"boolean\" ? { backward: config } : config;\n  const backward = parsedConfig.backward ?? false;\n  return createDecoder({\n    fixedSize: size,\n    read(bytes, offset) {\n      assertByteArrayHasEnoughBytesForCodec(\"bitArray\", size, bytes, offset);\n      const booleans = [];\n      let slice = bytes.slice(offset, offset + size);\n      slice = backward ? slice.reverse() : slice;\n      slice.forEach((byte) => {\n        for (let i = 0; i < 8; i += 1) {\n          if (backward) {\n            booleans.push(Boolean(byte & 1));\n            byte >>= 1;\n          } else {\n            booleans.push(Boolean(byte & 128));\n            byte <<= 1;\n          }\n        }\n      });\n      return [booleans, offset + size];\n    }\n  });\n}\nfunction getBitArrayCodec(size, config = {}) {\n  return combineCodec(getBitArrayEncoder(size, config), getBitArrayDecoder(size, config));\n}\nfunction getBooleanEncoder(config = {}) {\n  const size = config.size ?? getU8Encoder();\n  assertIsFixedSize(size);\n  return mapEncoder(size, (value) => value ? 1 : 0);\n}\nfunction getBooleanDecoder(config = {}) {\n  const size = config.size ?? getU8Decoder();\n  assertIsFixedSize(size);\n  return mapDecoder(size, (value) => Number(value) === 1);\n}\nfunction getBooleanCodec(config = {}) {\n  return combineCodec(getBooleanEncoder(config), getBooleanDecoder(config));\n}\nfunction getBytesEncoder(config = {}) {\n  const size = config.size ?? \"variable\";\n  const byteEncoder = createEncoder({\n    getSizeFromValue: (value) => value.length,\n    write: (value, bytes, offset) => {\n      bytes.set(value, offset);\n      return offset + value.length;\n    }\n  });\n  if (size === \"variable\") {\n    return byteEncoder;\n  }\n  if (typeof size === \"number\") {\n    return fixEncoder(byteEncoder, size);\n  }\n  return createEncoder({\n    getSizeFromValue: (value) => getEncodedSize(value.length, size) + value.length,\n    write: (value, bytes, offset) => {\n      offset = size.write(value.length, bytes, offset);\n      return byteEncoder.write(value, bytes, offset);\n    }\n  });\n}\nfunction getBytesDecoder(config = {}) {\n  const size = config.size ?? \"variable\";\n  const byteDecoder = createDecoder({\n    read: (bytes, offset) => {\n      const slice = bytes.slice(offset);\n      return [slice, offset + slice.length];\n    }\n  });\n  if (size === \"variable\") {\n    return byteDecoder;\n  }\n  if (typeof size === \"number\") {\n    return fixDecoder(byteDecoder, size);\n  }\n  return createDecoder({\n    read: (bytes, offset) => {\n      assertByteArrayIsNotEmptyForCodec(\"bytes\", bytes, offset);\n      const [lengthBigInt, lengthOffset] = size.read(bytes, offset);\n      const length = Number(lengthBigInt);\n      offset = lengthOffset;\n      const contentBytes = bytes.slice(offset, offset + length);\n      assertByteArrayHasEnoughBytesForCodec(\"bytes\", length, contentBytes);\n      const [value, contentOffset] = byteDecoder.read(contentBytes, 0);\n      offset += contentOffset;\n      return [value, offset];\n    }\n  });\n}\nfunction getBytesCodec(config = {}) {\n  return combineCodec(getBytesEncoder(config), getBytesDecoder(config));\n}\nfunction getDataEnumEncoder(variants, config = {}) {\n  const prefix = config.size ?? getU8Encoder();\n  const fixedSize = getDataEnumFixedSize(variants, prefix);\n  return createEncoder({\n    ...fixedSize !== null ? { fixedSize } : {\n      getSizeFromValue: (variant) => {\n        const discriminator = getVariantDiscriminator(variants, variant);\n        const variantEncoder = variants[discriminator][1];\n        return getEncodedSize(discriminator, prefix) + getEncodedSize(variant, variantEncoder);\n      },\n      maxSize: getDataEnumMaxSize(variants, prefix)\n    },\n    write: (variant, bytes, offset) => {\n      const discriminator = getVariantDiscriminator(variants, variant);\n      offset = prefix.write(discriminator, bytes, offset);\n      const variantEncoder = variants[discriminator][1];\n      return variantEncoder.write(variant, bytes, offset);\n    }\n  });\n}\nfunction getDataEnumDecoder(variants, config = {}) {\n  const prefix = config.size ?? getU8Decoder();\n  const fixedSize = getDataEnumFixedSize(variants, prefix);\n  return createDecoder({\n    ...fixedSize !== null ? { fixedSize } : { maxSize: getDataEnumMaxSize(variants, prefix) },\n    read: (bytes, offset) => {\n      assertByteArrayIsNotEmptyForCodec(\"dataEnum\", bytes, offset);\n      const [discriminator, dOffset] = prefix.read(bytes, offset);\n      offset = dOffset;\n      const variantField = variants[Number(discriminator)] ?? null;\n      if (!variantField) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE, {\n          discriminator,\n          maxRange: variants.length - 1,\n          minRange: 0\n        });\n      }\n      const [variant, vOffset] = variantField[1].read(bytes, offset);\n      offset = vOffset;\n      return [{ __kind: variantField[0], ...variant ?? {} }, offset];\n    }\n  });\n}\nfunction getDataEnumCodec(variants, config = {}) {\n  return combineCodec(\n    getDataEnumEncoder(variants, config),\n    getDataEnumDecoder(variants, config)\n  );\n}\nfunction getDataEnumFixedSize(variants, prefix) {\n  if (variants.length === 0)\n    return isFixedSize(prefix) ? prefix.fixedSize : null;\n  if (!isFixedSize(variants[0][1]))\n    return null;\n  const variantSize = variants[0][1].fixedSize;\n  const sameSizedVariants = variants.every(\n    (variant) => isFixedSize(variant[1]) && variant[1].fixedSize === variantSize\n  );\n  if (!sameSizedVariants)\n    return null;\n  return isFixedSize(prefix) ? prefix.fixedSize + variantSize : null;\n}\nfunction getDataEnumMaxSize(variants, prefix) {\n  const maxVariantSize = maxCodecSizes(variants.map(([, codec]) => getMaxSize(codec)));\n  return sumCodecSizes([getMaxSize(prefix), maxVariantSize]) ?? void 0;\n}\nfunction getVariantDiscriminator(variants, variant) {\n  const discriminator = variants.findIndex(([key]) => variant.__kind === key);\n  if (discriminator < 0) {\n    throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT, {\n      value: variant.__kind,\n      variants: variants.map(([key]) => key)\n    });\n  }\n  return discriminator;\n}\nfunction getTupleEncoder(items) {\n  const fixedSize = sumCodecSizes(items.map(getFixedSize));\n  const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? void 0;\n  return createEncoder({\n    ...fixedSize === null ? {\n      getSizeFromValue: (value) => items.map((item, index) => getEncodedSize(value[index], item)).reduce((all, one) => all + one, 0),\n      maxSize\n    } : { fixedSize },\n    write: (value, bytes, offset) => {\n      assertValidNumberOfItemsForCodec(\"tuple\", items.length, value.length);\n      items.forEach((item, index) => {\n        offset = item.write(value[index], bytes, offset);\n      });\n      return offset;\n    }\n  });\n}\nfunction getTupleDecoder(items) {\n  const fixedSize = sumCodecSizes(items.map(getFixedSize));\n  const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? void 0;\n  return createDecoder({\n    ...fixedSize === null ? { maxSize } : { fixedSize },\n    read: (bytes, offset) => {\n      const values = [];\n      items.forEach((item) => {\n        const [newValue, newOffset] = item.read(bytes, offset);\n        values.push(newValue);\n        offset = newOffset;\n      });\n      return [values, offset];\n    }\n  });\n}\nfunction getTupleCodec(items) {\n  return combineCodec(\n    getTupleEncoder(items),\n    getTupleDecoder(items)\n  );\n}\n\n// src/map.ts\nfunction getMapEncoder(key, value, config = {}) {\n  return mapEncoder(\n    getArrayEncoder(getTupleEncoder([key, value]), config),\n    (map) => [...map.entries()]\n  );\n}\nfunction getMapDecoder(key, value, config = {}) {\n  return mapDecoder(\n    getArrayDecoder(getTupleDecoder([key, value]), config),\n    (entries) => new Map(entries)\n  );\n}\nfunction getMapCodec(key, value, config = {}) {\n  return combineCodec(getMapEncoder(key, value, config), getMapDecoder(key, value, config));\n}\nfunction getNullableEncoder(item, config = {}) {\n  const prefix = config.prefix ?? getU8Encoder();\n  const fixed = config.fixed ?? false;\n  const isZeroSizeItem = isFixedSize(item) && isFixedSize(prefix) && item.fixedSize === 0;\n  if (fixed || isZeroSizeItem) {\n    assertIsFixedSize(item);\n    assertIsFixedSize(prefix);\n    const fixedSize = prefix.fixedSize + item.fixedSize;\n    return createEncoder({\n      fixedSize,\n      write: (option, bytes, offset) => {\n        const prefixOffset = prefix.write(Number(option !== null), bytes, offset);\n        if (option !== null) {\n          item.write(option, bytes, prefixOffset);\n        }\n        return offset + fixedSize;\n      }\n    });\n  }\n  return createEncoder({\n    getSizeFromValue: (option) => getEncodedSize(Number(option !== null), prefix) + (option !== null ? getEncodedSize(option, item) : 0),\n    maxSize: sumCodecSizes([prefix, item].map(getMaxSize)) ?? void 0,\n    write: (option, bytes, offset) => {\n      offset = prefix.write(Number(option !== null), bytes, offset);\n      if (option !== null) {\n        offset = item.write(option, bytes, offset);\n      }\n      return offset;\n    }\n  });\n}\nfunction getNullableDecoder(item, config = {}) {\n  const prefix = config.prefix ?? getU8Decoder();\n  const fixed = config.fixed ?? false;\n  let fixedSize = null;\n  const isZeroSizeItem = isFixedSize(item) && isFixedSize(prefix) && item.fixedSize === 0;\n  if (fixed || isZeroSizeItem) {\n    assertIsFixedSize(item);\n    assertIsFixedSize(prefix);\n    fixedSize = prefix.fixedSize + item.fixedSize;\n  }\n  return createDecoder({\n    ...fixedSize === null ? { maxSize: sumCodecSizes([prefix, item].map(getMaxSize)) ?? void 0 } : { fixedSize },\n    read: (bytes, offset) => {\n      if (bytes.length - offset <= 0) {\n        return [null, offset];\n      }\n      const [isSome, prefixOffset] = prefix.read(bytes, offset);\n      if (isSome === 0) {\n        return [null, fixedSize !== null ? offset + fixedSize : prefixOffset];\n      }\n      const [value, newOffset] = item.read(bytes, prefixOffset);\n      return [value, fixedSize !== null ? offset + fixedSize : newOffset];\n    }\n  });\n}\nfunction getNullableCodec(item, config = {}) {\n  const configCast = config;\n  return combineCodec(getNullableEncoder(item, configCast), getNullableDecoder(item, configCast));\n}\nfunction getScalarEnumEncoder(constructor, config = {}) {\n  const prefix = config.size ?? getU8Encoder();\n  const { minRange, maxRange, allStringInputs, enumKeys, enumValues } = getScalarEnumStats(constructor);\n  return mapEncoder(prefix, (value) => {\n    const isInvalidNumber = typeof value === \"number\" && (value < minRange || value > maxRange);\n    const isInvalidString = typeof value === \"string\" && !allStringInputs.includes(value);\n    if (isInvalidNumber || isInvalidString) {\n      throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT, {\n        maxRange,\n        minRange,\n        value,\n        variants: allStringInputs\n      });\n    }\n    if (typeof value === \"number\")\n      return value;\n    const valueIndex = enumValues.indexOf(value);\n    if (valueIndex >= 0)\n      return valueIndex;\n    return enumKeys.indexOf(value);\n  });\n}\nfunction getScalarEnumDecoder(constructor, config = {}) {\n  const prefix = config.size ?? getU8Decoder();\n  const { minRange, maxRange, enumKeys } = getScalarEnumStats(constructor);\n  return mapDecoder(prefix, (value) => {\n    const valueAsNumber = Number(value);\n    if (valueAsNumber < minRange || valueAsNumber > maxRange) {\n      throw new SolanaError(SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE, {\n        discriminator: valueAsNumber,\n        maxRange,\n        minRange\n      });\n    }\n    return constructor[enumKeys[valueAsNumber]];\n  });\n}\nfunction getScalarEnumCodec(constructor, config = {}) {\n  return combineCodec(getScalarEnumEncoder(constructor, config), getScalarEnumDecoder(constructor, config));\n}\nfunction getScalarEnumStats(constructor) {\n  const numericValues = Object.values(constructor).filter((v) => typeof v === \"number\");\n  const deduplicatedConstructor = Object.fromEntries(\n    Object.entries(constructor).slice(numericValues.length)\n  );\n  const enumKeys = Object.keys(deduplicatedConstructor);\n  const enumValues = Object.values(deduplicatedConstructor);\n  const minRange = 0;\n  const maxRange = enumValues.length - 1;\n  const allStringInputs = [\n    .../* @__PURE__ */ new Set([...enumKeys, ...enumValues.filter((v) => typeof v === \"string\")])\n  ];\n  return {\n    allStringInputs,\n    enumKeys,\n    enumValues,\n    maxRange,\n    minRange\n  };\n}\nfunction getSetEncoder(item, config = {}) {\n  return mapEncoder(getArrayEncoder(item, config), (set) => [...set]);\n}\nfunction getSetDecoder(item, config = {}) {\n  return mapDecoder(getArrayDecoder(item, config), (entries) => new Set(entries));\n}\nfunction getSetCodec(item, config = {}) {\n  return combineCodec(getSetEncoder(item, config), getSetDecoder(item, config));\n}\nfunction getStructEncoder(fields) {\n  const fieldCodecs = fields.map(([, codec]) => codec);\n  const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));\n  const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? void 0;\n  return createEncoder({\n    ...fixedSize === null ? {\n      getSizeFromValue: (value) => fields.map(([key, codec]) => getEncodedSize(value[key], codec)).reduce((all, one) => all + one, 0),\n      maxSize\n    } : { fixedSize },\n    write: (struct, bytes, offset) => {\n      fields.forEach(([key, codec]) => {\n        offset = codec.write(struct[key], bytes, offset);\n      });\n      return offset;\n    }\n  });\n}\nfunction getStructDecoder(fields) {\n  const fieldCodecs = fields.map(([, codec]) => codec);\n  const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));\n  const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? void 0;\n  return createDecoder({\n    ...fixedSize === null ? { maxSize } : { fixedSize },\n    read: (bytes, offset) => {\n      const struct = {};\n      fields.forEach(([key, codec]) => {\n        const [value, newOffset] = codec.read(bytes, offset);\n        offset = newOffset;\n        struct[key] = value;\n      });\n      return [struct, offset];\n    }\n  });\n}\nfunction getStructCodec(fields) {\n  return combineCodec(\n    getStructEncoder(fields),\n    getStructDecoder(fields)\n  );\n}\nfunction getUnitEncoder() {\n  return createEncoder({\n    fixedSize: 0,\n    write: (_value, _bytes, offset) => offset\n  });\n}\nfunction getUnitDecoder() {\n  return createDecoder({\n    fixedSize: 0,\n    read: (_bytes, offset) => [void 0, offset]\n  });\n}\nfunction getUnitCodec() {\n  return combineCodec(getUnitEncoder(), getUnitDecoder());\n}\n\nexport { assertValidNumberOfItemsForCodec, getArrayCodec, getArrayDecoder, getArrayEncoder, getBitArrayCodec, getBitArrayDecoder, getBitArrayEncoder, getBooleanCodec, getBooleanDecoder, getBooleanEncoder, getBytesCodec, getBytesDecoder, getBytesEncoder, getDataEnumCodec, getDataEnumDecoder, getDataEnumEncoder, getMapCodec, getMapDecoder, getMapEncoder, getNullableCodec, getNullableDecoder, getNullableEncoder, getScalarEnumCodec, getScalarEnumDecoder, getScalarEnumEncoder, getSetCodec, getSetDecoder, getSetEncoder, getStructCodec, getStructDecoder, getStructEncoder, getTupleCodec, getTupleDecoder, getTupleEncoder, getUnitCodec, getUnitDecoder, getUnitEncoder };\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.browser.js.map","import { SolanaError, SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE } from '@solana/errors';\nimport { createEncoder, createDecoder, combineCodec, fixEncoder, getEncodedSize, fixDecoder, assertByteArrayIsNotEmptyForCodec, assertByteArrayHasEnoughBytesForCodec } from '@solana/codecs-core';\nimport { getU32Encoder, getU32Decoder } from '@solana/codecs-numbers';\n\n// src/assertions.ts\nfunction assertValidBaseString(alphabet4, testValue, givenValue = testValue) {\n  if (!testValue.match(new RegExp(`^[${alphabet4}]*$`))) {\n    throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {\n      alphabet: alphabet4,\n      base: alphabet4.length,\n      value: givenValue\n    });\n  }\n}\nvar getBaseXEncoder = (alphabet4) => {\n  return createEncoder({\n    getSizeFromValue: (value) => {\n      const [leadingZeroes, tailChars] = partitionLeadingZeroes(value, alphabet4[0]);\n      if (!tailChars)\n        return value.length;\n      const base10Number = getBigIntFromBaseX(tailChars, alphabet4);\n      return leadingZeroes.length + Math.ceil(base10Number.toString(16).length / 2);\n    },\n    write(value, bytes, offset) {\n      assertValidBaseString(alphabet4, value);\n      if (value === \"\")\n        return offset;\n      const [leadingZeroes, tailChars] = partitionLeadingZeroes(value, alphabet4[0]);\n      if (!tailChars) {\n        bytes.set(new Uint8Array(leadingZeroes.length).fill(0), offset);\n        return offset + leadingZeroes.length;\n      }\n      let base10Number = getBigIntFromBaseX(tailChars, alphabet4);\n      const tailBytes = [];\n      while (base10Number > 0n) {\n        tailBytes.unshift(Number(base10Number % 256n));\n        base10Number /= 256n;\n      }\n      const bytesToAdd = [...Array(leadingZeroes.length).fill(0), ...tailBytes];\n      bytes.set(bytesToAdd, offset);\n      return offset + bytesToAdd.length;\n    }\n  });\n};\nvar getBaseXDecoder = (alphabet4) => {\n  return createDecoder({\n    read(rawBytes, offset) {\n      const bytes = offset === 0 ? rawBytes : rawBytes.slice(offset);\n      if (bytes.length === 0)\n        return [\"\", 0];\n      let trailIndex = bytes.findIndex((n) => n !== 0);\n      trailIndex = trailIndex === -1 ? bytes.length : trailIndex;\n      const leadingZeroes = alphabet4[0].repeat(trailIndex);\n      if (trailIndex === bytes.length)\n        return [leadingZeroes, rawBytes.length];\n      const base10Number = bytes.slice(trailIndex).reduce((sum, byte) => sum * 256n + BigInt(byte), 0n);\n      const tailChars = getBaseXFromBigInt(base10Number, alphabet4);\n      return [leadingZeroes + tailChars, rawBytes.length];\n    }\n  });\n};\nvar getBaseXCodec = (alphabet4) => combineCodec(getBaseXEncoder(alphabet4), getBaseXDecoder(alphabet4));\nfunction partitionLeadingZeroes(value, zeroCharacter) {\n  const [leadingZeros, tailChars] = value.split(new RegExp(`((?!${zeroCharacter}).*)`));\n  return [leadingZeros, tailChars];\n}\nfunction getBigIntFromBaseX(value, alphabet4) {\n  const base = BigInt(alphabet4.length);\n  let sum = 0n;\n  for (const char of value) {\n    sum *= base;\n    sum += BigInt(alphabet4.indexOf(char));\n  }\n  return sum;\n}\nfunction getBaseXFromBigInt(value, alphabet4) {\n  const base = BigInt(alphabet4.length);\n  const tailChars = [];\n  while (value > 0n) {\n    tailChars.unshift(alphabet4[Number(value % base)]);\n    value /= base;\n  }\n  return tailChars.join(\"\");\n}\n\n// src/base10.ts\nvar alphabet = \"0123456789\";\nvar getBase10Encoder = () => getBaseXEncoder(alphabet);\nvar getBase10Decoder = () => getBaseXDecoder(alphabet);\nvar getBase10Codec = () => getBaseXCodec(alphabet);\nvar getBase16Encoder = () => createEncoder({\n  getSizeFromValue: (value) => Math.ceil(value.length / 2),\n  write(value, bytes, offset) {\n    const lowercaseValue = value.toLowerCase();\n    assertValidBaseString(\"0123456789abcdef\", lowercaseValue, value);\n    const matches = lowercaseValue.match(/.{1,2}/g);\n    const hexBytes = matches ? matches.map((byte) => parseInt(byte, 16)) : [];\n    bytes.set(hexBytes, offset);\n    return hexBytes.length + offset;\n  }\n});\nvar getBase16Decoder = () => createDecoder({\n  read(bytes, offset) {\n    const value = bytes.slice(offset).reduce((str, byte) => str + byte.toString(16).padStart(2, \"0\"), \"\");\n    return [value, bytes.length];\n  }\n});\nvar getBase16Codec = () => combineCodec(getBase16Encoder(), getBase16Decoder());\n\n// src/base58.ts\nvar alphabet2 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nvar getBase58Encoder = () => getBaseXEncoder(alphabet2);\nvar getBase58Decoder = () => getBaseXDecoder(alphabet2);\nvar getBase58Codec = () => getBaseXCodec(alphabet2);\nvar getBaseXResliceEncoder = (alphabet4, bits) => createEncoder({\n  getSizeFromValue: (value) => Math.floor(value.length * bits / 8),\n  write(value, bytes, offset) {\n    assertValidBaseString(alphabet4, value);\n    if (value === \"\")\n      return offset;\n    const charIndices = [...value].map((c) => alphabet4.indexOf(c));\n    const reslicedBytes = reslice(charIndices, bits, 8, false);\n    bytes.set(reslicedBytes, offset);\n    return reslicedBytes.length + offset;\n  }\n});\nvar getBaseXResliceDecoder = (alphabet4, bits) => createDecoder({\n  read(rawBytes, offset = 0) {\n    const bytes = offset === 0 ? rawBytes : rawBytes.slice(offset);\n    if (bytes.length === 0)\n      return [\"\", rawBytes.length];\n    const charIndices = reslice([...bytes], 8, bits, true);\n    return [charIndices.map((i) => alphabet4[i]).join(\"\"), rawBytes.length];\n  }\n});\nvar getBaseXResliceCodec = (alphabet4, bits) => combineCodec(getBaseXResliceEncoder(alphabet4, bits), getBaseXResliceDecoder(alphabet4, bits));\nfunction reslice(input, inputBits, outputBits, useRemainder) {\n  const output = [];\n  let accumulator = 0;\n  let bitsInAccumulator = 0;\n  const mask = (1 << outputBits) - 1;\n  for (const value of input) {\n    accumulator = accumulator << inputBits | value;\n    bitsInAccumulator += inputBits;\n    while (bitsInAccumulator >= outputBits) {\n      bitsInAccumulator -= outputBits;\n      output.push(accumulator >> bitsInAccumulator & mask);\n    }\n  }\n  if (useRemainder && bitsInAccumulator > 0) {\n    output.push(accumulator << outputBits - bitsInAccumulator & mask);\n  }\n  return output;\n}\n\n// src/base64.ts\nvar alphabet3 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nvar getBase64Encoder = () => {\n  {\n    return createEncoder({\n      getSizeFromValue: (value) => {\n        try {\n          return atob(value).length;\n        } catch (e2) {\n          throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {\n            alphabet: alphabet3,\n            base: 64,\n            value\n          });\n        }\n      },\n      write(value, bytes, offset) {\n        try {\n          const bytesToAdd = atob(value).split(\"\").map((c) => c.charCodeAt(0));\n          bytes.set(bytesToAdd, offset);\n          return bytesToAdd.length + offset;\n        } catch (e2) {\n          throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {\n            alphabet: alphabet3,\n            base: 64,\n            value\n          });\n        }\n      }\n    });\n  }\n};\nvar getBase64Decoder = () => {\n  {\n    return createDecoder({\n      read(bytes, offset = 0) {\n        const slice = bytes.slice(offset);\n        const value = btoa(String.fromCharCode(...slice));\n        return [value, bytes.length];\n      }\n    });\n  }\n};\nvar getBase64Codec = () => combineCodec(getBase64Encoder(), getBase64Decoder());\n\n// src/null-characters.ts\nvar removeNullCharacters = (value) => (\n  // eslint-disable-next-line no-control-regex\n  value.replace(/\\u0000/g, \"\")\n);\nvar padNullCharacters = (value, chars) => value.padEnd(chars, \"\\0\");\n\n// ../text-encoding-impl/dist/index.browser.js\nvar e = globalThis.TextDecoder;\nvar o = globalThis.TextEncoder;\n\n// src/utf8.ts\nvar getUtf8Encoder = () => {\n  let textEncoder;\n  return createEncoder({\n    getSizeFromValue: (value) => (textEncoder ||= new o()).encode(value).length,\n    write: (value, bytes, offset) => {\n      const bytesToAdd = (textEncoder ||= new o()).encode(value);\n      bytes.set(bytesToAdd, offset);\n      return offset + bytesToAdd.length;\n    }\n  });\n};\nvar getUtf8Decoder = () => {\n  let textDecoder;\n  return createDecoder({\n    read(bytes, offset) {\n      const value = (textDecoder ||= new e()).decode(bytes.slice(offset));\n      return [removeNullCharacters(value), bytes.length];\n    }\n  });\n};\nvar getUtf8Codec = () => combineCodec(getUtf8Encoder(), getUtf8Decoder());\n\n// src/string.ts\nfunction getStringEncoder(config = {}) {\n  const size = config.size ?? getU32Encoder();\n  const encoding = config.encoding ?? getUtf8Encoder();\n  if (size === \"variable\") {\n    return encoding;\n  }\n  if (typeof size === \"number\") {\n    return fixEncoder(encoding, size);\n  }\n  return createEncoder({\n    getSizeFromValue: (value) => {\n      const contentSize = getEncodedSize(value, encoding);\n      return getEncodedSize(contentSize, size) + contentSize;\n    },\n    write: (value, bytes, offset) => {\n      const contentSize = getEncodedSize(value, encoding);\n      offset = size.write(contentSize, bytes, offset);\n      return encoding.write(value, bytes, offset);\n    }\n  });\n}\nfunction getStringDecoder(config = {}) {\n  const size = config.size ?? getU32Decoder();\n  const encoding = config.encoding ?? getUtf8Decoder();\n  if (size === \"variable\") {\n    return encoding;\n  }\n  if (typeof size === \"number\") {\n    return fixDecoder(encoding, size);\n  }\n  return createDecoder({\n    read: (bytes, offset = 0) => {\n      assertByteArrayIsNotEmptyForCodec(\"string\", bytes, offset);\n      const [lengthBigInt, lengthOffset] = size.read(bytes, offset);\n      const length = Number(lengthBigInt);\n      offset = lengthOffset;\n      const contentBytes = bytes.slice(offset, offset + length);\n      assertByteArrayHasEnoughBytesForCodec(\"string\", length, contentBytes);\n      const [value, contentOffset] = encoding.read(contentBytes, 0);\n      offset += contentOffset;\n      return [value, offset];\n    }\n  });\n}\nfunction getStringCodec(config = {}) {\n  return combineCodec(getStringEncoder(config), getStringDecoder(config));\n}\n\nexport { assertValidBaseString, getBase10Codec, getBase10Decoder, getBase10Encoder, getBase16Codec, getBase16Decoder, getBase16Encoder, getBase58Codec, getBase58Decoder, getBase58Encoder, getBase64Codec, getBase64Decoder, getBase64Encoder, getBaseXCodec, getBaseXDecoder, getBaseXEncoder, getBaseXResliceCodec, getBaseXResliceDecoder, getBaseXResliceEncoder, getStringCodec, getStringDecoder, getStringEncoder, getUtf8Codec, getUtf8Decoder, getUtf8Encoder, padNullCharacters, removeNullCharacters };\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.browser.js.map","import { isFixedSize, assertIsFixedSize, createEncoder, getEncodedSize, createDecoder, combineCodec } from '@solana/codecs-core';\nimport { getU8Encoder, getU8Decoder } from '@solana/codecs-numbers';\n\n// src/option.ts\nvar some = (value) => ({ __option: \"Some\", value });\nvar none = () => ({ __option: \"None\" });\nvar isOption = (input) => !!(input && typeof input === \"object\" && \"__option\" in input && (input.__option === \"Some\" && \"value\" in input || input.__option === \"None\"));\nvar isSome = (option) => option.__option === \"Some\";\nvar isNone = (option) => option.__option === \"None\";\n\n// src/unwrap-option.ts\nfunction unwrapOption(option, fallback) {\n  if (isSome(option))\n    return option.value;\n  return fallback ? fallback() : null;\n}\nvar wrapNullable = (nullable) => nullable !== null ? some(nullable) : none();\n\n// src/option-codec.ts\nfunction getOptionEncoder(item, config = {}) {\n  const prefix = config.prefix ?? getU8Encoder();\n  const fixed = config.fixed ?? false;\n  const isZeroSizeItem = isFixedSize(item) && isFixedSize(prefix) && item.fixedSize === 0;\n  if (fixed || isZeroSizeItem) {\n    assertIsFixedSize(item);\n    assertIsFixedSize(prefix);\n    const fixedSize = prefix.fixedSize + item.fixedSize;\n    return createEncoder({\n      fixedSize,\n      write: (optionOrNullable, bytes, offset) => {\n        const option = isOption(optionOrNullable) ? optionOrNullable : wrapNullable(optionOrNullable);\n        const prefixOffset = prefix.write(Number(isSome(option)), bytes, offset);\n        if (isSome(option)) {\n          item.write(option.value, bytes, prefixOffset);\n        }\n        return offset + fixedSize;\n      }\n    });\n  }\n  return createEncoder({\n    getSizeFromValue: (optionOrNullable) => {\n      const option = isOption(optionOrNullable) ? optionOrNullable : wrapNullable(optionOrNullable);\n      return getEncodedSize(Number(isSome(option)), prefix) + (isSome(option) ? getEncodedSize(option.value, item) : 0);\n    },\n    maxSize: sumCodecSizes([prefix, item].map(getMaxSize)) ?? void 0,\n    write: (optionOrNullable, bytes, offset) => {\n      const option = isOption(optionOrNullable) ? optionOrNullable : wrapNullable(optionOrNullable);\n      offset = prefix.write(Number(isSome(option)), bytes, offset);\n      if (isSome(option)) {\n        offset = item.write(option.value, bytes, offset);\n      }\n      return offset;\n    }\n  });\n}\nfunction getOptionDecoder(item, config = {}) {\n  const prefix = config.prefix ?? getU8Decoder();\n  const fixed = config.fixed ?? false;\n  let fixedSize = null;\n  const isZeroSizeItem = isFixedSize(item) && isFixedSize(prefix) && item.fixedSize === 0;\n  if (fixed || isZeroSizeItem) {\n    assertIsFixedSize(item);\n    assertIsFixedSize(prefix);\n    fixedSize = prefix.fixedSize + item.fixedSize;\n  }\n  return createDecoder({\n    ...fixedSize === null ? { maxSize: sumCodecSizes([prefix, item].map(getMaxSize)) ?? void 0 } : { fixedSize },\n    read: (bytes, offset) => {\n      if (bytes.length - offset <= 0) {\n        return [none(), offset];\n      }\n      const [isSome2, prefixOffset] = prefix.read(bytes, offset);\n      if (isSome2 === 0) {\n        return [none(), fixedSize !== null ? offset + fixedSize : prefixOffset];\n      }\n      const [value, newOffset] = item.read(bytes, prefixOffset);\n      return [some(value), fixedSize !== null ? offset + fixedSize : newOffset];\n    }\n  });\n}\nfunction getOptionCodec(item, config = {}) {\n  return combineCodec(getOptionEncoder(item, config), getOptionDecoder(item, config));\n}\nfunction sumCodecSizes(sizes) {\n  return sizes.reduce((all, size) => all === null || size === null ? null : all + size, 0);\n}\nfunction getMaxSize(codec) {\n  return isFixedSize(codec) ? codec.fixedSize : codec.maxSize ?? null;\n}\n\n// src/unwrap-option-recursively.ts\nfunction unwrapOptionRecursively(input, fallback) {\n  if (!input || ArrayBuffer.isView(input)) {\n    return input;\n  }\n  const next = (x) => fallback ? unwrapOptionRecursively(x, fallback) : unwrapOptionRecursively(x);\n  if (isOption(input)) {\n    if (isSome(input))\n      return next(input.value);\n    return fallback ? fallback() : null;\n  }\n  if (Array.isArray(input)) {\n    return input.map(next);\n  }\n  if (typeof input === \"object\") {\n    return Object.fromEntries(Object.entries(input).map(([k, v]) => [k, next(v)]));\n  }\n  return input;\n}\n\nexport { getOptionCodec, getOptionDecoder, getOptionEncoder, isNone, isOption, isSome, none, some, unwrapOption, unwrapOptionRecursively, wrapNullable };\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.browser.js.map","import { getStringCodec, getStructCodec, getTupleCodec, getUnitCodec } from '@solana/codecs';\nexport var Field;\n(function (Field) {\n    Field[Field[\"Name\"] = 0] = \"Name\";\n    Field[Field[\"Symbol\"] = 1] = \"Symbol\";\n    Field[Field[\"Uri\"] = 2] = \"Uri\";\n})(Field || (Field = {}));\nexport const getFieldCodec = () => [\n    ['Name', getUnitCodec()],\n    ['Symbol', getUnitCodec()],\n    ['Uri', getUnitCodec()],\n    ['Key', getStructCodec([['value', getTupleCodec([getStringCodec()])]])],\n];\nexport function getFieldConfig(field) {\n    if (field === Field.Name || field === 'Name' || field === 'name') {\n        return { __kind: 'Name' };\n    }\n    else if (field === Field.Symbol || field === 'Symbol' || field === 'symbol') {\n        return { __kind: 'Symbol' };\n    }\n    else if (field === Field.Uri || field === 'Uri' || field === 'uri') {\n        return { __kind: 'Uri' };\n    }\n    else {\n        return { __kind: 'Key', value: [field] };\n    }\n}\n//# sourceMappingURL=field.js.map","import { createHash } from 'crypto';\nexport const splDiscriminate = (discriminator, length = 8) => {\n    const digest = createHash('sha256').update(discriminator).digest();\n    return digest.subarray(0, length);\n};\n//# sourceMappingURL=splDiscriminate.js.map","import { PublicKey } from '@solana/web3.js';\nimport { getArrayCodec, getBytesCodec, getStringCodec, getStructCodec, getTupleCodec } from '@solana/codecs';\nexport const TOKEN_METADATA_DISCRIMINATOR = Buffer.from([112, 132, 90, 90, 11, 88, 157, 87]);\nconst tokenMetadataCodec = getStructCodec([\n    ['updateAuthority', getBytesCodec({ size: 32 })],\n    ['mint', getBytesCodec({ size: 32 })],\n    ['name', getStringCodec()],\n    ['symbol', getStringCodec()],\n    ['uri', getStringCodec()],\n    ['additionalMetadata', getArrayCodec(getTupleCodec([getStringCodec(), getStringCodec()]))],\n]);\n// Checks if all elements in the array are 0\nfunction isNonePubkey(buffer) {\n    for (let i = 0; i < buffer.length; i++) {\n        if (buffer[i] !== 0) {\n            return false;\n        }\n    }\n    return true;\n}\n// Pack TokenMetadata into byte slab\nexport function pack(meta) {\n    // If no updateAuthority given, set it to the None/Zero PublicKey for encoding\n    const updateAuthority = meta.updateAuthority ?? PublicKey.default;\n    return tokenMetadataCodec.encode({\n        ...meta,\n        updateAuthority: updateAuthority.toBuffer(),\n        mint: meta.mint.toBuffer(),\n    });\n}\n// unpack byte slab into TokenMetadata\nexport function unpack(buffer) {\n    const data = tokenMetadataCodec.decode(buffer);\n    return isNonePubkey(data.updateAuthority)\n        ? {\n            mint: new PublicKey(data.mint),\n            name: data.name,\n            symbol: data.symbol,\n            uri: data.uri,\n            additionalMetadata: data.additionalMetadata,\n        }\n        : {\n            updateAuthority: new PublicKey(data.updateAuthority),\n            mint: new PublicKey(data.mint),\n            name: data.name,\n            symbol: data.symbol,\n            uri: data.uri,\n            additionalMetadata: data.additionalMetadata,\n        };\n}\n//# sourceMappingURL=state.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\nexport const initializeAccount2InstructionData = struct([\n    u8('instruction'),\n    publicKey('owner'),\n]);\n/**\n * Construct an InitializeAccount2 instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     New account's owner/multisignature\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeAccount2Instruction(account, mint, owner, programId = TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.alloc(initializeAccount2InstructionData.span);\n    initializeAccount2InstructionData.encode({ instruction: TokenInstruction.InitializeAccount2, owner }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeAccount2 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeAccount2Instruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeAccount2InstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, mint, rent }, data, } = decodeInitializeAccount2InstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeAccount2)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !rent)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            rent,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeAccount2 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeAccount2InstructionUnchecked({ programId, keys: [account, mint, rent], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            rent,\n        },\n        data: initializeAccount2InstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=initializeAccount2.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\nexport const initializeAccount3InstructionData = struct([\n    u8('instruction'),\n    publicKey('owner'),\n]);\n/**\n * Construct an InitializeAccount3 instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     New account's owner/multisignature\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeAccount3Instruction(account, mint, owner, programId = TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.alloc(initializeAccount3InstructionData.span);\n    initializeAccount3InstructionData.encode({ instruction: TokenInstruction.InitializeAccount3, owner }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeAccount3 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeAccount3Instruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeAccount3InstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, mint }, data, } = decodeInitializeAccount3InstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeAccount3)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeAccount3 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeAccount3InstructionUnchecked({ programId, keys: [account, mint], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n        },\n        data: initializeAccount3InstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=initializeAccount3.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** The struct that represents the instruction data as it is read by the program */\nexport const initializeImmutableOwnerInstructionData = struct([\n    u8('instruction'),\n]);\n/**\n * Construct an InitializeImmutableOwner instruction\n *\n * @param account           Immutable Owner Account\n * @param programId         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeImmutableOwnerInstruction(account, programId) {\n    const keys = [{ pubkey: account, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(initializeImmutableOwnerInstructionData.span);\n    initializeImmutableOwnerInstructionData.encode({\n        instruction: TokenInstruction.InitializeImmutableOwner,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeImmutableOwner instruction and validate it\n *\n * @param instruction InitializeImmutableOwner instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeImmutableOwnerInstruction(instruction, programId) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeImmutableOwnerInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account }, data, } = decodeInitializeImmutableOwnerInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeImmutableOwner)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account)\n        throw new TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeImmutableOwner instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeImmutableOwnerInstructionUnchecked({ programId, keys: [account], data, }) {\n    const { instruction } = initializeImmutableOwnerInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            account: account,\n        },\n        data: {\n            instruction,\n        },\n    };\n}\n//# sourceMappingURL=initializeImmutableOwner.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, TokenUnsupportedInstructionError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const initializeMintCloseAuthorityInstructionData = struct([\n    u8('instruction'),\n    u8('closeAuthorityOption'),\n    publicKey('closeAuthority'),\n]);\n/**\n * Construct an InitializeMintCloseAuthority instruction\n *\n * @param mint            Token mint account\n * @param closeAuthority  Optional authority that can close the mint\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMintCloseAuthorityInstruction(mint, closeAuthority, programId) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(initializeMintCloseAuthorityInstructionData.span);\n    initializeMintCloseAuthorityInstructionData.encode({\n        instruction: TokenInstruction.InitializeMintCloseAuthority,\n        closeAuthorityOption: closeAuthority ? 1 : 0,\n        closeAuthority: closeAuthority || new PublicKey(0),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeMintCloseAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMintCloseAuthorityInstruction(instruction, programId) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMintCloseAuthorityInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint }, data, } = decodeInitializeMintCloseAuthorityInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMintCloseAuthority)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeMintCloseAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMintCloseAuthorityInstructionUnchecked({ programId, keys: [mint], data, }) {\n    const { instruction, closeAuthorityOption, closeAuthority } = initializeMintCloseAuthorityInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: {\n            instruction,\n            closeAuthority: closeAuthorityOption ? closeAuthority : null,\n        },\n    };\n}\n//# sourceMappingURL=initializeMintCloseAuthority.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions } from '../constants.js';\nimport { TokenUnsupportedInstructionError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** The struct that represents the instruction data as it is read by the program */\nexport const initializeNonTransferableMintInstructionData = struct([\n    u8('instruction'),\n]);\n/**\n * Construct an InitializeNonTransferableMint instruction\n *\n * @param mint           Mint Account to make non-transferable\n * @param programId         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeNonTransferableMintInstruction(mint, programId) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(initializeNonTransferableMintInstructionData.span);\n    initializeNonTransferableMintInstructionData.encode({\n        instruction: TokenInstruction.InitializeNonTransferableMint,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n//# sourceMappingURL=initializeNonTransferableMint.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, TokenUnsupportedInstructionError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const initializePermanentDelegateInstructionData = struct([\n    u8('instruction'),\n    publicKey('delegate'),\n]);\n/**\n * Construct an InitializePermanentDelegate instruction\n *\n * @param mint               Token mint account\n * @param permanentDelegate  Authority that may sign for `Transfer`s and `Burn`s on any account\n * @param programId          SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializePermanentDelegateInstruction(mint, permanentDelegate, programId) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(initializePermanentDelegateInstructionData.span);\n    initializePermanentDelegateInstructionData.encode({\n        instruction: TokenInstruction.InitializePermanentDelegate,\n        delegate: permanentDelegate || new PublicKey(0),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializePermanentDelegate instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializePermanentDelegateInstruction(instruction, programId) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializePermanentDelegateInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint }, data, } = decodeInitializePermanentDelegateInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializePermanentDelegate)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializePermanentDelegate instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializePermanentDelegateInstructionUnchecked({ programId, keys: [mint], data, }) {\n    const { instruction, delegate } = initializePermanentDelegateInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: {\n            instruction,\n            delegate,\n        },\n    };\n}\n//# sourceMappingURL=initializePermanentDelegate.js.map",null,null,null,null,null],"names":["base64Js","b64","lens","getLens","validLen","placeHoldersLen","tmp","i","arr","Arr","_byteLength","curByte","len","revLookup","charCodeAt","uint8","length","extraBytes","parts","maxChunkLength","len2","push","encodeChunk","lookup","join","Uint8Array","Array","code","Error","indexOf","start","end","num","output","ieee754","buffer","offset","isLE","mLen","nBytes","e","m","eLen","eMax","eBias","nBits","d","s","NaN","Infinity","Math","pow","value","c","rt","abs","isNaN","floor","log","LN2","base64","require$$0","require$$1","customInspectSymbol","Symbol","exports","Buffer","SlowBuffer","alloc","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","RangeError","buf","Object","setPrototypeOf","prototype","arg","encodingOrOffset","TypeError","allocUnsafe","from","string","encoding","isEncoding","byteLength","actual","write","slice","fromString","ArrayBuffer","isView","arrayView","isInstance","copy","fromArrayBuffer","byteOffset","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","b","obj","isBuffer","checked","undefined","numberIsNaN","type","isArray","data","fromObject","toPrimitive","assertSize","size","array","toString","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","this","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","bidirectionalIndexOf","val","dir","arrayIndexOf","call","lastIndexOf","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","j","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","fromByteArray","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","console","error","defineProperty","enumerable","get","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","set","swap16","swap32","swap64","toLocaleString","equals","inspect","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","hexSliceLookupTable","bytes","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","sym","getMessage","Base","constructor","super","writable","configurable","name","stack","message","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","isInteger","INVALID_BASE64_RE","leadSurrogate","toByteArray","split","base64clean","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","Layout_1","s16","nu64be","u48be","u40be","u32be","u16be","nu64","u40","u32","u24","u16","u8","greedy","Constant","UTF8","Blob","Boolean","BitStructure","VariantLayout","Union","UnionLayoutDiscriminator","Structure","Sequence","DoubleBE","Double","Float","NearInt64BE","NearUInt64BE","NearUInt64","IntBE","Int","UInt","OffsetLayout","GreedyCount","ExternalLayout","nameWithProperty","Layout","uint8ArrayToBuffer","checkUint8Array","constant","cstr","blob","unionLayoutDiscriminator","union","seq","bits","struct","f64","f32be","f32","ns64be","s40be","s32be","s24be","s16be","ns64","s48","s40","s32","s24","buffer_1","span","property","makeDestinationObject","getSpan","replicate","rv","create","assign","fromArray","values","bindConstructorLayout","Class","layout","hasOwnProperty","layout_","boundConstructor_","encode","decode","isCount","elementSpan","rem","UIntBE","V2E32","divmodInt64","hi32","lo32","roundedInt64","NearInt64","FloatBE","elementLayout","count","idx","elo","reduce","v","fields","decodePrefixes","acc","fd","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","addVariant","variant","vb","fixBitwiseResult","word","msb","_packedSetValue","_packedGetValue","addField","bf","BitField","addBoolean","fieldFor","container","totalBits","usedBits","sum","valueMask","wordMask","wordValue","srcBuffer","CString","srcb","maxSpan","u48","u24be","s8","s48be","f64be","utf8","TOKEN_PROGRAM_ID","PublicKey","TOKEN_2022_PROGRAM_ID","ASSOCIATED_TOKEN_PROGRAM_ID","encodeDecode","browser","toBigIntLE_1","toBigIntLE","reversed","reverse","hex","toBigIntBE","toBufferLE_1","toBufferLE","width","padStart","toBufferBE","u64","bigIntLayout","bigInt","bool","boolLayout","publicKey","publicKeyLayout","toBuffer","TokenError","TokenInvalidInstructionProgramError","TokenInvalidInstructionKeysError","TokenInvalidInstructionDataError","TokenInvalidInstructionTypeError","TokenInstruction","amountToUiAmountInstructionData","decodeAmountToUiAmountInstruction","instruction","programId","keys","mint","decodeAmountToUiAmountInstructionUnchecked","AmountToUiAmount","approveInstructionData","decodeApproveInstruction","account","delegate","owner","multiSigners","decodeApproveInstructionUnchecked","Approve","approveCheckedInstructionData","decodeApproveCheckedInstruction","decodeApproveCheckedInstructionUnchecked","ApproveChecked","burnInstructionData","decodeBurnInstruction","decodeBurnInstructionUnchecked","Burn","burnCheckedInstructionData","decodeBurnCheckedInstruction","decodeBurnCheckedInstructionUnchecked","BurnChecked","closeAccountInstructionData","decodeCloseAccountInstruction","destination","authority","decodeCloseAccountInstructionUnchecked","CloseAccount","AccountType","AccountState","CpiGuardInstruction","cpiGuardInstructionData","DefaultAccountStateInstruction","defaultAccountStateInstructionData","MemoTransferInstruction","memoTransferInstructionData","NonTransferableLayout","TransferFeeInstruction","initializeTransferFeeConfigInstructionData","decodeInitializeTransferFeeConfigInstruction","transferFeeInstruction","transferFeeConfigAuthorityOption","transferFeeConfigAuthority","withdrawWithheldAuthorityOption","withdrawWithheldAuthority","transferFeeBasisPoints","maximumFee","decodeInitializeTransferFeeConfigInstructionUnchecked","TransferFeeExtension","InitializeTransferFeeConfig","transferCheckedWithFeeInstructionData","decodeTransferCheckedWithFeeInstruction","source","signers","amount","decimals","fee","decodeTransferCheckedWithFeeInstructionUnchecked","TransferCheckedWithFee","withdrawWithheldTokensFromMintInstructionData","decodeWithdrawWithheldTokensFromMintInstruction","decodeWithdrawWithheldTokensFromMintInstructionUnchecked","WithdrawWithheldTokensFromMint","withdrawWithheldTokensFromAccountsInstructionData","decodeWithdrawWithheldTokensFromAccountsInstruction","sources","numTokenAccounts","decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked","WithdrawWithheldTokensFromAccounts","harvestWithheldTokensToMintInstructionData","decodeHarvestWithheldTokensToMintInstruction","decodeHarvestWithheldTokensToMintInstructionUnchecked","HarvestWithheldTokensToMint","transferFeeLayout","transferCheckedInstructionData","decodeTransferCheckedInstruction","decodeTransferCheckedInstructionUnchecked","TransferChecked","ExtraAccountMetaLayout","ExtraAccountMetaListLayout","TransferHookInstruction","initializeTransferHookInstructionData","updateTransferHookInstructionData","ExtensionType","initializeAccountInstructionData","decodeInitializeAccountInstruction","rent","decodeInitializeAccountInstructionUnchecked","InitializeAccount","initializeMultisigInstructionData","decodeInitializeMultisigInstruction","decodeInitializeMultisigInstructionUnchecked","InitializeMultisig","freezeAccountInstructionData","decodeFreezeAccountInstruction","decodeFreezeAccountInstructionUnchecked","FreezeAccount","mintToInstructionData","decodeMintToInstruction","decodeMintToInstructionUnchecked","MintTo","mintToCheckedInstructionData","decodeMintToCheckedInstruction","decodeMintToCheckedInstructionUnchecked","MintToChecked","revokeInstructionData","decodeRevokeInstruction","decodeRevokeInstructionUnchecked","Revoke","AuthorityType","setAuthorityInstructionData","decodeSetAuthorityInstruction","currentAuthority","authorityType","newAuthorityOption","newAuthority","decodeSetAuthorityInstructionUnchecked","SetAuthority","thawAccountInstructionData","decodeThawAccountInstruction","decodeThawAccountInstructionUnchecked","ThawAccount","transferInstructionData","decodeTransferInstruction","decodeTransferInstructionUnchecked","Transfer","decodeUiAmountToAmountInstruction","uiAmountToAmountInstructionData","decodeUiAmountToAmountInstructionUnchecked","UiAmountToAmount","initializeMintInstructionData","decodeInitializeMintInstruction","decodeInitializeMintInstructionUnchecked","InitializeMint","mintAuthority","freezeAuthorityOption","freezeAuthority","InterestBearingMintInstruction","MetadataPointerInstruction","initializeMetadataPointerData","updateMetadataPointerData","__DEV__","process","NODE_ENV","SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED","SOLANA_ERROR__INVALID_NONCE","SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND","SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE","SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH","SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE","SOLANA_ERROR__MALFORMED_BIGINT_STRING","SOLANA_ERROR__MALFORMED_NUMBER_STRING","SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE","SOLANA_ERROR__JSON_RPC__PARSE_ERROR","SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR","SOLANA_ERROR__JSON_RPC__INVALID_PARAMS","SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND","SOLANA_ERROR__JSON_RPC__INVALID_REQUEST","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","SOLANA_ERROR__JSON_RPC__SCAN_ERROR","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP","SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH","SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE","SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS","SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY","SOLANA_ERROR__ADDRESSES__MALFORMED_PDA","SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE","SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED","SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED","SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE","SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED","SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER","SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND","SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND","SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT","SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT","SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED","SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT","SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED","SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED","SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED","SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED","SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED","SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED","SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH","SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH","SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH","SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE","SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS","SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA","SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH","SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN","SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR","SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT","SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA","SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA","SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL","SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS","SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID","SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE","SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED","SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT","SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION","SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID","SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND","SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED","SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE","SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED","SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX","SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED","SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED","SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS","SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED","SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE","SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED","SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING","SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC","SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM","SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR","SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED","SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE","SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT","SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID","SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH","SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT","SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED","SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED","SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS","SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC","SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED","SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION","SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE","SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE","SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE","SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE","SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY","SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR","SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT","SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER","SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW","SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR","SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER","SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED","SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED","SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED","SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS","SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS","SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER","SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER","SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER","SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER","SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER","SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER","SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER","SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER","SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS","SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING","SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES","SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE","SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME","SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME","SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE","SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING","SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE","SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND","SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING","SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING","SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING","SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING","SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING","SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING","SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE","SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN","SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE","SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE","SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND","SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND","SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE","SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE","SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED","SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND","SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP","SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE","SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX","SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE","SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION","SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE","SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE","SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING","SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT","SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION","SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT","SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT","SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT","SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS","SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND","SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER","SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA","SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX","SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT","SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT","SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT","SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION","SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT","SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED","SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT","SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED","SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED","SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION","SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY","SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH","SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH","SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH","SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH","SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH","SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH","SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS","SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE","SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT","SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT","SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE","SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE","SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH","SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE","SOLANA_ERROR__RPC__INTEGER_OVERFLOW","SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN","SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR","SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST","SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID","SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED","SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED","SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT","SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING","SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE","SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING","SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE","SolanaErrorMessages","encodeValue","map","element","encodeURIComponent","getPrototypeOf","encodeObjectContextEntry","key","getErrorMessage","context","substring","variableName","getHumanReadableErrorMessage","decodingAdviceMessage","entries","encodeContextObject","SolanaError","contextAndErrorOptions","errorOptions","cause","contextRest","__code","assertByteArrayIsNotEmptyForCodec","codecDescription","assertByteArrayHasEnoughBytesForCodec","expected","bytesLength","fixBytes","paddedBytes","padBytes","getEncodedSize","encoder","fixedSize","getSizeFromValue","createEncoder","freeze","createDecoder","decoder","isFixedSize","codec","assertIsFixedSize","combineCodec","decoderFixedSize","encoderFixedSize","maxSize","decoderMaxSize","encoderMaxSize","fixEncoder","fixedBytes","variableByteArray","fixedByteArray","fixDecoder","isLittleEndian","config","endian","numberEncoderFactory","assertNumberIsBetweenForCodec","arrayBuffer","DataView","numberDecoderFactory","view","bytesOffset","toArrayBuffer","getU32Encoder","le","setUint32","getU32Decoder","getUint32","getU64Codec","setBigUint64","getU64Encoder","getBigUint64","getU64Decoder","getU8Encoder","setUint8","getU8Decoder","getUint8","getU8Codec","assertValidNumberOfItemsForCodec","sumCodecSizes","sizes","all","getFixedSize","getMaxSize","getArrayCodec","item","computeArrayLikeCodecSize","forEach","getArrayEncoder","itemSize","newOffset2","resolvedSize","newOffset","getArrayDecoder","getBooleanEncoder","unmap","getBooleanDecoder","getBytesCodec","byteEncoder","getBytesEncoder","byteDecoder","lengthBigInt","lengthOffset","contentBytes","getBytesDecoder","getDataEnumFixedSize","variants","prefix","variantSize","every","getDataEnumMaxSize","maxVariantSize","getVariantDiscriminator","findIndex","__kind","getTupleCodec","items","index","one","getTupleEncoder","newValue","getTupleDecoder","getStructCodec","fieldCodecs","getStructEncoder","getStructDecoder","getUnitCodec","_value","_bytes","removeNullCharacters","globalThis","TextDecoder","o","TextEncoder","getUtf8Encoder","textEncoder","bytesToAdd","getUtf8Decoder","textDecoder","getStringCodec","contentSize","getStringEncoder","getStringDecoder","Field","some","__option","none","isOption","isSome","option","wrapNullable","nullable","getOptionCodec","fixed","isZeroSizeItem","optionOrNullable","prefixOffset","getOptionEncoder","isSome2","getOptionDecoder","splDiscriminate","createHash","update","digest","initializeImmutableOwnerInstructionData","decodeInitializeImmutableOwnerInstruction","decodeInitializeImmutableOwnerInstructionUnchecked","InitializeImmutableOwner","initializeMintCloseAuthorityInstructionData","decodeInitializeMintCloseAuthorityInstruction","closeAuthorityOption","closeAuthority","decodeInitializeMintCloseAuthorityInstructionUnchecked","InitializeMintCloseAuthority","initializePermanentDelegateInstructionData","decodeInitializePermanentDelegateInstruction","decodeInitializePermanentDelegateInstructionUnchecked","InitializePermanentDelegate","hexToBuffer","rawHex","startsWith","parseTransactionAccounts","loadedAddresses","accounts","version","accountKeys","staticAccountKeys","readonlySignedAccountsCount","header","numReadonlySignedAccounts","readonlyUnsignedAccountsCount","numReadonlyUnsignedAccounts","requiredSignaturesAccountsCount","numRequiredSignatures","totalAccounts","parsedAccounts","isSigner","isWritable","pubkey","ALTWritable","ALTReadOnly","readonly","compiledInstructionToInstruction","compiledInstruction","ci","TransactionInstruction","utils","bs58","programIdIndex","accountIdx","accountKeyIndexes","accountIndex","parsedAccountsToMeta","accountMeta","meta","pk","encoded","find","parsedInstructionToInstruction","parsedInstruction","flattenTransactionResponse","transaction","result","txInstructions","compiledInstructions","accountsMeta","_a","orderedCII","_b","innerInstructions","sort","totalCalls","_c","accumulator","cii","instructions","lastPushedIx","callIndex","CII","CIIEntry","parentProgramId","flattenParsedTransaction","newLogContext","depth","id","instructionIndex","logMessages","dataLogs","rawLogs","parseLogs","logs","parserRe","currentInstruction","currentDepth","callStack","callIds","match","exec","groups","logTruncated","invokeResult","programInvoke","invokeProgramId","level","programSuccessResult","lastProgram","pop","lastCallIndex","successResultProgramId","programFailedResult","failedResultProgramId","failedResultErr","programCompleteFailedResult","failedCompleteError","programLog","logMessage","programData","programConsumed","programReturn","returnProgramId","returnMessage","insufficientLamports","setTransferFeeInstructionData","decodeSetTransferFeeInstruction","decodeSetTransferFeeInstructionUnchecked","SetTransferFee","metadataLayout","updateMetadataLayout","variantEncoder","getDataEnumEncoder","dOffset","variantField","maxRange","minRange","vOffset","getDataEnumDecoder","getDataEnumCodec","removeKeyLayout","getBooleanCodec","updateAuthorityLayout","emitLayout","getAccountDataSizeLayout","decodeSystemInstruction","SystemInstruction","decodeInstructionType","decoded","decodeNonceAdvance","noncePubkey","authorizedPubkey","args","decodeAllocate","accountPubkey","space","BN","decodeAllocateWithSeed","basePubkey","seed","base","decodeAssign","decodeAssignWithSeed","decodeNonceAuthorize","authorized","newAuthorizedPubkey","decodeCreateAccount","fromPubkey","newAccountPubkey","lamports","decodeCreateWithSeed","decodeNonceInitialize","decodeTransfer","toPubkey","decodeTransferWithSeed","decodeNonceWithdraw","SystemProgram","unknown","decodeTokenInstruction","spl.TokenInstruction","decodedIx","spl.decodeInitializeMintInstruction","spl.decodeInitializeAccountInstruction","spl.decodeInitializeMultisigInstruction","multisig","spl.decodeTransferInstruction","spl.decodeApproveInstruction","spl.decodeRevokeInstruction","spl.decodeSetAuthorityInstruction","spl.decodeMintToInstruction","spl.decodeBurnInstruction","spl.decodeCloseAccountInstruction","spl.decodeFreezeAccountInstruction","spl.decodeThawAccountInstruction","spl.decodeTransferCheckedInstruction","spl.decodeApproveCheckedInstruction","spl.decodeMintToCheckedInstruction","spl.decodeBurnCheckedInstruction","InitializeAccount2","SyncNative","InitializeAccount3","InitializeMultisig2","InitializeMint2","spl.decodeInitializeMintInstructionUnchecked","spl.TOKEN_PROGRAM_ID","decodeToken2022Instruction","spl.TOKEN_2022_PROGRAM_ID","GetAccountDataSize","instructionData","extensionTypes","extensions","spl.ExtensionType","spl.decodeInitializeImmutableOwnerInstruction","spl.decodeAmountToUiAmountInstruction","spl.decodeUiAmountToAmountInstruction","uiAmount","spl.decodeInitializeMintCloseAuthorityInstruction","spl.TransferFeeInstruction","spl.decodeInitializeTransferFeeConfigInstruction","spl.decodeTransferCheckedWithFeeInstruction","spl.decodeWithdrawWithheldTokensFromMintInstruction","spl.decodeWithdrawWithheldTokensFromAccountsInstruction","spl.decodeHarvestWithheldTokensToMintInstruction","DefaultAccountStateExtension","spl.DefaultAccountStateInstruction","Initialize","spl.defaultAccountStateInstructionData","accountState","spl.AccountState","Update","MemoTransferExtension","spl.memoTransferInstructionData","memoTransferInstruction","spl.MemoTransferInstruction","CreateNativeMint","InitializeNonTransferableMint","CpiGuardExtension","spl.cpiGuardInstructionData","cpiGuardInstruction","spl.CpiGuardInstruction","spl.decodeInitializePermanentDelegateInstruction","TransferHookExtension","spl.TransferHookInstruction","spl.initializeTransferHookInstructionData","transferHookProgramId","spl.updateTransferHookInstructionData","MetadataPointerExtension","spl.MetadataPointerInstruction","spl.initializeMetadataPointerData","metadataAddress","spl.updateMetadataPointerData","metadata","symbol","uri","field","idempotent","decodeAssociatedTokenInstruction","spl.ASSOCIATED_TOKEN_PROGRAM_ID","flattenIdlAccounts","accName","newPrefix","flat","SolanaParser","programInfos","parsers","instructionDecoders","Map","instructionParsers","standardParsers","toBase58","programInfo","addParserFromIdl","idl","parserInfo","has","parser","addParser","BorshInstructionCoder","buildIdlParser","isParserAvailble","retrieveParserReadyProgramIds","parsedIx","ix","instr","buildUnknownParsedInstruction","flatIdlAccounts","removeParser","delete","argData","parseInstruction","parseTransactionWithInnerInstructions","tx","parseTransactionData","txMessage","altLoadedAddresses","parseTransactionParsedData","txParsedMessage","metaLike","signer","parseParsedTransactionWithInnerInstructions","txn","allInstructions","parsedIns","convertSolanaParsedInstruction","pId","info","parseTransaction","connection","txId","flatten","commitment","getTransaction","maxSupportedTransactionVersion","parseTransactionDump","txDump","Transaction","compileMessage"],"mappings":"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"}